(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('monaco')) :
	typeof define === 'function' && define.amd ? define(['exports', 'monaco'], factory) :
	(factory((global.main = global.main || {}),global.na));
}(this, (function (exports,monaco$1) { 'use strict';

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};



function unwrapExports (x) {
	return x && x.__esModule ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

// 7.2.1 RequireObjectCoercible(argument)
var _defined = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};

// 7.1.13 ToObject(argument)
var defined = _defined;
var _toObject = function(it){
  return Object(defined(it));
};

var hasOwnProperty = {}.hasOwnProperty;
var _has = function(it, key){
  return hasOwnProperty.call(it, key);
};

var toString$1 = {}.toString;

var _cof = function(it){
  return toString$1.call(it).slice(8, -1);
};

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = _cof;
var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = _iobject;
var defined$1 = _defined;
var _toIobject = function(it){
  return IObject(defined$1(it));
};

// 7.1.4 ToInteger
var ceil  = Math.ceil;
var floor = Math.floor;
var _toInteger = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

// 7.1.15 ToLength
var toInteger = _toInteger;
var min       = Math.min;
var _toLength = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

var toInteger$1 = _toInteger;
var max       = Math.max;
var min$1       = Math.min;
var _toIndex = function(index, length){
  index = toInteger$1(index);
  return index < 0 ? max(index + length, 0) : min$1(index, length);
};

// false -> Array#indexOf
// true  -> Array#includes
var toIObject$1 = _toIobject;
var toLength  = _toLength;
var toIndex   = _toIndex;
var _arrayIncludes = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject$1($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

var _global = createCommonjsModule(function (module) {
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
});

var global$1 = _global;
var SHARED = '__core-js_shared__';
var store  = global$1[SHARED] || (global$1[SHARED] = {});
var _shared = function(key){
  return store[key] || (store[key] = {});
};

var id = 0;
var px = Math.random();
var _uid = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

var shared = _shared('keys');
var uid    = _uid;
var _sharedKey = function(key){
  return shared[key] || (shared[key] = uid(key));
};

var has$1          = _has;
var toIObject    = _toIobject;
var arrayIndexOf = _arrayIncludes(false);
var IE_PROTO     = _sharedKey('IE_PROTO');

var _objectKeysInternal = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has$1(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has$1(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

// IE 8- don't enum bug keys
var _enumBugKeys = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys$1       = _objectKeysInternal;
var enumBugKeys = _enumBugKeys;

var _objectKeys = Object.keys || function keys(O){
  return $keys$1(O, enumBugKeys);
};

var _core = createCommonjsModule(function (module) {
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
});

var _aFunction = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};

// optional / simple context binding
var aFunction = _aFunction;
var _ctx = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};

var _isObject = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

var isObject$1 = _isObject;
var _anObject = function(it){
  if(!isObject$1(it))throw TypeError(it + ' is not an object!');
  return it;
};

var _fails = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};

// Thank's IE8 for his funny defineProperty
var _descriptors = !_fails(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});

var isObject$2 = _isObject;
var document$1 = _global.document;
var is = isObject$2(document$1) && isObject$2(document$1.createElement);
var _domCreate = function(it){
  return is ? document$1.createElement(it) : {};
};

var _ie8DomDefine = !_descriptors && !_fails(function(){
  return Object.defineProperty(_domCreate('div'), 'a', {get: function(){ return 7; }}).a != 7;
});

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject$3 = _isObject;
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
var _toPrimitive = function(it, S){
  if(!isObject$3(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject$3(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject$3(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject$3(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};

var anObject       = _anObject;
var IE8_DOM_DEFINE = _ie8DomDefine;
var toPrimitive    = _toPrimitive;
var dP$1             = Object.defineProperty;

var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP$1(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};

var _objectDp = {
	f: f
};

var _propertyDesc = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};

var dP         = _objectDp;
var createDesc = _propertyDesc;
var _hide = _descriptors ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};

var global$2    = _global;
var core$1      = _core;
var ctx       = _ctx;
var hide      = _hide;
var PROTOTYPE = 'prototype';

var $export$1 = function(type, name, source){
  var IS_FORCED = type & $export$1.F
    , IS_GLOBAL = type & $export$1.G
    , IS_STATIC = type & $export$1.S
    , IS_PROTO  = type & $export$1.P
    , IS_BIND   = type & $export$1.B
    , IS_WRAP   = type & $export$1.W
    , exports   = IS_GLOBAL ? core$1 : core$1[name] || (core$1[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global$2 : IS_STATIC ? global$2[name] : (global$2[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global$2)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export$1.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export$1.F = 1;   // forced
$export$1.G = 2;   // global
$export$1.S = 4;   // static
$export$1.P = 8;   // proto
$export$1.B = 16;  // bind
$export$1.W = 32;  // wrap
$export$1.U = 64;  // safe
$export$1.R = 128; // real proto method for `library` 
var _export = $export$1;

// most Object methods by ES6 should accept primitives
var $export = _export;
var core    = _core;
var fails   = _fails;
var _objectSap = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};

// 19.1.2.14 Object.keys(O)
var toObject = _toObject;
var $keys    = _objectKeys;

_objectSap('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});

var keys$2 = _core.Object.keys;

var keys$1 = createCommonjsModule(function (module) {
module.exports = { "default": keys$2, __esModule: true };
});

var _Object$keys = unwrapExports(keys$1);

var toInteger$2 = _toInteger;
var defined$2   = _defined;
// true  -> String#at
// false -> String#codePointAt
var _stringAt = function(TO_STRING){
  return function(that, pos){
    var s = String(defined$2(that))
      , i = toInteger$2(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

var _library = true;

var _redefine = _hide;

var _iterators = {};

var dP$2       = _objectDp;
var anObject$2 = _anObject;
var getKeys  = _objectKeys;

var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties){
  anObject$2(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP$2.f(O, P = keys[i++], Properties[P]);
  return O;
};

var _html = _global.document && document.documentElement;

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject$1    = _anObject;
var dPs         = _objectDps;
var enumBugKeys$1 = _enumBugKeys;
var IE_PROTO$1    = _sharedKey('IE_PROTO');
var Empty       = function(){ /* empty */ };
var PROTOTYPE$1   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = _domCreate('iframe')
    , i      = enumBugKeys$1.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  _html.appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE$1][enumBugKeys$1[i]];
  return createDict();
};

var _objectCreate = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE$1] = anObject$1(O);
    result = new Empty;
    Empty[PROTOTYPE$1] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO$1] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

var _wks = createCommonjsModule(function (module) {
var store      = _shared('wks')
  , uid        = _uid
  , Symbol     = _global.Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
});

var def = _objectDp.f;
var has$3 = _has;
var TAG = _wks('toStringTag');

var _setToStringTag = function(it, tag, stat){
  if(it && !has$3(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};

var create$1         = _objectCreate;
var descriptor     = _propertyDesc;
var setToStringTag$1 = _setToStringTag;
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
_hide(IteratorPrototype, _wks('iterator'), function(){ return this; });

var _iterCreate = function(Constructor, NAME, next){
  Constructor.prototype = create$1(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag$1(Constructor, NAME + ' Iterator');
};

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has$4         = _has;
var toObject$1    = _toObject;
var IE_PROTO$2    = _sharedKey('IE_PROTO');
var ObjectProto = Object.prototype;

var _objectGpo = Object.getPrototypeOf || function(O){
  O = toObject$1(O);
  if(has$4(O, IE_PROTO$2))return O[IE_PROTO$2];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

var LIBRARY        = _library;
var $export$2        = _export;
var redefine       = _redefine;
var hide$1           = _hide;
var has$2            = _has;
var Iterators      = _iterators;
var $iterCreate    = _iterCreate;
var setToStringTag = _setToStringTag;
var getPrototypeOf = _objectGpo;
var ITERATOR       = _wks('iterator');
var BUGGY          = !([].keys && 'next' in [].keys());
var FF_ITERATOR    = '@@iterator';
var KEYS           = 'keys';
var VALUES         = 'values';

var returnThis = function(){ return this; };

var _iterDefine = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has$2(IteratorPrototype, ITERATOR))hide$1(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide$1(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export$2($export$2.P + $export$2.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

var $at  = _stringAt(true);

// 21.1.3.27 String.prototype[@@iterator]()
_iterDefine(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});

// call something on iterator step with safe closing on error
var anObject$3 = _anObject;
var _iterCall = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject$3(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject$3(ret.call(iterator));
    throw e;
  }
};

// check on default Array iterator
var Iterators$1  = _iterators;
var ITERATOR$1   = _wks('iterator');
var ArrayProto = Array.prototype;

var _isArrayIter = function(it){
  return it !== undefined && (Iterators$1.Array === it || ArrayProto[ITERATOR$1] === it);
};

var $defineProperty = _objectDp;
var createDesc$1      = _propertyDesc;

var _createProperty = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc$1(0, value));
  else object[index] = value;
};

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof$1 = _cof;
var TAG$1 = _wks('toStringTag');
var ARG = cof$1(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet$1 = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

var _classof = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet$1(O = Object(it), TAG$1)) == 'string' ? T
    // builtinTag case
    : ARG ? cof$1(O)
    // ES3 arguments fallback
    : (B = cof$1(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

var classof   = _classof;
var ITERATOR$2  = _wks('iterator');
var Iterators$2 = _iterators;
var core_getIteratorMethod = _core.getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR$2]
    || it['@@iterator']
    || Iterators$2[classof(it)];
};

var ITERATOR$3     = _wks('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR$3]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

var _iterDetect = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR$3]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR$3] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};

var ctx$1            = _ctx;
var $export$3        = _export;
var toObject$2       = _toObject;
var call           = _iterCall;
var isArrayIter    = _isArrayIter;
var toLength$1       = _toLength;
var createProperty = _createProperty;
var getIterFn      = core_getIteratorMethod;

$export$3($export$3.S + $export$3.F * !_iterDetect(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject$2(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx$1(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength$1(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

var from$2 = _core.Array.from;

var from$1 = createCommonjsModule(function (module) {
module.exports = { "default": from$2, __esModule: true };
});

var _Array$from = unwrapExports(from$1);

var classCallCheck = createCommonjsModule(function (module, exports) {
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
});

var _classCallCheck = unwrapExports(classCallCheck);

var $export$4 = _export;
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export$4($export$4.S + $export$4.F * !_descriptors, 'Object', {defineProperty: _objectDp.f});

var $Object = _core.Object;
var defineProperty$3 = function defineProperty$3(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};

var defineProperty$1 = createCommonjsModule(function (module) {
module.exports = { "default": defineProperty$3, __esModule: true };
});

var createClass = createCommonjsModule(function (module, exports) {
"use strict";

exports.__esModule = true;

var _defineProperty = defineProperty$1;

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
});

var _createClass = unwrapExports(createClass);

var _addToUnscopables = function(){ /* empty */ };

var _iterStep = function(done, value){
  return {value: value, done: !!done};
};

var addToUnscopables = _addToUnscopables;
var step             = _iterStep;
var Iterators$4        = _iterators;
var toIObject$2        = _toIobject;

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
var es6_array_iterator = _iterDefine(Array, 'Array', function(iterated, kind){
  this._t = toIObject$2(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators$4.Arguments = Iterators$4.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

var global$3        = _global;
var hide$2          = _hide;
var Iterators$3     = _iterators;
var TO_STRING_TAG = _wks('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global$3[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide$2(proto, TO_STRING_TAG, NAME);
  Iterators$3[NAME] = Iterators$3.Array;
}

var anObject$4 = _anObject;
var get$1      = core_getIteratorMethod;
var core_getIterator = _core.getIterator = function(it){
  var iterFn = get$1(it);
  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
  return anObject$4(iterFn.call(it));
};

var getIterator$1 = core_getIterator;

var getIterator = createCommonjsModule(function (module) {
module.exports = { "default": getIterator$1, __esModule: true };
});

var _getIterator = unwrapExports(getIterator);

var hide$3 = _hide;
var _redefineAll = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide$3(target, key, src[key]);
  } return target;
};

var _anInstance = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

var _forOf = createCommonjsModule(function (module) {
var ctx         = _ctx
  , call        = _iterCall
  , isArrayIter = _isArrayIter
  , anObject    = _anObject
  , toLength    = _toLength
  , getIterFn   = core_getIteratorMethod
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;
});

var global$4      = _global;
var core$2        = _core;
var dP$4          = _objectDp;
var DESCRIPTORS$1 = _descriptors;
var SPECIES     = _wks('species');

var _setSpecies = function(KEY){
  var C = typeof core$2[KEY] == 'function' ? core$2[KEY] : global$4[KEY];
  if(DESCRIPTORS$1 && C && !C[SPECIES])dP$4.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};

var _meta = createCommonjsModule(function (module) {
var META     = _uid('meta')
  , isObject = _isObject
  , has      = _has
  , setDesc  = _objectDp.f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !_fails(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};
});

var dP$3          = _objectDp.f;
var create$2      = _objectCreate;
var redefineAll = _redefineAll;
var ctx$2         = _ctx;
var anInstance  = _anInstance;
var defined$3     = _defined;
var forOf       = _forOf;
var $iterDefine = _iterDefine;
var step$1        = _iterStep;
var setSpecies  = _setSpecies;
var DESCRIPTORS = _descriptors;
var fastKey     = _meta.fastKey;
var SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

var _collectionStrong = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create$2(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx$2(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP$3(C.prototype, 'size', {
      get: function(){
        return defined$3(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step$1(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step$1(0, entry.k);
      if(kind == 'values')return step$1(0, entry.v);
      return step$1(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

// 7.2.2 IsArray(argument)
var cof$2 = _cof;
var _isArray = Array.isArray || function isArray(arg){
  return cof$2(arg) == 'Array';
};

var isObject$5 = _isObject;
var isArray$1  = _isArray;
var SPECIES$1  = _wks('species');

var _arraySpeciesConstructor = function(original){
  var C;
  if(isArray$1(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray$1(C.prototype)))C = undefined;
    if(isObject$5(C)){
      C = C[SPECIES$1];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = _arraySpeciesConstructor;

var _arraySpeciesCreate = function(original, length){
  return new (speciesConstructor(original))(length);
};

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx$3      = _ctx;
var IObject$1  = _iobject;
var toObject$3 = _toObject;
var toLength$2 = _toLength;
var asc      = _arraySpeciesCreate;
var _arrayMethods = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject$3($this)
      , self   = IObject$1(O)
      , f      = ctx$3(callbackfn, that, 3)
      , length = toLength$2(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

var global$5         = _global;
var $export$5        = _export;
var meta           = _meta;
var fails$1          = _fails;
var hide$4           = _hide;
var redefineAll$1    = _redefineAll;
var forOf$1          = _forOf;
var anInstance$1     = _anInstance;
var isObject$4       = _isObject;
var setToStringTag$2 = _setToStringTag;
var dP$5             = _objectDp.f;
var each           = _arrayMethods(0);
var DESCRIPTORS$2    = _descriptors;

var _collection = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global$5[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  if(!DESCRIPTORS$2 || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails$1(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll$1(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function(target, iterable){
      anInstance$1(target, C, NAME, '_c');
      target._c = new Base;
      if(iterable != undefined)forOf$1(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide$4(C.prototype, KEY, function(a, b){
        anInstance$1(this, C, KEY);
        if(!IS_ADDER && IS_WEAK && !isObject$4(a))return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    if('size' in proto)dP$5(C.prototype, 'size', {
      get: function(){
        return this._c.size;
      }
    });
  }

  setToStringTag$2(C, NAME);

  O[NAME] = C;
  $export$5($export$5.G + $export$5.W + $export$5.F, O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};

var strong = _collectionStrong;

// 23.1 Map Objects
var es6_map = _collection('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);

var forOf$2 = _forOf;

var _arrayFromIterable = function(iter, ITERATOR){
  var result = [];
  forOf$2(iter, false, result.push, result, ITERATOR);
  return result;
};

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof$1 = _classof;
var from$4    = _arrayFromIterable;
var _collectionToJson = function(NAME){
  return function toJSON(){
    if(classof$1(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from$4(this);
  };
};

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export$6  = _export;

$export$6($export$6.P + $export$6.R, 'Map', {toJSON: _collectionToJson('Map')});

var map$1 = _core.Map;

var map = createCommonjsModule(function (module) {
module.exports = { "default": map$1, __esModule: true };
});

var _Map = unwrapExports(map);

var defineProperty$5 = createCommonjsModule(function (module, exports) {
"use strict";

exports.__esModule = true;

var _defineProperty = defineProperty$1;

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};
});

var _defineProperty = unwrapExports(defineProperty$5);

var fableGlobal = function () {
    var globalObj = typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : null;
    if (typeof globalObj.__FABLE_CORE__ === "undefined") {
        globalObj.__FABLE_CORE__ = {
            types: new Map(),
            symbols: {
                reflection: Symbol("reflection"),
                generics: Symbol("generics")
            }
        };
    }
    return globalObj.__FABLE_CORE__;
}();
function setType(fullName, cons) {
    fableGlobal.types.set(fullName, cons);
}

var _Symbol = fableGlobal.symbols;

var _createClass$3 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NonDeclaredType = function () {
    function NonDeclaredType(kind, name, generics) {
        _classCallCheck$3(this, NonDeclaredType);

        this.kind = kind;
        this.name = name;
        this.generics = generics || [];
    }

    _createClass$3(NonDeclaredType, [{
        key: "Equals",
        value: function Equals(other) {
            return this.kind === other.kind && this.name === other.name && equals(this.generics, other.generics);
        }
    }]);

    return NonDeclaredType;
}();

var GenericNonDeclaredType = function (_NonDeclaredType) {
    _inherits(GenericNonDeclaredType, _NonDeclaredType);

    function GenericNonDeclaredType(kind, generics) {
        _classCallCheck$3(this, GenericNonDeclaredType);

        return _possibleConstructorReturn(this, (GenericNonDeclaredType.__proto__ || Object.getPrototypeOf(GenericNonDeclaredType)).call(this, kind, null, generics));
    }

    _createClass$3(GenericNonDeclaredType, [{
        key: _Symbol.generics,
        value: function value() {
            return this.generics;
        }
    }]);

    return GenericNonDeclaredType;
}(NonDeclaredType);

var Any = new NonDeclaredType("Any");
var Unit = new NonDeclaredType("Unit");
function Option(t) {
    return new GenericNonDeclaredType("Option", [t]);
}
function FArray(t) {
    return new GenericNonDeclaredType("Array", [t]);
}
function Tuple(ts) {
    return new GenericNonDeclaredType("Tuple", ts);
}
function GenericParam(name) {
    return new NonDeclaredType("GenericParam", name);
}
function Interface(name) {
    return new NonDeclaredType("Interface", name);
}
function makeGeneric(typeDef, genArgs) {
    return function (_typeDef) {
        _inherits(_class, _typeDef);

        function _class() {
            _classCallCheck$3(this, _class);

            return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
        }

        _createClass$3(_class, [{
            key: _Symbol.generics,
            value: function value() {
                return genArgs;
            }
        }]);

        return _class;
    }(typeDef);
}
/**
 * Checks if this a function constructor extending another with generic info.
 */
function isGeneric(typ) {
    return typeof typ === "function" && !!typ.prototype[_Symbol.generics];
}
/**
 * Returns the parent if this is a declared generic type or the argument otherwise.
 * Attention: Unlike .NET this doesn't throw an exception if type is not generic.
*/
function getDefinition(typ) {
    return typeof typ === "function" && typ.prototype[_Symbol.generics] ? Object.getPrototypeOf(typ.prototype).constructor : typ;
}

function hasInterface(obj, interfaceName) {
    if (typeof obj[_Symbol.reflection] === "function") {
        var interfaces = obj[_Symbol.reflection]().interfaces;
        return Array.isArray(interfaces) && interfaces.indexOf(interfaceName) > -1;
    }
    return false;
}

function getRestParams(args, idx) {
    for (var _len = args.length, restArgs = Array(_len > idx ? _len - idx : 0), _key = idx; _key < _len; _key++) {
        restArgs[_key - idx] = args[_key];
    }return restArgs;
}
function toString$2(o) {
    return o != null && typeof o.ToString == "function" ? o.ToString() : String(o);
}

function equals(x, y) {
    // Optimization if they are referencially equal
    if (x === y) return true;else if (x == null) return y == null;else if (y == null) return false;else if (isGeneric(x) && isGeneric(y)) return getDefinition(x) === getDefinition(y) && equalsRecords(x.prototype[_Symbol.generics](), y.prototype[_Symbol.generics]());else if (Object.getPrototypeOf(x) !== Object.getPrototypeOf(y)) return false;else if (typeof x.Equals === "function") return x.Equals(y);else if (Array.isArray(x)) {
        if (x.length != y.length) return false;
        for (var i = 0; i < x.length; i++) {
            if (!equals(x[i], y[i])) return false;
        }return true;
    } else if (ArrayBuffer.isView(x)) {
        if (x.byteLength !== y.byteLength) return false;
        var dv1 = new DataView(x.buffer),
            dv2 = new DataView(y.buffer);
        for (var _i = 0; _i < x.byteLength; _i++) {
            if (dv1.getUint8(_i) !== dv2.getUint8(_i)) return false;
        }return true;
    } else if (x instanceof Date) return x.getTime() == y.getTime();else return false;
}
function compare(x, y) {
    // Optimization if they are referencially equal
    if (x === y) return 0;
    if (x == null) return y == null ? 0 : -1;else if (y == null) return -1;else if (Object.getPrototypeOf(x) !== Object.getPrototypeOf(y)) return -1;else if (hasInterface(x, "System.IComparable")) return x.CompareTo(y);else if (Array.isArray(x)) {
        if (x.length != y.length) return x.length < y.length ? -1 : 1;
        for (var i = 0, j = 0; i < x.length; i++) {
            if ((j = compare(x[i], y[i])) !== 0) return j;
        }return 0;
    } else if (ArrayBuffer.isView(x)) {
        if (x.byteLength != y.byteLength) return x.byteLength < y.byteLength ? -1 : 1;
        var dv1 = new DataView(x.buffer),
            dv2 = new DataView(y.buffer);
        for (var _i2 = 0, b1 = 0, b2 = 0; _i2 < x.byteLength; _i2++) {
            b1 = dv1.getUint8(_i2), b2 = dv2.getUint8(_i2);
            if (b1 < b2) return -1;
            if (b1 > b2) return 1;
        }
        return 0;
    } else if (x instanceof Date) return compare(x.getTime(), y.getTime());else return x < y ? -1 : 1;
}
function equalsRecords(x, y) {
    // Optimization if they are referencially equal
    if (x === y) {
        return true;
    } else {
        var keys = Object.getOwnPropertyNames(x);
        for (var i = 0; i < keys.length; i++) {
            if (!equals(x[keys[i]], y[keys[i]])) return false;
        }
        return true;
    }
}
function compareRecords(x, y) {
    // Optimization if they are referencially equal
    if (x === y) {
        return 0;
    } else {
        var keys = Object.getOwnPropertyNames(x);
        for (var i = 0; i < keys.length; i++) {
            var res = compare(x[keys[i]], y[keys[i]]);
            if (res !== 0) return res;
        }
        return 0;
    }
}
function equalsUnions(x, y) {
    // Optimization if they are referencially equal
    if (x === y) {
        return true;
    } else if (x.Case !== y.Case) {
        return false;
    } else {
        for (var i = 0; i < x.Fields.length; i++) {
            if (!equals(x.Fields[i], y.Fields[i])) return false;
        }
        return true;
    }
}
function compareUnions(x, y) {
    // Optimization if they are referencially equal
    if (x === y) {
        return 0;
    } else {
        var res = compare(x.Case, y.Case);
        if (res !== 0) return res;
        for (var i = 0; i < x.Fields.length; i++) {
            res = compare(x.Fields[i], y.Fields[i]);
            if (res !== 0) return res;
        }
        return 0;
    }
}
function createDisposable(f) {
    return _defineProperty$1({
        Dispose: f
    }, _Symbol.reflection, function () {
        return { interfaces: ["System.IDisposable"] };
    });
}
function createObj(fields) {
    var o = {};
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var kv = _step.value;

            o[kv[0]] = kv[1];
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return o;
}

var _createClass$2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// This module is split from List.ts to prevent cyclic dependencies
function ofArray(args, base) {
    var acc = base || new List$2();
    for (var i = args.length - 1; i >= 0; i--) {
        acc = new List$2(args[i], acc);
    }
    return acc;
}

var List$2 = function () {
    function List(head, tail) {
        _classCallCheck$2(this, List);

        this.head = head;
        this.tail = tail;
    }

    _createClass$2(List, [{
        key: "ToString",
        value: function ToString() {
            return "[" + Array.from(this).map(toString$2).join("; ") + "]";
        }
    }, {
        key: "Equals",
        value: function Equals(x) {
            // Optimization if they are referencially equal
            if (this === x) {
                return true;
            } else {
                var iter1 = this[Symbol.iterator](),
                    iter2 = x[Symbol.iterator]();
                for (;;) {
                    var cur1 = iter1.next(),
                        cur2 = iter2.next();
                    if (cur1.done) return cur2.done ? true : false;else if (cur2.done) return false;else if (!equals(cur1.value, cur2.value)) return false;
                }
            }
        }
    }, {
        key: "CompareTo",
        value: function CompareTo(x) {
            // Optimization if they are referencially equal
            if (this === x) {
                return 0;
            } else {
                var acc = 0;
                var iter1 = this[Symbol.iterator](),
                    iter2 = x[Symbol.iterator]();
                for (;;) {
                    var cur1 = iter1.next(),
                        cur2 = iter2.next();
                    if (cur1.done) return cur2.done ? acc : -1;else if (cur2.done) return 1;else {
                        acc = compare(cur1.value, cur2.value);
                        if (acc != 0) return acc;
                    }
                }
            }
        }
    }, {
        key: Symbol.iterator,
        value: function value() {
            var cur = this;
            return {
                next: function next() {
                    var tmp = cur;
                    cur = cur.tail;
                    return { done: tmp.tail == null, value: tmp.head };
                }
            };
        }
        //   append(ys: List<T>): List<T> {
        //     return append(this, ys);
        //   }
        //   choose<U>(f: (x: T) => U, xs: List<T>): List<U> {
        //     return choose(f, this);
        //   }
        //   collect<U>(f: (x: T) => List<U>): List<U> {
        //     return collect(f, this);
        //   }
        //   filter(f: (x: T) => boolean): List<T> {
        //     return filter(f, this);
        //   }
        //   where(f: (x: T) => boolean): List<T> {
        //     return filter(f, this);
        //   }
        //   map<U>(f: (x: T) => U): List<U> {
        //     return map(f, this);
        //   }
        //   mapIndexed<U>(f: (i: number, x: T) => U): List<U> {
        //     return mapIndexed(f, this);
        //   }
        //   partition(f: (x: T) => boolean): [List<T>, List<T>] {
        //     return partition(f, this) as [List<T>, List<T>];
        //   }
        //   reverse(): List<T> {
        //     return reverse(this);
        //   }
        //   slice(lower: number, upper: number): List<T> {
        //     return slice(lower, upper, this);
        //   }

    }, {
        key: _Symbol.reflection,
        value: function value() {
            return {
                type: "Microsoft.FSharp.Collections.FSharpList",
                interfaces: ["System.IEquatable", "System.IComparable"]
            };
        }
    }, {
        key: "length",
        get: function get() {
            var cur = this,
                acc = 0;
            while (cur.tail != null) {
                cur = cur.tail;
                acc++;
            }
            return acc;
        }
    }]);

    return List;
}();

function addRangeInPlace(range, xs) {
    var iter = range[Symbol.iterator]();
    var cur = iter.next();
    while (!cur.done) {
        xs.push(cur.value);
        cur = iter.next();
    }
}

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function __failIfNone(res) {
    if (res == null) throw new Error("Seq did not contain any matching element");
    return res;
}
function toList(xs) {
    return foldBack$1(function (x, acc) {
        return new List$2(x, acc);
    }, xs, new List$2());
}

function ofArray$1(xs) {
    return delay(function () {
        return unfold(function (i) {
            return i < xs.length ? [xs[i], i + 1] : null;
        }, 0);
    });
}
function append$1(xs, ys) {
    return delay(function () {
        var firstDone = false;
        var i = xs[Symbol.iterator]();
        var iters = [i, null];
        return unfold(function () {
            var cur = void 0;
            if (!firstDone) {
                cur = iters[0].next();
                if (!cur.done) {
                    return [cur.value, iters];
                } else {
                    firstDone = true;
                    iters = [null, ys[Symbol.iterator]()];
                }
            }
            cur = iters[1].next();
            return !cur.done ? [cur.value, iters] : null;
        }, iters);
    });
}


function concat$1(xs) {
    return delay(function () {
        var iter = xs[Symbol.iterator]();
        var output = null;
        return unfold(function (innerIter) {
            var hasFinished = false;
            while (!hasFinished) {
                if (innerIter == null) {
                    var cur = iter.next();
                    if (!cur.done) {
                        innerIter = cur.value[Symbol.iterator]();
                    } else {
                        hasFinished = true;
                    }
                } else {
                    var _cur = innerIter.next();
                    if (!_cur.done) {
                        output = _cur.value;
                        hasFinished = true;
                    } else {
                        innerIter = null;
                    }
                }
            }
            return innerIter != null && output != null ? [output, innerIter] : null;
        }, null);
    });
}
function collect$1(f, xs) {
    return concat$1(map$5(f, xs));
}
function choose$1(f, xs) {
    var trySkipToNext = function trySkipToNext(iter) {
        var cur = iter.next();
        if (!cur.done) {
            var y = f(cur.value);
            return y != null ? [y, iter] : trySkipToNext(iter);
        }
        return void 0;
    };
    return delay(function () {
        return unfold(function (iter) {
            return trySkipToNext(iter);
        }, xs[Symbol.iterator]());
    });
}
function compareWith(f, xs, ys) {
    var nonZero = tryFind(function (i) {
        return i != 0;
    }, map2(function (x, y) {
        return f(x, y);
    }, xs, ys));
    return nonZero != null ? nonZero : count(xs) - count(ys);
}
function delay(f) {
    return _defineProperty$2({}, Symbol.iterator, function () {
        return f()[Symbol.iterator]();
    });
}
function empty() {
    return unfold(function () {
        return void 0;
    });
}





function exists$1(f, xs) {
    function aux(iter) {
        var cur = iter.next();
        return !cur.done && (f(cur.value) || aux(iter));
    }
    return aux(xs[Symbol.iterator]());
}

function filter$2(f, xs) {
    function trySkipToNext(iter) {
        var cur = iter.next();
        while (!cur.done) {
            if (f(cur.value)) {
                return [cur.value, iter];
            }
            cur = iter.next();
        }
        return void 0;
    }
    return delay(function () {
        return unfold(trySkipToNext, xs[Symbol.iterator]());
    });
}

function fold$1(f, acc, xs) {
    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {
        return xs.reduce(f, acc);
    } else {
        var cur = void 0;
        for (var i = 0, iter = xs[Symbol.iterator]();; i++) {
            cur = iter.next();
            if (cur.done) break;
            acc = f(acc, cur.value, i);
        }
        return acc;
    }
}
function foldBack$1(f, xs, acc) {
    var arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);
    for (var i = arr.length - 1; i >= 0; i--) {
        acc = f(arr[i], acc, i);
    }
    return acc;
}


function forAll$1(f, xs) {
    return fold$1(function (acc, x) {
        return acc && f(x);
    }, true, xs);
}

function tryHead(xs) {
    var iter = xs[Symbol.iterator]();
    var cur = iter.next();
    return cur.done ? null : cur.value;
}
function head(xs) {
    return __failIfNone(tryHead(xs));
}
function initialize$1(n, f) {
    return delay(function () {
        return unfold(function (i) {
            return i < n ? [f(i), i + 1] : null;
        }, 0);
    });
}

function tryItem(i, xs) {
    if (i < 0) return null;
    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) return i < xs.length ? xs[i] : null;
    for (var j = 0, iter = xs[Symbol.iterator]();; j++) {
        var cur = iter.next();
        if (cur.done) return null;
        if (j === i) return cur.value;
    }
}
function item(i, xs) {
    return __failIfNone(tryItem(i, xs));
}
function iterate$1(f, xs) {
    fold$1(function (_, x) {
        return f(x);
    }, null, xs);
}

function iterateIndexed(f, xs) {
    fold$1(function (_, x, i) {
        return f(i, x);
    }, null, xs);
}

function isEmpty$1(xs) {
    var i = xs[Symbol.iterator]();
    return i.next().done;
}
function tryLast(xs) {
    try {
        return reduce(function (_, x) {
            return x;
        }, xs);
    } catch (err) {
        return null;
    }
}
function last(xs) {
    return __failIfNone(tryLast(xs));
}
// A export function 'length' method causes problems in JavaScript -- https://github.com/Microsoft/TypeScript/issues/442
function count(xs) {
    return Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.length : fold$1(function (acc, x) {
        return acc + 1;
    }, 0, xs);
}
function map$5(f, xs) {
    return delay(function () {
        return unfold(function (iter) {
            var cur = iter.next();
            return !cur.done ? [f(cur.value), iter] : null;
        }, xs[Symbol.iterator]());
    });
}
function mapIndexed$1(f, xs) {
    return delay(function () {
        var i = 0;
        return unfold(function (iter) {
            var cur = iter.next();
            return !cur.done ? [f(i++, cur.value), iter] : null;
        }, xs[Symbol.iterator]());
    });
}
function map2(f, xs, ys) {
    return delay(function () {
        var iter1 = xs[Symbol.iterator]();
        var iter2 = ys[Symbol.iterator]();
        return unfold(function () {
            var cur1 = iter1.next(),
                cur2 = iter2.next();
            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;
        });
    });
}










function rangeStep(first, step, last) {
    if (step === 0) throw new Error("Step cannot be 0");
    return delay(function () {
        return unfold(function (x) {
            return step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null;
        }, first);
    });
}

function range(first, last) {
    return rangeStep(first, 1, last);
}

function reduce(f, xs) {
    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) return xs.reduce(f);
    var iter = xs[Symbol.iterator]();
    var cur = iter.next();
    if (cur.done) throw new Error("Seq was empty");
    var acc = cur.value;
    for (;;) {
        cur = iter.next();
        if (cur.done) break;
        acc = f(acc, cur.value);
    }
    return acc;
}



function scan(f, seed, xs) {
    return delay(function () {
        var iter = xs[Symbol.iterator]();
        return unfold(function (acc) {
            if (acc == null) return [seed, seed];
            var cur = iter.next();
            if (!cur.done) {
                acc = f(acc, cur.value);
                return [acc, acc];
            }
            return void 0;
        }, null);
    });
}

function singleton$1(x) {
    return unfold(function (x) {
        return x != null ? [x, null] : null;
    }, x);
}

function skipWhile(f, xs) {
    return delay(function () {
        var hasPassed = false;
        return filter$2(function (x) {
            return hasPassed || (hasPassed = !f(x));
        }, xs);
    });
}
function sortWith(f, xs) {
    var ys = Array.from(xs);
    return ofArray$1(ys.sort(f));
}

function sumBy(f, xs) {
    return fold$1(function (acc, x) {
        return acc + f(x);
    }, 0, xs);
}

function take(n, xs) {
    var truncate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    return delay(function () {
        var iter = xs[Symbol.iterator]();
        return unfold(function (i) {
            if (i < n) {
                var cur = iter.next();
                if (!cur.done) return [cur.value, i + 1];
                if (!truncate) throw new Error("Seq has not enough elements");
            }
            return void 0;
        }, 0);
    });
}
function truncate(n, xs) {
    return take(n, xs, true);
}
function takeWhile(f, xs) {
    return delay(function () {
        var iter = xs[Symbol.iterator]();
        return unfold(function (i) {
            var cur = iter.next();
            if (!cur.done && f(cur.value)) return [cur.value, null];
            return void 0;
        }, 0);
    });
}
function tryFind(f, xs, defaultValue) {
    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {
        var cur = iter.next();
        if (cur.done) return defaultValue === void 0 ? null : defaultValue;
        if (f(cur.value, i)) return cur.value;
    }
}
function find(f, xs) {
    return __failIfNone(tryFind(f, xs));
}






function tryPick(f, xs) {
    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {
        var cur = iter.next();
        if (cur.done) break;
        var y = f(cur.value, i);
        if (y != null) return y;
    }
    return void 0;
}
function pick(f, xs) {
    return __failIfNone(tryPick(f, xs));
}
function unfold(f, acc) {
    return _defineProperty$2({}, Symbol.iterator, function () {
        return {
            next: function next() {
                var res = f(acc);
                if (res != null) {
                    acc = res[1];
                    return { done: false, value: res[0] };
                }
                return { done: true };
            }
        };
    });
}
function zip(xs, ys) {
    return map2(function (x, y) {
        return [x, y];
    }, xs, ys);
}

var _createClass$5 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GenericComparer = function () {
    function GenericComparer(f) {
        _classCallCheck$5(this, GenericComparer);

        this.Compare = f || compare;
    }

    _createClass$5(GenericComparer, [{
        key: _Symbol.reflection,
        value: function value() {
            return { interfaces: ["System.IComparer"] };
        }
    }]);

    return GenericComparer;
}();

var _createClass$4 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// ----------------------------------------------
// These functions belong to Seq.ts but are
// implemented here to prevent cyclic dependencies
function groupBy$1(f, xs) {
    var keys = [],
        iter = xs[Symbol.iterator]();
    var acc = create$4(),
        cur = iter.next();
    while (!cur.done) {
        var k = f(cur.value),
            vs = tryFind$1(k, acc);
        if (vs == null) {
            keys.push(k);
            acc = add$2(k, [cur.value], acc);
        } else {
            vs.push(cur.value);
        }
        cur = iter.next();
    }
    return keys.map(function (k) {
        return [k, acc.get(k)];
    });
}
function countBy(f, xs) {
    return groupBy$1(f, xs).map(function (kv) {
        return [kv[0], kv[1].length];
    });
}
var MapTree = function MapTree(caseName, fields) {
    _classCallCheck$4(this, MapTree);

    this.Case = caseName;
    this.Fields = fields;
};
function tree_sizeAux(acc, m) {
    return m.Case === "MapOne" ? acc + 1 : m.Case === "MapNode" ? tree_sizeAux(tree_sizeAux(acc + 1, m.Fields[2]), m.Fields[3]) : acc;
}
function tree_size(x) {
    return tree_sizeAux(0, x);
}
function tree_empty() {
    return new MapTree("MapEmpty", []);
}
function tree_height$1(_arg1) {
    return _arg1.Case === "MapOne" ? 1 : _arg1.Case === "MapNode" ? _arg1.Fields[4] : 0;
}
function tree_mk$1(l, k, v, r) {
    var matchValue = [l, r];
    var $target1 = function $target1() {
        var hl = tree_height$1(l);
        var hr = tree_height$1(r);
        var m = hl < hr ? hr : hl;
        return new MapTree("MapNode", [k, v, l, r, m + 1]);
    };
    if (matchValue[0].Case === "MapEmpty") {
        if (matchValue[1].Case === "MapEmpty") {
            return new MapTree("MapOne", [k, v]);
        } else {
            return $target1();
        }
    } else {
        return $target1();
    }
}

function tree_rebalance$1(t1, k, v, t2) {
    var t1h = tree_height$1(t1);
    var t2h = tree_height$1(t2);
    if (t2h > t1h + 2) {
        if (t2.Case === "MapNode") {
            if (tree_height$1(t2.Fields[2]) > t1h + 1) {
                if (t2.Fields[2].Case === "MapNode") {
                    return tree_mk$1(tree_mk$1(t1, k, v, t2.Fields[2].Fields[2]), t2.Fields[2].Fields[0], t2.Fields[2].Fields[1], tree_mk$1(t2.Fields[2].Fields[3], t2.Fields[0], t2.Fields[1], t2.Fields[3]));
                } else {
                    throw new Error("rebalance");
                }
            } else {
                return tree_mk$1(tree_mk$1(t1, k, v, t2.Fields[2]), t2.Fields[0], t2.Fields[1], t2.Fields[3]);
            }
        } else {
            throw new Error("rebalance");
        }
    } else {
        if (t1h > t2h + 2) {
            if (t1.Case === "MapNode") {
                if (tree_height$1(t1.Fields[3]) > t2h + 1) {
                    if (t1.Fields[3].Case === "MapNode") {
                        return tree_mk$1(tree_mk$1(t1.Fields[2], t1.Fields[0], t1.Fields[1], t1.Fields[3].Fields[2]), t1.Fields[3].Fields[0], t1.Fields[3].Fields[1], tree_mk$1(t1.Fields[3].Fields[3], k, v, t2));
                    } else {
                        throw new Error("rebalance");
                    }
                } else {
                    return tree_mk$1(t1.Fields[2], t1.Fields[0], t1.Fields[1], tree_mk$1(t1.Fields[3], k, v, t2));
                }
            } else {
                throw new Error("rebalance");
            }
        } else {
            return tree_mk$1(t1, k, v, t2);
        }
    }
}
function tree_add$1(comparer, k, v, m) {
    if (m.Case === "MapOne") {
        var c = comparer.Compare(k, m.Fields[0]);
        if (c < 0) {
            return new MapTree("MapNode", [k, v, new MapTree("MapEmpty", []), m, 2]);
        } else if (c === 0) {
            return new MapTree("MapOne", [k, v]);
        }
        return new MapTree("MapNode", [k, v, m, new MapTree("MapEmpty", []), 2]);
    } else if (m.Case === "MapNode") {
        var c = comparer.Compare(k, m.Fields[0]);
        if (c < 0) {
            return tree_rebalance$1(tree_add$1(comparer, k, v, m.Fields[2]), m.Fields[0], m.Fields[1], m.Fields[3]);
        } else if (c === 0) {
            return new MapTree("MapNode", [k, v, m.Fields[2], m.Fields[3], m.Fields[4]]);
        }
        return tree_rebalance$1(m.Fields[2], m.Fields[0], m.Fields[1], tree_add$1(comparer, k, v, m.Fields[3]));
    }
    return new MapTree("MapOne", [k, v]);
}
function tree_find(comparer, k, m) {
    var res = tree_tryFind(comparer, k, m);
    if (res != null) return res;
    throw new Error("key not found");
}
function tree_tryFind(comparer, k, m) {
    if (m.Case === "MapOne") {
        var c = comparer.Compare(k, m.Fields[0]);
        return c === 0 ? m.Fields[1] : null;
    } else if (m.Case === "MapNode") {
        var c = comparer.Compare(k, m.Fields[0]);
        if (c < 0) {
            return tree_tryFind(comparer, k, m.Fields[2]);
        } else {
            if (c === 0) {
                return m.Fields[1];
            } else {
                return tree_tryFind(comparer, k, m.Fields[3]);
            }
        }
    }
    return null;
}
function tree_spliceOutSuccessor$1(m) {
    if (m.Case === "MapOne") {
        return [m.Fields[0], m.Fields[1], new MapTree("MapEmpty", [])];
    } else if (m.Case === "MapNode") {
        if (m.Fields[2].Case === "MapEmpty") {
            return [m.Fields[0], m.Fields[1], m.Fields[3]];
        } else {
            var kvl = tree_spliceOutSuccessor$1(m.Fields[2]);
            return [kvl[0], kvl[1], tree_mk$1(kvl[2], m.Fields[0], m.Fields[1], m.Fields[3])];
        }
    }
    throw new Error("internal error: Map.spliceOutSuccessor");
}
function tree_remove$1(comparer, k, m) {
    if (m.Case === "MapOne") {
        var c = comparer.Compare(k, m.Fields[0]);
        if (c === 0) {
            return new MapTree("MapEmpty", []);
        } else {
            return m;
        }
    } else if (m.Case === "MapNode") {
        var c = comparer.Compare(k, m.Fields[0]);
        if (c < 0) {
            return tree_rebalance$1(tree_remove$1(comparer, k, m.Fields[2]), m.Fields[0], m.Fields[1], m.Fields[3]);
        } else {
            if (c === 0) {
                var matchValue = [m.Fields[2], m.Fields[3]];
                if (matchValue[0].Case === "MapEmpty") {
                    return m.Fields[3];
                } else {
                    if (matchValue[1].Case === "MapEmpty") {
                        return m.Fields[2];
                    } else {
                        var patternInput = tree_spliceOutSuccessor$1(m.Fields[3]);
                        var sv = patternInput[1];
                        var sk = patternInput[0];
                        var r_ = patternInput[2];
                        return tree_mk$1(m.Fields[2], sk, sv, r_);
                    }
                }
            } else {
                return tree_rebalance$1(m.Fields[2], m.Fields[0], m.Fields[1], tree_remove$1(comparer, k, m.Fields[3]));
            }
        }
    } else {
        return tree_empty();
    }
}
function tree_mem$1(comparer, k, m) {
    return m.Case === "MapOne" ? comparer.Compare(k, m.Fields[0]) === 0 : m.Case === "MapNode" ? function () {
        var c = comparer.Compare(k, m.Fields[0]);
        if (c < 0) {
            return tree_mem$1(comparer, k, m.Fields[2]);
        } else {
            if (c === 0) {
                return true;
            } else {
                return tree_mem$1(comparer, k, m.Fields[3]);
            }
        }
    }() : false;
}
// function tree_foldFromTo(comparer: IComparer<any>, lo: any, hi: any, f: (k:any, v:any, acc: any) => any, m: MapTree, x: any): any {
//   if (m.Case === "MapOne") {
//     var cLoKey = comparer.Compare(lo, m.Fields[0]);
//     var cKeyHi = comparer.Compare(m.Fields[0], hi);
//     var x_1 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f(m.Fields[0], m.Fields[1], x) : x;
//     return x_1;
//   }
//   else if (m.Case === "MapNode") {
//     var cLoKey = comparer.Compare(lo, m.Fields[0]);
//     var cKeyHi = comparer.Compare(m.Fields[0], hi);
//     var x_1 = cLoKey < 0 ? tree_foldFromTo(comparer, lo, hi, f, m.Fields[2], x) : x;
//     var x_2 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f(m.Fields[0], m.Fields[1], x_1) : x_1;
//     var x_3 = cKeyHi < 0 ? tree_foldFromTo(comparer, lo, hi, f, m.Fields[3], x_2) : x_2;
//     return x_3;
//   }
//   return x;
// }
// function tree_foldSection(comparer: IComparer<any>, lo: any, hi: any, f: (k:any, v:any, acc: any) => any, m: MapTree, x: any) {
//   return comparer.Compare(lo, hi) === 1 ? x : tree_foldFromTo(comparer, lo, hi, f, m, x);
// }
// function tree_loop(m: MapTree, acc: any): List<[any,any]> {
//   return m.Case === "MapOne"
//     ? new List([m.Fields[0], m.Fields[1]], acc)
//     : m.Case === "MapNode"
//       ? tree_loop(m.Fields[2], new List([m.Fields[0], m.Fields[1]], tree_loop(m.Fields[3], acc)))
//       : acc;
// }
// function tree_toList(m: MapTree) {
//   return tree_loop(m, new List());
// }
// function tree_toArray(m: MapTree) {
//   return Array.from(tree_toList(m));
// }
// function tree_ofList(comparer: IComparer<any>, l: List<[any,any]>) {
//   return Seq.fold((acc: MapTree, tupledArg: [any, any]) => {
//     return tree_add(comparer, tupledArg[0], tupledArg[1], acc);
//   }, tree_empty(), l);
// }
function tree_mkFromEnumerator$1(comparer, acc, e) {
    var cur = e.next();
    while (!cur.done) {
        acc = tree_add$1(comparer, cur.value[0], cur.value[1], acc);
        cur = e.next();
    }
    return acc;
}
// function tree_ofArray(comparer: IComparer<any>, arr: ArrayLike<[any,any]>) {
//   var res = tree_empty();
//   for (var i = 0; i <= arr.length - 1; i++) {
//     res = tree_add(comparer, arr[i][0], arr[i][1], res);
//   }
//   return res;
// }
function tree_ofSeq$1(comparer, c) {
    var ie = c[Symbol.iterator]();
    return tree_mkFromEnumerator$1(comparer, tree_empty(), ie);
}
// function tree_copyToArray(s: MapTree, arr: ArrayLike<any>, i: number) {
//   tree_iter((x, y) => { arr[i++] = [x, y]; }, s);
// }
function tree_collapseLHS$1(stack) {
    if (stack.tail != null) {
        if (stack.head.Case === "MapOne") {
            return stack;
        } else if (stack.head.Case === "MapNode") {
            return tree_collapseLHS$1(ofArray([stack.head.Fields[2], new MapTree("MapOne", [stack.head.Fields[0], stack.head.Fields[1]]), stack.head.Fields[3]], stack.tail));
        } else {
            return tree_collapseLHS$1(stack.tail);
        }
    } else {
        return new List$2();
    }
}
function tree_mkIterator$1(s) {
    return { stack: tree_collapseLHS$1(new List$2(s, new List$2())), started: false };
}
function tree_moveNext$1(i) {
    function current(i) {
        if (i.stack.tail == null) {
            return null;
        } else if (i.stack.head.Case === "MapOne") {
            return [i.stack.head.Fields[0], i.stack.head.Fields[1]];
        }
        throw new Error("Please report error: Map iterator, unexpected stack for current");
    }
    if (i.started) {
        if (i.stack.tail == null) {
            return { done: true, value: null };
        } else {
            if (i.stack.head.Case === "MapOne") {
                i.stack = tree_collapseLHS$1(i.stack.tail);
                return {
                    done: i.stack.tail == null,
                    value: current(i)
                };
            } else {
                throw new Error("Please report error: Map iterator, unexpected stack for moveNext");
            }
        }
    } else {
        i.started = true;
        return {
            done: i.stack.tail == null,
            value: current(i)
        };
    }
    
}

var FMap = function () {
    /** Do not call, use Map.create instead. */
    function FMap() {
        _classCallCheck$4(this, FMap);
    }

    _createClass$4(FMap, [{
        key: "ToString",
        value: function ToString() {
            return "map [" + Array.from(this).map(toString$2).join("; ") + "]";
        }
    }, {
        key: "Equals",
        value: function Equals(m2) {
            return this.CompareTo(m2) === 0;
        }
    }, {
        key: "CompareTo",
        value: function CompareTo(m2) {
            var _this = this;

            return this === m2 ? 0 : compareWith(function (kvp1, kvp2) {
                var c = _this.comparer.Compare(kvp1[0], kvp2[0]);
                return c !== 0 ? c : compare(kvp1[1], kvp2[1]);
            }, this, m2);
        }
    }, {
        key: Symbol.iterator,
        value: function value() {
            var i = tree_mkIterator$1(this.tree);
            return {
                next: function next() {
                    return tree_moveNext$1(i);
                }
            };
        }
    }, {
        key: "entries",
        value: function entries() {
            return this[Symbol.iterator]();
        }
    }, {
        key: "keys",
        value: function keys() {
            return map$5(function (kv) {
                return kv[0];
            }, this);
        }
    }, {
        key: "values",
        value: function values() {
            return map$5(function (kv) {
                return kv[1];
            }, this);
        }
    }, {
        key: "get",
        value: function get(k) {
            return tree_find(this.comparer, k, this.tree);
        }
    }, {
        key: "has",
        value: function has(k) {
            return tree_mem$1(this.comparer, k, this.tree);
        }
        /** Not supported */

    }, {
        key: "set",
        value: function set(k, v) {
            throw new Error("not supported");
        }
        /** Not supported */

    }, {
        key: "delete",
        value: function _delete(k) {
            throw new Error("not supported");
        }
        /** Not supported */

    }, {
        key: "clear",
        value: function clear() {
            throw new Error("not supported");
        }
    }, {
        key: _Symbol.reflection,
        value: function value() {
            return {
                type: "Microsoft.FSharp.Collections.FSharpMap",
                interfaces: ["System.IEquatable", "System.IComparable"]
            };
        }
    }, {
        key: "size",
        get: function get() {
            return tree_size(this.tree);
        }
    }]);

    return FMap;
}();

function from$6(comparer, tree) {
    var map$$1 = new FMap();
    map$$1.tree = tree;
    map$$1.comparer = comparer || new GenericComparer();
    return map$$1;
}
function create$4(ie, comparer) {
    comparer = comparer || new GenericComparer();
    return from$6(comparer, ie ? tree_ofSeq$1(comparer, ie) : tree_empty());
}
function add$2(k, v, map$$1) {
    return from$6(map$$1.comparer, tree_add$1(map$$1.comparer, k, v, map$$1.tree));
}
function remove$1(item$$1, map$$1) {
    return from$6(map$$1.comparer, tree_remove$1(map$$1.comparer, item$$1, map$$1.tree));
}

function tryGetValue(map$$1, key, defaultValue) {
    return map$$1.has(key) ? [true, map$$1.get(key)] : [false, defaultValue];
}


function tryFind$1(k, map$$1) {
    return tree_tryFind(map$$1.comparer, k, map$$1.tree);
}

function append$$1(xs, ys) {
    return fold$1(function (acc, x) {
        return new List$2(x, acc);
    }, ys, reverse$$1(xs));
}
function choose$$1(f, xs) {
    var r = fold$1(function (acc, x) {
        var y = f(x);
        return y != null ? new List$2(y, acc) : acc;
    }, new List$2(), xs);
    return reverse$$1(r);
}
function collect$$1(f, xs) {
    return fold$1(function (acc, x) {
        return append$$1(acc, f(x));
    }, new List$2(), xs);
}
// TODO: should be xs: Iterable<List<T>>
function concat$$1(xs) {
    return collect$$1(function (x) {
        return x;
    }, xs);
}
function filter$1(f, xs) {
    return reverse$$1(fold$1(function (acc, x) {
        return f(x) ? new List$2(x, acc) : acc;
    }, new List$2(), xs));
}


function map$4(f, xs) {
    return reverse$$1(fold$1(function (acc, x) {
        return new List$2(f(x), acc);
    }, new List$2(), xs));
}
function mapIndexed$$1(f, xs) {
    return reverse$$1(fold$1(function (acc, x, i) {
        return new List$2(f(i, x), acc);
    }, new List$2(), xs));
}


function reverse$$1(xs) {
    return fold$1(function (acc, x) {
        return new List$2(x, acc);
    }, new List$2(), xs);
}


/* ToDo: instance unzip() */

/* ToDo: instance unzip3() */

var _createClass$1 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// ----------------------------------------------
// These functions belong to Seq.ts but are
// implemented here to prevent cyclic dependencies
function distinctBy(f, xs) {
    return choose$1(function (tup) {
        return tup[0];
    }, scan(function (tup, x) {
        var acc = tup[1];
        var k = f(x);
        return acc.has(k) ? [null, acc] : [x, add$1(k, acc)];
    }, [null, create$3()], xs));
}
function distinct(xs) {
    return distinctBy(function (x) {
        return x;
    }, xs);
}
var SetTree = function SetTree(caseName, fields) {
    _classCallCheck$1(this, SetTree);

    this.Case = caseName;
    this.Fields = fields;
};
var tree_tolerance = 2;
function tree_countAux(s, acc) {
    return s.Case === "SetOne" ? acc + 1 : s.Case === "SetEmpty" ? acc : tree_countAux(s.Fields[1], tree_countAux(s.Fields[2], acc + 1));
}
function tree_count(s) {
    return tree_countAux(s, 0);
}
function tree_SetOne(n) {
    return new SetTree("SetOne", [n]);
}
function tree_SetNode(x, l, r, h) {
    return new SetTree("SetNode", [x, l, r, h]);
}
function tree_height(t) {
    return t.Case === "SetOne" ? 1 : t.Case === "SetNode" ? t.Fields[3] : 0;
}
function tree_mk(l, k, r) {
    var matchValue = [l, r];
    var $target1 = function $target1() {
        var hl = tree_height(l);
        var hr = tree_height(r);
        var m = hl < hr ? hr : hl;
        return tree_SetNode(k, l, r, m + 1);
    };
    if (matchValue[0].Case === "SetEmpty") {
        if (matchValue[1].Case === "SetEmpty") {
            return tree_SetOne(k);
        } else {
            return $target1();
        }
    } else {
        return $target1();
    }
}
function tree_rebalance(t1, k, t2) {
    var t1h = tree_height(t1);
    var t2h = tree_height(t2);
    if (t2h > t1h + tree_tolerance) {
        if (t2.Case === "SetNode") {
            if (tree_height(t2.Fields[1]) > t1h + 1) {
                if (t2.Fields[1].Case === "SetNode") {
                    return tree_mk(tree_mk(t1, k, t2.Fields[1].Fields[1]), t2.Fields[1].Fields[0], tree_mk(t2.Fields[1].Fields[2], t2.Fields[0], t2.Fields[2]));
                } else {
                    throw new Error("rebalance");
                }
            } else {
                return tree_mk(tree_mk(t1, k, t2.Fields[1]), t2.Fields[0], t2.Fields[2]);
            }
        } else {
            throw new Error("rebalance");
        }
    } else {
        if (t1h > t2h + tree_tolerance) {
            if (t1.Case === "SetNode") {
                if (tree_height(t1.Fields[2]) > t2h + 1) {
                    if (t1.Fields[2].Case === "SetNode") {
                        return tree_mk(tree_mk(t1.Fields[1], t1.Fields[0], t1.Fields[2].Fields[1]), t1.Fields[2].Fields[0], tree_mk(t1.Fields[2].Fields[2], k, t2));
                    } else {
                        throw new Error("rebalance");
                    }
                } else {
                    return tree_mk(t1.Fields[1], t1.Fields[0], tree_mk(t1.Fields[2], k, t2));
                }
            } else {
                throw new Error("rebalance");
            }
        } else {
            return tree_mk(t1, k, t2);
        }
    }
}
function tree_add(comparer, k, t) {
    return t.Case === "SetOne" ? function () {
        var c = comparer.Compare(k, t.Fields[0]);
        if (c < 0) {
            return tree_SetNode(k, new SetTree("SetEmpty", []), t, 2);
        } else {
            if (c === 0) {
                return t;
            } else {
                return tree_SetNode(k, t, new SetTree("SetEmpty", []), 2);
            }
        }
    }() : t.Case === "SetEmpty" ? tree_SetOne(k) : function () {
        var c = comparer.Compare(k, t.Fields[0]);
        if (c < 0) {
            return tree_rebalance(tree_add(comparer, k, t.Fields[1]), t.Fields[0], t.Fields[2]);
        } else {
            if (c === 0) {
                return t;
            } else {
                return tree_rebalance(t.Fields[1], t.Fields[0], tree_add(comparer, k, t.Fields[2]));
            }
        }
    }();
}
function tree_mem(comparer, k, t) {
    return t.Case === "SetOne" ? comparer.Compare(k, t.Fields[0]) === 0 : t.Case === "SetEmpty" ? false : function () {
        var c = comparer.Compare(k, t.Fields[0]);
        if (c < 0) {
            return tree_mem(comparer, k, t.Fields[1]);
        } else {
            if (c === 0) {
                return true;
            } else {
                return tree_mem(comparer, k, t.Fields[2]);
            }
        }
    }();
}
function tree_forall(f, m) {
    return m.Case === "SetOne" ? f(m.Fields[0]) : m.Case === "SetEmpty" ? true : (f(m.Fields[0]) ? tree_forall(f, m.Fields[1]) : false) ? tree_forall(f, m.Fields[2]) : false;
}
function tree_exists(f, m) {
    return m.Case === "SetOne" ? f(m.Fields[0]) : m.Case === "SetEmpty" ? false : (f(m.Fields[0]) ? true : tree_exists(f, m.Fields[1])) ? true : tree_exists(f, m.Fields[2]);
}
function tree_subset(comparer, a, b) {
    return tree_forall(function (x) {
        return tree_mem(comparer, x, b);
    }, a);
}
function tree_psubset(comparer, a, b) {
    return tree_forall(function (x) {
        return tree_mem(comparer, x, b);
    }, a) ? tree_exists(function (x) {
        return !tree_mem(comparer, x, a);
    }, b) : false;
}
function tree_collapseLHS(stack) {
    return stack.tail != null ? stack.head.Case === "SetOne" ? stack : stack.head.Case === "SetNode" ? tree_collapseLHS(ofArray([stack.head.Fields[1], tree_SetOne(stack.head.Fields[0]), stack.head.Fields[2]], stack.tail)) : tree_collapseLHS(stack.tail) : new List$2();
}
function tree_mkIterator(s) {
    return { stack: tree_collapseLHS(new List$2(s, new List$2())), started: false };
}

// function tree_notStarted() {
//   throw new Error("Enumeration not started");
// };
// var alreadyFinished = $exports.alreadyFinished = function () {
//   throw new Error("Enumeration already started");
// };
function tree_moveNext(i) {
    function current(i) {
        if (i.stack.tail == null) {
            return null;
        } else if (i.stack.head.Case === "SetOne") {
            return i.stack.head.Fields[0];
        }
        throw new Error("Please report error: Set iterator, unexpected stack for current");
    }
    if (i.started) {
        if (i.stack.tail == null) {
            return { done: true, value: null };
        } else {
            if (i.stack.head.Case === "SetOne") {
                i.stack = tree_collapseLHS(i.stack.tail);
                return {
                    done: i.stack.tail == null,
                    value: current(i)
                };
            } else {
                throw new Error("Please report error: Set iterator, unexpected stack for moveNext");
            }
        }
    } else {
        i.started = true;
        return {
            done: i.stack.tail == null,
            value: current(i)
        };
    }
    
}
function tree_compareStacks(comparer, l1, l2) {
    var $target8 = function $target8(n1k, t1) {
        return tree_compareStacks(comparer, ofArray([new SetTree("SetEmpty", []), tree_SetOne(n1k)], t1), l2);
    };
    var $target9 = function $target9(n1k, n1l, n1r, t1) {
        return tree_compareStacks(comparer, ofArray([n1l, tree_SetNode(n1k, new SetTree("SetEmpty", []), n1r, 0)], t1), l2);
    };
    var $target11 = function $target11(n2k, n2l, n2r, t2) {
        return tree_compareStacks(comparer, l1, ofArray([n2l, tree_SetNode(n2k, new SetTree("SetEmpty", []), n2r, 0)], t2));
    };
    if (l1.tail != null) {
        if (l2.tail != null) {
            if (l2.head.Case === "SetOne") {
                if (l1.head.Case === "SetOne") {
                    var n1k = l1.head.Fields[0],
                        n2k = l2.head.Fields[0],
                        t1 = l1.tail,
                        t2 = l2.tail,
                        c = comparer.Compare(n1k, n2k);
                    if (c !== 0) {
                        return c;
                    } else {
                        return tree_compareStacks(comparer, t1, t2);
                    }
                } else {
                    if (l1.head.Case === "SetNode") {
                        if (l1.head.Fields[1].Case === "SetEmpty") {
                            var emp = l1.head.Fields[1],
                                _n1k = l1.head.Fields[0],
                                n1r = l1.head.Fields[2],
                                _n2k = l2.head.Fields[0],
                                _t = l1.tail,
                                _t2 = l2.tail,
                                _c = comparer.Compare(_n1k, _n2k);
                            if (_c !== 0) {
                                return _c;
                            } else {
                                return tree_compareStacks(comparer, ofArray([n1r], _t), ofArray([emp], _t2));
                            }
                        } else {
                            return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);
                        }
                    } else {
                        var _n2k2 = l2.head.Fields[0],
                            _t3 = l2.tail;
                        return tree_compareStacks(comparer, l1, ofArray([new SetTree("SetEmpty", []), tree_SetOne(_n2k2)], _t3));
                    }
                }
            } else {
                if (l2.head.Case === "SetNode") {
                    if (l2.head.Fields[1].Case === "SetEmpty") {
                        if (l1.head.Case === "SetOne") {
                            var _n1k2 = l1.head.Fields[0],
                                _n2k3 = l2.head.Fields[0],
                                n2r = l2.head.Fields[2],
                                _t4 = l1.tail,
                                _t5 = l2.tail,
                                _c2 = comparer.Compare(_n1k2, _n2k3);
                            if (_c2 !== 0) {
                                return _c2;
                            } else {
                                return tree_compareStacks(comparer, ofArray([new SetTree("SetEmpty", [])], _t4), ofArray([n2r], _t5));
                            }
                        } else {
                            if (l1.head.Case === "SetNode") {
                                if (l1.head.Fields[1].Case === "SetEmpty") {
                                    var _n1k3 = l1.head.Fields[0],
                                        _n1r = l1.head.Fields[2],
                                        _n2k4 = l2.head.Fields[0],
                                        _n2r = l2.head.Fields[2],
                                        _t6 = l1.tail,
                                        _t7 = l2.tail,
                                        _c3 = comparer.Compare(_n1k3, _n2k4);
                                    if (_c3 !== 0) {
                                        return _c3;
                                    } else {
                                        return tree_compareStacks(comparer, ofArray([_n1r], _t6), ofArray([_n2r], _t7));
                                    }
                                } else {
                                    return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);
                                }
                            } else {
                                return $target11(l2.head.Fields[0], l2.head.Fields[1], l2.head.Fields[2], l2.tail);
                            }
                        }
                    } else {
                        if (l1.head.Case === "SetOne") {
                            return $target8(l1.head.Fields[0], l1.tail);
                        } else {
                            if (l1.head.Case === "SetNode") {
                                return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);
                            } else {
                                return $target11(l2.head.Fields[0], l2.head.Fields[1], l2.head.Fields[2], l2.tail);
                            }
                        }
                    }
                } else {
                    if (l1.head.Case === "SetOne") {
                        return $target8(l1.head.Fields[0], l1.tail);
                    } else {
                        if (l1.head.Case === "SetNode") {
                            return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);
                        } else {
                            return tree_compareStacks(comparer, l1.tail, l2.tail);
                        }
                    }
                }
            }
        } else {
            return 1;
        }
    } else {
        if (l2.tail != null) {
            return -1;
        } else {
            return 0;
        }
    }
}
function tree_compare(comparer, s1, s2) {
    if (s1.Case === "SetEmpty") {
        if (s2.Case === "SetEmpty") {
            return 0;
        } else {
            return -1;
        }
    } else {
        if (s2.Case === "SetEmpty") {
            return 1;
        } else {
            return tree_compareStacks(comparer, ofArray([s1]), ofArray([s2]));
        }
    }
}
function tree_mkFromEnumerator(comparer, acc, e) {
    var cur = e.next();
    while (!cur.done) {
        acc = tree_add(comparer, cur.value, acc);
        cur = e.next();
    }
    return acc;
}
function tree_ofSeq(comparer, c) {
    var ie = c[Symbol.iterator]();
    return tree_mkFromEnumerator(comparer, new SetTree("SetEmpty", []), ie);
}

var FSet = function () {
    /** Do not call, use Set.create instead. */
    function FSet() {
        _classCallCheck$1(this, FSet);
    }

    _createClass$1(FSet, [{
        key: "ToString",
        value: function ToString() {
            return "set [" + Array.from(this).map(toString$2).join("; ") + "]";
        }
    }, {
        key: "Equals",
        value: function Equals(s2) {
            return this.CompareTo(s2) === 0;
        }
    }, {
        key: "CompareTo",
        value: function CompareTo(s2) {
            return this === s2 ? 0 : tree_compare(this.comparer, this.tree, s2.tree);
        }
    }, {
        key: Symbol.iterator,
        value: function value() {
            var i = tree_mkIterator(this.tree);
            return {
                next: function next() {
                    return tree_moveNext(i);
                }
            };
        }
    }, {
        key: "values",
        value: function values() {
            return this[Symbol.iterator]();
        }
    }, {
        key: "has",
        value: function has(v) {
            return tree_mem(this.comparer, v, this.tree);
        }
        /** Not supported */

    }, {
        key: "add",
        value: function add$1(v) {
            throw new Error("not supported");
        }
        /** Not supported */

    }, {
        key: "delete",
        value: function _delete(v) {
            throw new Error("not supported");
        }
        /** Not supported */

    }, {
        key: "clear",
        value: function clear() {
            throw new Error("not supported");
        }
    }, {
        key: _Symbol.reflection,
        value: function value() {
            return {
                type: "Microsoft.FSharp.Collections.FSharpSet",
                interfaces: ["System.IEquatable", "System.IComparable"]
            };
        }
    }, {
        key: "size",
        get: function get() {
            return tree_count(this.tree);
        }
    }]);

    return FSet;
}();

function from$5(comparer, tree) {
    var s = new FSet();
    s.tree = tree;
    s.comparer = comparer || new GenericComparer();
    return s;
}
function create$3(ie, comparer) {
    comparer = comparer || new GenericComparer();
    return from$5(comparer, ie ? tree_ofSeq(comparer, ie) : new SetTree("SetEmpty", []));
}

function add$1(item$$1, s) {
    return from$5(s.comparer, tree_add(s.comparer, item$$1, s.tree));
}

function fromTicks(ticks) {
    return ticks / 10000;
}

function __getValue(d, key) {
    return d[(d.kind == 1 /* UTC */ ? "getUTC" : "get") + key]();
}


function parse(v, kind) {
    var date = v == null ? new Date() : new Date(v);
    if (isNaN(date.getTime())) throw new Error("The string is not a valid Date.");
    date.kind = kind || (typeof v == "string" && v.slice(-1) == "Z" ? 1 /* UTC */ : 2 /* Local */);
    return date;
}

function create$5(year, month, day) /* Local */{
    var h = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var m = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var s = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
    var ms = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
    var kind = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 2;

    var date = kind === 1 /* UTC */ ? new Date(Date.UTC(year, month - 1, day, h, m, s, ms)) : new Date(year, month - 1, day, h, m, s, ms);
    if (isNaN(date.getTime())) throw new Error("The parameters describe an unrepresentable Date.");
    date.kind = kind;
    return date;
}
function now() {
    return parse();
}


function isLeapYear(year) {
    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
}
function daysInMonth(year, month) {
    return month == 2 ? isLeapYear(year) ? 29 : 28 : month >= 8 ? month % 2 == 0 ? 31 : 30 : month % 2 == 0 ? 30 : 31;
}




function day(d) {
    return __getValue(d, "Date");
}
function hour(d) {
    return __getValue(d, "Hours");
}
function millisecond(d) {
    return __getValue(d, "Milliseconds");
}
function minute(d) {
    return __getValue(d, "Minutes");
}
function month(d) {
    return __getValue(d, "Month") + 1;
}
function second(d) {
    return __getValue(d, "Seconds");
}
function year(d) {
    return __getValue(d, "FullYear");
}
function ticks$$1(d) {
    return (d.getTime() + 6.2135604e+13 /* millisecondsJSOffset */) * 10000;
}

function create$7(pattern, options) {
    var flags = "g";
    flags += options & 1 ? "i" : "";
    flags += options & 2 ? "m" : "";
    return new RegExp(pattern, flags);
}
// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
function escape(str) {
    return str.replace(/[\-\[\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}



function matches(str, pattern) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    var reg = str instanceof RegExp ? (reg = str, str = pattern, reg.lastIndex = options, reg) : reg = create$7(pattern, options);
    if (!reg.global) throw new Error("Non-global RegExp"); // Prevent infinite loop
    var m = void 0;
    var matches = [];
    while ((m = reg.exec(str)) !== null) {
        matches.push(m);
    }return matches;
}

var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var fsFormatRegExp = /(^|[^%])%([0+ ]*)(-?\d+)?(?:\.(\d+))?(\w)/;
var formatRegExp = /\{(\d+)(,-?\d+)?(?:\:(.+?))?\}/g;
function toHex(value) {
    return value < 0 ? "ff" + (16777215 - (Math.abs(value) - 1)).toString(16) : value.toString(16);
}
function fsFormat(str) {
    var _cont = void 0;
    function isObject(x) {
        return x !== null && (typeof x === "undefined" ? "undefined" : _typeof$1(x)) === "object" && !(x instanceof Number) && !(x instanceof String) && !(x instanceof Boolean);
    }
    function formatOnce(str, rep) {
        return str.replace(fsFormatRegExp, function (_, prefix, flags, pad, precision, format) {
            switch (format) {
                case "f":
                case "F":
                    rep = rep.toFixed(precision || 6);
                    break;
                case "g":
                case "G":
                    rep = rep.toPrecision(precision);
                    break;
                case "e":
                case "E":
                    rep = rep.toExponential(precision);
                    break;
                case "O":
                    rep = toString$2(rep);
                    break;
                case "A":
                    try {
                        rep = JSON.stringify(rep, function (k, v) {
                            return v && v[Symbol.iterator] && !Array.isArray(v) && isObject(v) ? Array.from(v) : v;
                        });
                    } catch (err) {
                        // Fallback for objects with circular references
                        rep = "{" + Object.getOwnPropertyNames(rep).map(function (k) {
                            return k + ": " + String(rep[k]);
                        }).join(", ") + "}";
                    }
                    break;
                case "x":
                    rep = toHex(Number(rep));
                    break;
                case "X":
                    rep = toHex(Number(rep)).toUpperCase();
                    break;
            }
            var plusPrefix = flags.indexOf("+") >= 0 && parseInt(rep) >= 0;
            if (!isNaN(pad = parseInt(pad))) {
                var ch = pad >= 0 && flags.indexOf("0") >= 0 ? "0" : " ";
                rep = padLeft(rep, Math.abs(pad) - (plusPrefix ? 1 : 0), ch, pad < 0);
            }
            var once = prefix + (plusPrefix ? "+" + rep : rep);
            return once.replace(/%/g, "%%");
        });
    }
    function makeFn(str) {
        return function (rep) {
            var str2 = formatOnce(str, rep);
            return fsFormatRegExp.test(str2) ? makeFn(str2) : _cont(str2.replace(/%%/g, "%"));
        };
    }

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }

    if (args.length === 0) {
        return function (cont) {
            _cont = cont;
            return fsFormatRegExp.test(str) ? makeFn(str) : _cont(str);
        };
    } else {
        for (var i = 0; i < args.length; i++) {
            str = formatOnce(str, args[i]);
        }
        return str.replace(/%%/g, "%");
    }
}

function endsWith(str, search) {
    var idx = str.lastIndexOf(search);
    return idx >= 0 && idx == str.length - search.length;
}


function isNullOrEmpty(str) {
    return typeof str !== "string" || str.length == 0;
}
function isNullOrWhiteSpace(str) {
    return typeof str !== "string" || /^\s*$/.test(str);
}
function join(delimiter, xs) {
    xs = typeof xs == "string" ? getRestParams(arguments, 1) : xs;
    return (Array.isArray(xs) ? xs : Array.from(xs)).join(delimiter);
}

function padLeft(str, len, ch, isRight) {
    ch = ch || " ";
    str = String(str);
    len = len - str.length;
    for (var i = -1; ++i < len;) {
        str = isRight ? str + ch : ch + str;
    }return str;
}


function replace$$1(str, search, replace$$1) {
    return str.replace(new RegExp(escape(search), "g"), replace$$1);
}


function trim(str, side) {
    for (var _len3 = arguments.length, chars = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        chars[_key3 - 2] = arguments[_key3];
    }

    if (side == "both" && chars.length == 0) return str.trim();
    if (side == "start" || side == "both") {
        var reg = chars.length == 0 ? /^\s+/ : new RegExp("^[" + escape(chars.join("")) + "]+");
        str = str.replace(reg, "");
    }
    if (side == "end" || side == "both") {
        var _reg = chars.length == 0 ? /\s+$/ : new RegExp("[" + escape(chars.join("")) + "]+$");
        str = str.replace(_reg, "");
    }
    return str;
}

var _createClass$6 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Trampoline = function () {
    function Trampoline() {
        _classCallCheck$7(this, Trampoline);

        this.callCount = 0;
    }

    _createClass$6(Trampoline, [{
        key: "incrementAndCheck",
        value: function incrementAndCheck() {
            return this.callCount++ > Trampoline.maxTrampolineCallCount;
        }
    }, {
        key: "hijack",
        value: function hijack(f) {
            this.callCount = 0;
            setTimeout(f, 0);
        }
    }], [{
        key: "maxTrampolineCallCount",
        get: function get() {
            return 2000;
        }
    }]);

    return Trampoline;
}();
function protectedCont(f) {
    return function (ctx) {
        if (ctx.cancelToken.isCancelled) ctx.onCancel("cancelled");else if (ctx.trampoline.incrementAndCheck()) ctx.trampoline.hijack(function () {
            try {
                f(ctx);
            } catch (err) {
                ctx.onError(err);
            }
        });else try {
            f(ctx);
        } catch (err) {
            ctx.onError(err);
        }
    };
}
function protectedBind(computation, binder) {
    return protectedCont(function (ctx) {
        computation({
            onSuccess: function onSuccess(x) {
                return binder(x)(ctx);
            },
            onError: ctx.onError,
            onCancel: ctx.onCancel,
            cancelToken: ctx.cancelToken,
            trampoline: ctx.trampoline
        });
    });
}
function protectedReturn(value) {
    return protectedCont(function (ctx) {
        return ctx.onSuccess(value);
    });
}
var AsyncBuilder = function () {
    function AsyncBuilder() {
        _classCallCheck$7(this, AsyncBuilder);
    }

    _createClass$6(AsyncBuilder, [{
        key: "Bind",
        value: function Bind(computation, binder) {
            return protectedBind(computation, binder);
        }
    }, {
        key: "Combine",
        value: function Combine(computation1, computation2) {
            return this.Bind(computation1, function () {
                return computation2;
            });
        }
    }, {
        key: "Delay",
        value: function Delay(generator) {
            return protectedCont(function (ctx) {
                return generator()(ctx);
            });
        }
    }, {
        key: "For",
        value: function For(sequence, body) {
            var iter = sequence[Symbol.iterator]();
            var cur = iter.next();
            return this.While(function () {
                return !cur.done;
            }, this.Delay(function () {
                var res = body(cur.value);
                cur = iter.next();
                return res;
            }));
        }
    }, {
        key: "Return",
        value: function Return(value) {
            return protectedReturn(value);
        }
    }, {
        key: "ReturnFrom",
        value: function ReturnFrom(computation) {
            return computation;
        }
    }, {
        key: "TryFinally",
        value: function TryFinally(computation, compensation) {
            return protectedCont(function (ctx) {
                computation({
                    onSuccess: function onSuccess(x) {
                        compensation();
                        ctx.onSuccess(x);
                    },
                    onError: function onError(x) {
                        compensation();
                        ctx.onError(x);
                    },
                    onCancel: function onCancel(x) {
                        compensation();
                        ctx.onCancel(x);
                    },
                    cancelToken: ctx.cancelToken,
                    trampoline: ctx.trampoline
                });
            });
        }
    }, {
        key: "TryWith",
        value: function TryWith(computation, catchHandler) {
            return protectedCont(function (ctx) {
                computation({
                    onSuccess: ctx.onSuccess,
                    onCancel: ctx.onCancel,
                    cancelToken: ctx.cancelToken,
                    trampoline: ctx.trampoline,
                    onError: function onError(ex) {
                        try {
                            catchHandler(ex)(ctx);
                        } catch (ex2) {
                            ctx.onError(ex2);
                        }
                    }
                });
            });
        }
    }, {
        key: "Using",
        value: function Using(resource, binder) {
            return this.TryFinally(binder(resource), function () {
                return resource.Dispose();
            });
        }
    }, {
        key: "While",
        value: function While(guard, computation) {
            var _this = this;

            if (guard()) return this.Bind(computation, function () {
                return _this.While(guard, computation);
            });else return this.Return(void 0);
        }
    }, {
        key: "Zero",
        value: function Zero() {
            return protectedCont(function (ctx) {
                return ctx.onSuccess(void 0);
            });
        }
    }]);

    return AsyncBuilder;
}();
var singleton$2 = new AsyncBuilder();

var _createClass$7 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$8(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var Choice = function () {
    function Choice(t, d) {
        _classCallCheck$8(this, Choice);

        this.Case = t;
        this.Fields = d;
    }

    _createClass$7(Choice, [{
        key: "Equals",
        value: function Equals(other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function CompareTo(other) {
            return compareUnions(this, other);
        }
    }, {
        key: _Symbol.reflection,
        value: function value() {
            return {
                type: "Microsoft.FSharp.Core.FSharpChoice",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"]
            };
        }
    }, {
        key: "valueIfChoice1",
        get: function get() {
            return this.Case === "Choice1Of2" ? this.Fields[0] : null;
        }
    }, {
        key: "valueIfChoice2",
        get: function get() {
            return this.Case === "Choice2Of2" ? this.Fields[0] : null;
        }
    }]);

    return Choice;
}();

function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Implemented just for type references

var Async$1 = function Async$1() {
    _classCallCheck$6(this, Async$1);
};

function emptyContinuation(x) {
    // NOP
}
function awaitPromise(p) {
    return fromContinuations(function (conts) {
        return p.then(conts[0]).catch(function (err) {
            return (err == "cancelled" ? conts[2] : conts[1])(err);
        });
    });
}

var defaultCancellationToken = { isCancelled: false };

function fromContinuations(f) {
    return protectedCont(function (ctx) {
        return f([ctx.onSuccess, ctx.onError, ctx.onCancel]);
    });
}

function parallel(computations) {
    return awaitPromise(Promise.all(map$5(function (w) {
        return startAsPromise(w);
    }, computations)));
}
function sleep(millisecondsDueTime) {
    return protectedCont(function (ctx) {
        setTimeout(function () {
            return ctx.cancelToken.isCancelled ? ctx.onCancel("cancelled") : ctx.onSuccess(void 0);
        }, millisecondsDueTime);
    });
}
function start(computation, cancellationToken) {
    return startWithContinuations(computation, cancellationToken);
}
function startImmediate(computation, cancellationToken) {
    return start(computation, cancellationToken);
}
function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {
    if (typeof continuation !== "function") {
        cancelToken = continuation;
        continuation = null;
    }
    var trampoline = new Trampoline();
    computation({
        onSuccess: continuation ? continuation : emptyContinuation,
        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,
        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,
        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,
        trampoline: trampoline
    });
}
function startAsPromise(computation, cancellationToken) {
    return new Promise(function (resolve, reject) {
        return startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken);
    });
}

function isLocalHost() {
  return (typeof window == 'undefined' ? true : window.location.hostname === "localhost") ? true : window.location.hostname === "127.0.0.1";
}
var enabledCategories = !isLocalHost() ? create$3(new List$2(), new GenericComparer(function (x, y) {
  return x < y ? -1 : x > y ? 1 : 0;
})) : create$3(new List$2(), new GenericComparer(function (x, y) {
  return x < y ? -1 : x > y ? 1 : 0;
}));
var Log = function () {
  function Log() {
    _classCallCheck(this, Log);
  }

  _createClass(Log, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Common.Log",
        properties: {}
      };
    }
  }], [{
    key: "setEnabled",
    value: function (cats) {
      enabledCategories = cats;
    }
  }, {
    key: "event",
    value: function (category, evt, article, data) {
      if (typeof logEvent != 'undefined') logEvent(category, evt, article, data);
    }
  }, {
    key: "message",
    value: function (level, category, msg) {
      for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        args[_key - 3] = arguments[_key];
      }

      var args_1 = args == null ? [] : args;
      var category_1 = category.toLocaleUpperCase();

      if (!isLocalHost() ? level === "EXCEPTION" : false) {
        if (typeof logEvent != 'undefined') logEvent("system", "exception", "", {
          category: category_1,
          msg: msg,
          args: args_1
        });
      }

      if ((level === "EXCEPTION" ? true : level === "ERROR") ? true : enabledCategories.has(category_1)) {
        var dt = now();

        var p2 = function p2(s) {
          return padLeft(String(s), 2, "0");
        };

        var p4 = function p4(s) {
          return padLeft(String(s), 4, "0");
        };

        var prefix = fsFormat("[%s:%s:%s:%s] %s: ")(function (x) {
          return x;
        })(p2(hour(dt)))(p2(minute(dt)))(p2(second(dt)))(p4(millisecond(dt)))(category_1);

        var color = function () {
          var $var1 = null;

          switch (level) {
            case "TRACE":
              {
                $var1 = "color:#808080";
                break;
              }

            case "EXCEPTION":
              {
                $var1 = "color:#c00000";
                break;
              }

            case "ERROR":
              {
                $var1 = "color:#900000";
                break;
              }

            default:
              {
                $var1 = "";
              }
          }

          return $var1;
        }();

        console.log.apply(console, _Array$from(append$1(["%c" + prefix + msg, color], args_1)));
      }
    }
  }, {
    key: "trace",
    value: function (category, msg) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      Log.message.apply(Log, ["TRACE", category, msg].concat(args));
    }
  }, {
    key: "exn",
    value: function (category, msg) {
      for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        args[_key3 - 2] = arguments[_key3];
      }

      Log.message.apply(Log, ["EXCEPTION", category, msg].concat(args));
    }
  }, {
    key: "error",
    value: function (category, msg) {
      for (var _len4 = arguments.length, args = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
        args[_key4 - 2] = arguments[_key4];
      }

      Log.message.apply(Log, ["ERROR", category, msg].concat(args));
    }
  }]);

  return Log;
}();
setType("TheGamma.Common.Log", Log);
var Http = function () {
  function Http() {
    _classCallCheck(this, Http);
  }

  _createClass(Http, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Common.Http",
        properties: {}
      };
    }
  }], [{
    key: "Request",
    value: function (meth, url, data, cookies) {
      return fromContinuations(function (tupledArg) {
        var xhr = new XMLHttpRequest();
        xhr.open(meth, url, true);
        {
          var _target1 = function _target1() {};

          if (cookies != null) {
            if (cookies !== "") {
              var cookies_1 = cookies;
              xhr.setRequestHeader("X-Cookie", cookies_1);
            } else {
              _target1();
            }
          } else {
            _target1();
          }
        }

        xhr.onreadystatechange = function (_arg1) {
          if (xhr.readyState > 3 ? xhr.status === 200 : false) {
            tupledArg[0](xhr.responseText);
          }

          return {};
        };

        xhr.send(data != null ? data : "");
      });
    }
  }]);

  return Http;
}();
setType("TheGamma.Common.Http", Http);

function Async_AwaitFuture_Static(f) {
  return fromContinuations(function (tupledArg) {
    f.Then(tupledArg[0]);
  });
}

function Async_Future_Static(n, op, start$$1) {
  var _ref;

  var res = new Choice("Choice1Of3", [null]);
  var handlers = new List$2();
  var running = false;

  var trigger = function trigger(h) {
    if (res.Case === "Choice2Of3") {
      var v = res.Fields[0];
      h(v);
    } else {
      if (res.Case === "Choice3Of3") {
        var e = res.Fields[0];
        throw e;
      } else {
        handlers = new List$2(h, handlers);
      }
    }
  };

  var ensureStarted = function ensureStarted() {
    if (!running) {
      iterate$1(function (n_1) {
        Log.trace("system", "Starting future '%s'....", n_1);
      }, function () {
        var $var2 = n;

        if ($var2 != null) {
          return [$var2];
        } else {
          return [];
        }
      }());
      running = true;

      (function (arg00) {
        startImmediate(arg00);
      })(function (builder_) {
        return builder_.Delay(function () {
          return builder_.Combine(builder_.TryWith(builder_.Delay(function () {
            return builder_.Bind(op, function (_arg1) {
              iterate$1(function (n_1) {
                Log.trace("system", "Future '%s' evaluated to: %O", n_1, _arg1);
              }, function () {
                var $var3 = n;

                if ($var3 != null) {
                  return [$var3];
                } else {
                  return [];
                }
              }());
              res = new Choice("Choice2Of3", [_arg1]);
              return builder_.Zero();
            });
          }), function (_arg2) {
            Log.exn("system", "Evaluating future failed: %O", _arg2);
            res = new Choice("Choice3Of3", [_arg2]);
            return builder_.Zero();
          }), builder_.Delay(function () {
            return builder_.For(handlers, function (_arg3) {
              trigger(_arg3);
              return builder_.Zero();
            });
          }));
        });
      }(singleton$2));
    }
  };

  if (start$$1 === true) {
    ensureStarted();
  }

  return _ref = {}, _defineProperty(_ref, _Symbol.reflection, {
    "interfaces": ["TheGamma.Common.Future"]
  }), _defineProperty(_ref, "Then", function (f) {
    ensureStarted();
    trigger(f);
  }), _ref;
}

function Async_StartAsFuture_Static(op) {
  return function (arg00) {
    return function (arg10) {
      return function (arg20) {
        return Async_Future_Static(arg00, arg10, arg20);
      };
    };
  }()(op)(true);
}

function Async_CreateNamedFuture_Static(name, op) {
  return function (arg00) {
    return function (arg10) {
      return function (arg20) {
        return Async_Future_Static(arg00, arg10, arg20);
      };
    };
  }(name)(op)(false);
}

function Async_StartAsNamedFuture_Static(name, op) {
  return function (arg00) {
    return function (arg10) {
      return function (arg20) {
        return Async_Future_Static(arg00, arg10, arg20);
      };
    };
  }(name)(op)(true);
}

var Async = function (__exports) {
  var _Array = __exports.Array = function (__exports) {
    var Parallel = __exports.Parallel = function (__exports) {
      var map$$1 = __exports.map = function (f, ar) {
        return function (builder_) {
          return builder_.Delay(function () {
            var res = new Array(ar.length).fill();
            var work = parallel(toList(delay(function () {
              return map$5(function (i) {
                return function (builder__1) {
                  return builder__1.Delay(function () {
                    return builder__1.Bind(f(ar[i]), function (_arg1) {
                      res[i] = _arg1;
                      return builder__1.Zero();
                    });
                  });
                }(singleton$2);
              }, range(0, ar.length - 1));
            })));
            return builder_.Bind(work, function (_arg2) {
              return builder_.Return(res);
            });
          });
        }(singleton$2);
      };

      return __exports;
    }({});

    var map$$1 = __exports.map = function (f, ar) {
      return function (builder_) {
        return builder_.Delay(function () {
          var res = new Array(ar.length).fill();
          return builder_.Combine(builder_.For(range(0, ar.length - 1), function (_arg1) {
            return builder_.Bind(f(ar[_arg1]), function (_arg2) {
              res[_arg1] = _arg2;
              return builder_.Zero();
            });
          }), builder_.Delay(function () {
            return builder_.Return(res);
          }));
        });
      }(singleton$2);
    };

    return __exports;
  }({});

  var collect$$1 = __exports.collect = function (f, l) {
    return function (builder_) {
      return builder_.Delay(function () {
        return l.tail == null ? builder_.Return(new List$2()) : builder_.Bind(f(l.head), function (_arg1) {
          return builder_.Bind(collect$$1(f, l.tail), function (_arg2) {
            return builder_.Return(append$$1(_arg1, _arg2));
          });
        });
      });
    }(singleton$2);
  };

  var choose$$1 = __exports.choose = function (f, l) {
    return function (builder_) {
      return builder_.Delay(function () {
        return l.tail == null ? builder_.Return(new List$2()) : builder_.Bind(f(l.head), function (_arg1) {
          return builder_.Bind(choose$$1(f, l.tail), function (_arg2) {
            return builder_.Return(_arg1 != null ? new List$2(_arg1, _arg2) : _arg2);
          });
        });
      });
    }(singleton$2);
  };

  var map$$1 = __exports.map = function (f, l) {
    return function (builder_) {
      return builder_.Delay(function () {
        return l.tail == null ? builder_.Return(new List$2()) : builder_.Bind(f(l.head), function (_arg1) {
          return builder_.Bind(map$$1(f, l.tail), function (_arg2) {
            return builder_.Return(new List$2(_arg1, _arg2));
          });
        });
      });
    }(singleton$2);
  };

  var foldMap = __exports.foldMap = function (f, st, l) {
    return function (builder_) {
      return builder_.Delay(function () {
        return l.tail == null ? builder_.Return([st, new List$2()]) : builder_.Bind(f(st)(l.head), function (_arg1) {
          return builder_.Bind(foldMap(f, _arg1[1], l.tail), function (_arg2) {
            return builder_.Return([_arg2[0], new List$2(_arg1[0], _arg2[1])]);
          });
        });
      });
    }(singleton$2);
  };

  var fold$$1 = __exports.fold = function (f, st, l) {
    return function (builder_) {
      return builder_.Delay(function () {
        return l.tail == null ? builder_.Return(st) : builder_.Bind(f(st)(l.head), function (_arg1) {
          return builder_.ReturnFrom(fold$$1(f, _arg1, l.tail));
        });
      });
    }(singleton$2);
  };

  return __exports;
}({});
var ListDictionaryNode = function () {
  function ListDictionaryNode(result, nested) {
    _classCallCheck(this, ListDictionaryNode);

    this.Result = result;
    this.Nested = nested;
  }

  _createClass(ListDictionaryNode, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Common.ListDictionaryNode",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          Result: Option(GenericParam("T")),
          Nested: makeGeneric(_Map, {
            TKey: GenericParam("K"),
            TValue: makeGeneric(ListDictionaryNode, {
              K: GenericParam("K"),
              T: GenericParam("T")
            })
          })
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }]);

  return ListDictionaryNode;
}();
setType("TheGamma.Common.ListDictionaryNode", ListDictionaryNode);
var ListDictionaryModule = function (__exports) {
  var tryFind$$1 = __exports.tryFind = function (ks, dict) {
    var loop = function loop(ks_1) {
      return function (node) {
        var matchValue = [ks_1, node];

        var _target2 = function _target2() {
          return null;
        };

        if (matchValue[0].tail != null) {
          if (function () {
            var ks_2 = matchValue[0].tail;
            var k = matchValue[0].head;
            var d = matchValue[1].Nested;
            return d.has(k);
          }()) {
            var d = matchValue[1].Nested;
            var k = matchValue[0].head;
            var ks_2 = matchValue[0].tail;
            return loop(ks_2)(d.get(k));
          } else {
            return _target2();
          }
        } else {
          if (matchValue[1].Result != null) {
            var r = matchValue[1].Result;
            return r;
          } else {
            return _target2();
          }
        }
      };
    };

    return loop(ks)(new ListDictionaryNode(null, dict));
  };

  var set = __exports.set = function (ks, v, dict) {
    var loop = function loop(ks_1) {
      return function (dict_1) {
        if (ks_1.tail != null) {
          if (!dict_1.has(ks_1.head)) {
            dict_1.set(ks_1.head, function () {
              var Nested = new _Map();
              return new ListDictionaryNode(null, Nested);
            }());
          }

          if (ks_1.tail.tail == null) {
            dict_1.get(ks_1.head).Result = v;
          } else {
            loop(ks_1.tail)(dict_1.get(ks_1.head).Nested);
          }
        } else {
          throw new Error("Empty key not supported");
        }
      };
    };

    loop(ks)(dict);
  };

  var count$$1 = __exports.count = function (dict) {
    var loop = function loop(node) {
      var nest = sumBy(function (kv) {
        return loop(kv[1]);
      }, node.Nested);

      if (function () {
        return node.Result != null;
      }()) {
        return 1 + nest;
      } else {
        return nest;
      }
    };

    return sumBy(function (kv) {
      return loop(kv[1]);
    }, dict);
  };

  return __exports;
}({});
var List = function (__exports) {
  var groupWith = __exports.groupWith = function (f, list) {
    var groups = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(list), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var e = _step.value;
        var added = false;
        var i = 0;

        while (!added ? i < groups.length : false) {
          if (f(e)(groups[i][0])) {
            groups[i][1].push(e);
            added = true;
          }

          i = i + 1;
        }

        if (!added) {
          groups.push([e, _Array$from(ofArray([e]))]);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return toList(map$5(function ($var4) {
      return toList($var4[1]);
    }, groups));
  };

  var unreduce = __exports.unreduce = function (f, s) {
    return toList(unfold(function (s_1) {
      var $var5 = f(s_1);

      if ($var5 != null) {
        return function (v) {
          return [v, v];
        }($var5);
      } else {
        return $var5;
      }
    }, s));
  };

  return __exports;
}({});

var Position = function () {
    function Position(line, column) {
        _classCallCheck(this, Position);

        this.line = line;
        this.column = column;
    }

    _createClass(Position, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.Babel.Position",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    line: "number",
                    column: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return Position;
}();
setType("TheGamma.Babel.Position", Position);
var SourceLocation = function () {
    function SourceLocation(start, end) {
        _classCallCheck(this, SourceLocation);

        this.start = start;
        this.end = end;
    }

    _createClass(SourceLocation, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.Babel.SourceLocation",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    start: Position,
                    end: Position
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return SourceLocation;
}();
setType("TheGamma.Babel.SourceLocation", SourceLocation);
var AssignmentOperator = function () {
    function AssignmentOperator(caseName, fields) {
        _classCallCheck(this, AssignmentOperator);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(AssignmentOperator, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.Babel.AssignmentOperator",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                cases: {
                    AssignAndBitwise: [],
                    AssignDivide: [],
                    AssignEqual: [],
                    AssignMinus: [],
                    AssignModulus: [],
                    AssignMultiply: [],
                    AssignOrBitwise: [],
                    AssignPlus: [],
                    AssignShiftLeft: [],
                    AssignShiftRightSignPropagating: [],
                    AssignShiftRightZeroFill: [],
                    AssignXorBitwise: []
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareUnions(this, other);
        }
    }]);

    return AssignmentOperator;
}();
setType("TheGamma.Babel.AssignmentOperator", AssignmentOperator);
var BinaryOperator = function () {
    function BinaryOperator(caseName, fields) {
        _classCallCheck(this, BinaryOperator);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(BinaryOperator, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.Babel.BinaryOperator",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                cases: {
                    BinaryAndBitwise: [],
                    BinaryDivide: [],
                    BinaryEqual: [],
                    BinaryEqualStrict: [],
                    BinaryExponent: [],
                    BinaryGreater: [],
                    BinaryGreaterOrEqual: [],
                    BinaryIn: [],
                    BinaryInstanceOf: [],
                    BinaryLess: [],
                    BinaryLessOrEqual: [],
                    BinaryMinus: [],
                    BinaryModulus: [],
                    BinaryMultiply: [],
                    BinaryOrBitwise: [],
                    BinaryPlus: [],
                    BinaryShiftLeft: [],
                    BinaryShiftRightSignPropagating: [],
                    BinaryShiftRightZeroFill: [],
                    BinaryUnequal: [],
                    BinaryUnequalStrict: [],
                    BinaryXorBitwise: []
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareUnions(this, other);
        }
    }]);

    return BinaryOperator;
}();
setType("TheGamma.Babel.BinaryOperator", BinaryOperator);
var Pattern = function () {
    function Pattern(caseName, fields) {
        _classCallCheck(this, Pattern);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(Pattern, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.Babel.Pattern",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                cases: {
                    IdentifierPattern: ["string", Option(SourceLocation)]
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareUnions(this, other);
        }
    }]);

    return Pattern;
}();
setType("TheGamma.Babel.Pattern", Pattern);
var VariableDeclarationKind = function () {
    function VariableDeclarationKind(caseName, fields) {
        _classCallCheck(this, VariableDeclarationKind);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(VariableDeclarationKind, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.Babel.VariableDeclarationKind",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                cases: {
                    Const: [],
                    Let: [],
                    Var: []
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareUnions(this, other);
        }
    }]);

    return VariableDeclarationKind;
}();
setType("TheGamma.Babel.VariableDeclarationKind", VariableDeclarationKind);
var VariableDeclarator = function () {
    function VariableDeclarator(caseName, fields) {
        _classCallCheck(this, VariableDeclarator);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(VariableDeclarator, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.Babel.VariableDeclarator",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                cases: {
                    VariableDeclarator: [Pattern, Option(Expression), Option(SourceLocation)]
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareUnions(this, other);
        }
    }]);

    return VariableDeclarator;
}();
setType("TheGamma.Babel.VariableDeclarator", VariableDeclarator);
var Expression = function () {
    function Expression(caseName, fields) {
        _classCallCheck(this, Expression);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(Expression, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.Babel.Expression",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                cases: {
                    ArrayExpression: [makeGeneric(List$2, {
                        T: Expression
                    }), Option(SourceLocation)],
                    AssignmentExpression: [AssignmentOperator, Expression, Expression, Option(SourceLocation)],
                    BinaryExpression: [BinaryOperator, Expression, Expression, Option(SourceLocation)],
                    BooleanLiteral: ["boolean", Option(SourceLocation)],
                    CallExpression: [Expression, makeGeneric(List$2, {
                        T: Expression
                    }), Option(SourceLocation)],
                    FunctionExpression: [Option("string"), makeGeneric(List$2, {
                        T: Pattern
                    }), Statement, "boolean", "boolean", Option(SourceLocation)],
                    IdentifierExpression: ["string", Option(SourceLocation)],
                    MemberExpression: [Expression, Expression, "boolean", Option(SourceLocation)],
                    NewExpression: [Expression, makeGeneric(List$2, {
                        T: Expression
                    }), Option(SourceLocation)],
                    NullLiteral: [Option(SourceLocation)],
                    NumericLiteral: ["number", Option(SourceLocation)],
                    StringLiteral: ["string", Option(SourceLocation)]
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareUnions(this, other);
        }
    }]);

    return Expression;
}();
setType("TheGamma.Babel.Expression", Expression);
var Statement = function () {
    function Statement(caseName, fields) {
        _classCallCheck(this, Statement);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(Statement, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.Babel.Statement",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                cases: {
                    BlockStatement: [makeGeneric(List$2, {
                        T: Statement
                    }), Option(SourceLocation)],
                    EmptyStatement: [Option(SourceLocation)],
                    ExpressionStatement: [Expression, Option(SourceLocation)],
                    ReturnStatement: [Expression, Option(SourceLocation)],
                    VariableDeclaration: [VariableDeclarationKind, makeGeneric(List$2, {
                        T: VariableDeclarator
                    }), Option(SourceLocation)]
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareUnions(this, other);
        }
    }]);

    return Statement;
}();
setType("TheGamma.Babel.Statement", Statement);
var Program$1 = function () {
    function Program(location, body) {
        _classCallCheck(this, Program);

        this.location = location;
        this.body = body;
    }

    _createClass(Program, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.Babel.Program",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    location: Option(SourceLocation),
                    body: makeGeneric(List$2, {
                        T: Statement
                    })
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return Program;
}();
setType("TheGamma.Babel.Program", Program$1);
var Serializer = function (__exports) {
    var createObj$$1 = __exports.createObj = function (props) {
        return createObj(concat$$1(props));
    };

    var serializeBinaryOperator = __exports.serializeBinaryOperator = function (_arg1) {
        return _arg1.Case === "BinaryUnequal" ? "!=" : _arg1.Case === "BinaryEqualStrict" ? "===" : _arg1.Case === "BinaryUnequalStrict" ? "!==" : _arg1.Case === "BinaryLess" ? "<" : _arg1.Case === "BinaryLessOrEqual" ? "<=" : _arg1.Case === "BinaryGreater" ? ">" : _arg1.Case === "BinaryGreaterOrEqual" ? ">=" : _arg1.Case === "BinaryShiftLeft" ? "<<" : _arg1.Case === "BinaryShiftRightSignPropagating" ? ">>" : _arg1.Case === "BinaryShiftRightZeroFill" ? ">>>" : _arg1.Case === "BinaryMinus" ? "-" : _arg1.Case === "BinaryPlus" ? "+" : _arg1.Case === "BinaryMultiply" ? "*" : _arg1.Case === "BinaryDivide" ? "/" : _arg1.Case === "BinaryModulus" ? "%" : _arg1.Case === "BinaryExponent" ? "**" : _arg1.Case === "BinaryOrBitwise" ? "|" : _arg1.Case === "BinaryXorBitwise" ? "^" : _arg1.Case === "BinaryAndBitwise" ? "&" : _arg1.Case === "BinaryIn" ? "in" : _arg1.Case === "BinaryInstanceOf" ? "instanceof" : "==";
    };

    var serializeAssignOperator = __exports.serializeAssignOperator = function (_arg1) {
        return _arg1.Case === "AssignMinus" ? "-=" : _arg1.Case === "AssignPlus" ? "+=" : _arg1.Case === "AssignMultiply" ? "*=" : _arg1.Case === "AssignDivide" ? "/=" : _arg1.Case === "AssignModulus" ? "%=" : _arg1.Case === "AssignShiftLeft" ? "<<=" : _arg1.Case === "AssignShiftRightSignPropagating" ? ">>=" : _arg1.Case === "AssignShiftRightZeroFill" ? ">>>=" : _arg1.Case === "AssignOrBitwise" ? "|=" : _arg1.Case === "AssignXorBitwise" ? "^=" : _arg1.Case === "AssignAndBitwise" ? "&=" : "=";
    };

    var serializePattern = __exports.serializePattern = function (pat) {
        return createObj$$1(ofArray([ofArray([["type", "Identifier"]]), ofArray([["name", pat.Fields[0]]]), function () {
            var $var65 = pat.Fields[1];

            if ($var65 != null) {
                return ofArray([["loc", $var65]]);
            } else {
                return new List$2();
            }
        }()]));
    };

    var serializeDeclarator = __exports.serializeDeclarator = function (_arg1) {
        return createObj$$1(ofArray([ofArray([["type", "VariableDeclarator"]]), ofArray([["id", serializePattern(_arg1.Fields[0])]]), function () {
            var $var67 = function () {
                var $var66 = _arg1.Fields[1];

                if ($var66 != null) {
                    return function (expr) {
                        return serializeExpression(expr);
                    }($var66);
                } else {
                    return $var66;
                }
            }();

            if ($var67 != null) {
                return ofArray([["init", $var67]]);
            } else {
                return new List$2();
            }
        }(), function () {
            var $var68 = _arg1.Fields[2];

            if ($var68 != null) {
                return ofArray([["loc", $var68]]);
            } else {
                return new List$2();
            }
        }()]));
    };

    var serializeExpression = __exports.serializeExpression = function (expr) {
        return expr.Case === "NewExpression" ? createObj$$1(ofArray([ofArray([["type", "NewExpression"]]), ofArray([["callee", serializeExpression(expr.Fields[0])]]), ofArray([["arguments", _Array$from(map$4(function (expr_1) {
            return serializeExpression(expr_1);
        }, expr.Fields[1]))]]), function () {
            var $var69 = expr.Fields[2];

            if ($var69 != null) {
                return ofArray([["loc", $var69]]);
            } else {
                return new List$2();
            }
        }()])) : expr.Case === "FunctionExpression" ? createObj$$1(ofArray([ofArray([["type", "FunctionExpression"]]), function () {
            var $var70 = expr.Fields[0];

            if ($var70 != null) {
                return ofArray([["id", $var70]]);
            } else {
                return new List$2();
            }
        }(), ofArray([["params", _Array$from(map$4(function (pat) {
            return serializePattern(pat);
        }, expr.Fields[1]))]]), ofArray([["body", serializeStatement(expr.Fields[2])]]), ofArray([["generator", expr.Fields[3]]]), ofArray([["async", expr.Fields[4]]]), function () {
            var $var71 = expr.Fields[5];

            if ($var71 != null) {
                return ofArray([["loc", $var71]]);
            } else {
                return new List$2();
            }
        }()])) : expr.Case === "AssignmentExpression" ? createObj$$1(ofArray([ofArray([["type", "AssignmentExpression"]]), ofArray([["left", serializeExpression(expr.Fields[1])]]), ofArray([["right", serializeExpression(expr.Fields[2])]]), ofArray([["operator", serializeAssignOperator(expr.Fields[0])]]), function () {
            var $var72 = expr.Fields[3];

            if ($var72 != null) {
                return ofArray([["loc", $var72]]);
            } else {
                return new List$2();
            }
        }()])) : expr.Case === "CallExpression" ? createObj$$1(ofArray([ofArray([["type", "CallExpression"]]), ofArray([["callee", serializeExpression(expr.Fields[0])]]), ofArray([["arguments", _Array$from(map$4(function (expr_1) {
            return serializeExpression(expr_1);
        }, expr.Fields[1]))]]), function () {
            var $var73 = expr.Fields[2];

            if ($var73 != null) {
                return ofArray([["loc", $var73]]);
            } else {
                return new List$2();
            }
        }()])) : expr.Case === "MemberExpression" ? createObj$$1(ofArray([ofArray([["type", "MemberExpression"]]), ofArray([["object", serializeExpression(expr.Fields[0])]]), ofArray([["property", serializeExpression(expr.Fields[1])]]), ofArray([["computed", expr.Fields[2]]]), function () {
            var $var74 = expr.Fields[3];

            if ($var74 != null) {
                return ofArray([["loc", $var74]]);
            } else {
                return new List$2();
            }
        }()])) : expr.Case === "BinaryExpression" ? createObj$$1(ofArray([ofArray([["type", "BinaryExpression"]]), ofArray([["left", serializeExpression(expr.Fields[1])]]), ofArray([["right", serializeExpression(expr.Fields[2])]]), ofArray([["operator", serializeBinaryOperator(expr.Fields[0])]]), function () {
            var $var75 = expr.Fields[3];

            if ($var75 != null) {
                return ofArray([["loc", $var75]]);
            } else {
                return new List$2();
            }
        }()])) : expr.Case === "ArrayExpression" ? createObj$$1(ofArray([ofArray([["type", "ArrayExpression"]]), ofArray([["elements", _Array$from(map$4(function (expr_1) {
            return serializeExpression(expr_1);
        }, expr.Fields[0]))]]), function () {
            var $var76 = expr.Fields[1];

            if ($var76 != null) {
                return ofArray([["loc", $var76]]);
            } else {
                return new List$2();
            }
        }()])) : expr.Case === "NullLiteral" ? createObj$$1(ofArray([ofArray([["type", "NullLiteral"]]), function () {
            var $var77 = expr.Fields[0];

            if ($var77 != null) {
                return ofArray([["loc", $var77]]);
            } else {
                return new List$2();
            }
        }()])) : expr.Case === "StringLiteral" ? createObj$$1(ofArray([ofArray([["type", "StringLiteral"]]), ofArray([["value", expr.Fields[0]]]), function () {
            var $var78 = expr.Fields[1];

            if ($var78 != null) {
                return ofArray([["loc", $var78]]);
            } else {
                return new List$2();
            }
        }()])) : expr.Case === "BooleanLiteral" ? createObj$$1(ofArray([ofArray([["type", "BooleanLiteral"]]), ofArray([["value", expr.Fields[0]]]), function () {
            var $var79 = expr.Fields[1];

            if ($var79 != null) {
                return ofArray([["loc", $var79]]);
            } else {
                return new List$2();
            }
        }()])) : expr.Case === "NumericLiteral" ? createObj$$1(ofArray([ofArray([["type", "NumericLiteral"]]), ofArray([["value", expr.Fields[0]]]), function () {
            var $var80 = expr.Fields[1];

            if ($var80 != null) {
                return ofArray([["loc", $var80]]);
            } else {
                return new List$2();
            }
        }()])) : createObj$$1(ofArray([ofArray([["type", "Identifier"]]), ofArray([["name", expr.Fields[0]]]), function () {
            var $var81 = expr.Fields[1];

            if ($var81 != null) {
                return ofArray([["loc", $var81]]);
            } else {
                return new List$2();
            }
        }()]));
    };

    var serializeStatement = __exports.serializeStatement = function (stm) {
        return stm.Case === "BlockStatement" ? createObj$$1(ofArray([ofArray([["type", "BlockStatement"]]), function () {
            var $var82 = stm.Fields[1];

            if ($var82 != null) {
                return ofArray([["loc", $var82]]);
            } else {
                return new List$2();
            }
        }(), ofArray([["body", _Array$from(map$4(function (stm_1) {
            return serializeStatement(stm_1);
        }, stm.Fields[0]))]])])) : stm.Case === "EmptyStatement" ? createObj$$1(ofArray([ofArray([["type", "EmptyStatement"]]), function () {
            var $var83 = stm.Fields[0];

            if ($var83 != null) {
                return ofArray([["loc", $var83]]);
            } else {
                return new List$2();
            }
        }()])) : stm.Case === "ReturnStatement" ? createObj$$1(ofArray([ofArray([["type", "ReturnStatement"]]), function () {
            var $var84 = stm.Fields[1];

            if ($var84 != null) {
                return ofArray([["loc", $var84]]);
            } else {
                return new List$2();
            }
        }(), ofArray([["argument", serializeExpression(stm.Fields[0])]])])) : stm.Case === "VariableDeclaration" ? function () {
            var kind = stm.Fields[0].Case === "Let" ? "let" : stm.Fields[0].Case === "Const" ? "const" : "var";
            return createObj$$1(ofArray([ofArray([["type", "VariableDeclaration"]]), ofArray([["kind", kind]]), ofArray([["declarations", _Array$from(map$4(function (arg00_) {
                return serializeDeclarator(arg00_);
            }, stm.Fields[1]))]]), function () {
                var $var85 = stm.Fields[2];

                if ($var85 != null) {
                    return ofArray([["loc", $var85]]);
                } else {
                    return new List$2();
                }
            }()]));
        }() : createObj$$1(ofArray([ofArray([["type", "ExpressionStatement"]]), function () {
            var $var86 = stm.Fields[1];

            if ($var86 != null) {
                return ofArray([["loc", $var86]]);
            } else {
                return new List$2();
            }
        }(), ofArray([["expression", serializeExpression(stm.Fields[0])]])]));
    };

    var serializeProgram = __exports.serializeProgram = function (prog) {
        return createObj$$1(ofArray([ofArray([["type", "Program"]]), function () {
            var $var87 = prog.location;

            if ($var87 != null) {
                return ofArray([["loc", $var87]]);
            } else {
                return new List$2();
            }
        }(), ofArray([["sourceType", "module"]]), ofArray([["body", _Array$from(map$4(function (stm) {
            return serializeStatement(stm);
        }, prog.body))]]), ofArray([["directives", []]])]));
    };

    return __exports;
}({});

var _Range = function () {
  function _Range(start, end) {
    _classCallCheck(this, _Range);

    this.Start = start;
    this.End = end;
  }

  _createClass(_Range, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Range",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          Start: "number",
          End: "number"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return _Range;
}();

setType("TheGamma.Range", _Range);

var _Error = function () {
  function _Error(number, message, range) {
    _classCallCheck(this, _Error);

    this.Number = number;
    this.Message = message;
    this.Range = range;
  }

  _createClass(_Error, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Error",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          Number: "number",
          Message: "string",
          Range: GenericParam("Range")
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return _Error;
}();

setType("TheGamma.Error", _Error);
var Operator = function () {
  function Operator(caseName, fields) {
    _classCallCheck(this, Operator);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Operator, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Operator",
        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
        cases: {
          Divide: [],
          Equals: [],
          GreaterThan: [],
          GreaterThanOrEqual: [],
          LessThan: [],
          LessThanOrEqual: [],
          Minus: [],
          Multiply: [],
          Plus: [],
          Power: []
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareUnions(this, other);
    }
  }]);

  return Operator;
}();
setType("TheGamma.Operator", Operator);
var TokenKind = function () {
  function TokenKind(caseName, fields) {
    _classCallCheck(this, TokenKind);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(TokenKind, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.TokenKind",
        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
        cases: {
          Arrow: [],
          Boolean: ["boolean"],
          By: [],
          Comma: [],
          Dot: [],
          EndOfFile: [],
          Equals: [],
          Error: ["string"],
          Fun: [],
          Ident: ["string"],
          LParen: [],
          LSquare: [],
          Let: [],
          Newline: [],
          Number: ["string", "number"],
          Operator: [Operator],
          QIdent: ["string"],
          RParen: [],
          RSquare: [],
          String: ["string"],
          To: [],
          White: ["string"]
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareUnions(this, other);
    }
  }]);

  return TokenKind;
}();
setType("TheGamma.TokenKind", TokenKind);
var Token = function () {
  function Token(token, range) {
    _classCallCheck(this, Token);

    this.Token = token;
    this.Range = range;
  }

  _createClass(Token, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Token",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          Token: TokenKind,
          Range: _Range
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return Token;
}();
setType("TheGamma.Token", Token);
var Emitter = function () {
  function Emitter(emit) {
    _classCallCheck(this, Emitter);

    this.Emit = emit;
  }

  _createClass(Emitter, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Emitter",
        interfaces: ["FSharpRecord"],
        properties: {
          Emit: "function"
        }
      };
    }
  }]);

  return Emitter;
}();
setType("TheGamma.Emitter", Emitter);
var Metadata = function () {
  function Metadata(context, type, data) {
    _classCallCheck(this, Metadata);

    this.Context = context;
    this.Type = type;
    this.Data = data;
  }

  _createClass(Metadata, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Metadata",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          Context: "string",
          Type: "string",
          Data: Any
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }]);

  return Metadata;
}();
setType("TheGamma.Metadata", Metadata);
var Documentation = function () {
  function Documentation(caseName, fields) {
    _classCallCheck(this, Documentation);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Documentation, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Documentation",
        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
        cases: {
          Details: ["string", "string"],
          None: [],
          Text: ["string"]
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareUnions(this, other);
    }
  }]);

  return Documentation;
}();
setType("TheGamma.Documentation", Documentation);
var Member = function () {
  function Member(caseName, fields) {
    _classCallCheck(this, Member);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Member, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Member",
        interfaces: ["FSharpUnion"],
        cases: {
          Method: ["string", makeGeneric(List$2, {
            T: Tuple(["string", "boolean", Type])
          }), Type, makeGeneric(List$2, {
            T: Metadata
          }), Emitter],
          Property: ["string", Type, makeGeneric(List$2, {
            T: Metadata
          }), Emitter]
        }
      };
    }
  }, {
    key: "Name",
    get: function () {
      var _target0 = function _target0(s) {
        return s;
      };

      if (this.Case === "Method") {
        return _target0(this.Fields[0]);
      } else {
        return _target0(this.Fields[0]);
      }
    }
  }]);

  return Member;
}();
setType("TheGamma.Member", Member);
var ObjectType = function () {
  function ObjectType(members) {
    _classCallCheck(this, ObjectType);

    this.Members = members;
  }

  _createClass(ObjectType, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.ObjectType",
        interfaces: ["FSharpRecord"],
        properties: {
          Members: FArray(Member)
        }
      };
    }
  }]);

  return ObjectType;
}();
setType("TheGamma.ObjectType", ObjectType);
var PrimitiveType = function () {
  function PrimitiveType(caseName, fields) {
    _classCallCheck(this, PrimitiveType);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(PrimitiveType, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.PrimitiveType",
        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
        cases: {
          Bool: [],
          Number: [],
          String: [],
          Unit: []
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareUnions(this, other);
    }
  }]);

  return PrimitiveType;
}();
setType("TheGamma.PrimitiveType", PrimitiveType);
var Type = function () {
  function Type(caseName, fields) {
    _classCallCheck(this, Type);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Type, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Type",
        interfaces: ["FSharpUnion"],
        cases: {
          Any: [],
          App: [Type, makeGeneric(List$2, {
            T: Type
          })],
          Delayed: ["string", Interface("TheGamma.Common.Future")],
          Forall: [makeGeneric(List$2, {
            T: "string"
          }), Type],
          Function: [makeGeneric(List$2, {
            T: Type
          }), Type],
          List: [Type],
          Object: [ObjectType],
          Parameter: ["string"],
          Primitive: [PrimitiveType]
        }
      };
    }
  }]);

  return Type;
}();
setType("TheGamma.Type", Type);
var Name = function () {
  function Name(name) {
    _classCallCheck(this, Name);

    this.Name = name;
  }

  _createClass(Name, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Name",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          Name: "string"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return Name;
}();
setType("TheGamma.Name", Name);
var Constant = function () {
  function Constant(caseName, fields) {
    _classCallCheck(this, Constant);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Constant, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Constant",
        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
        cases: {
          Boolean: ["boolean"],
          Empty: [],
          Number: ["number"],
          String: ["string"]
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareUnions(this, other);
    }
  }]);

  return Constant;
}();
setType("TheGamma.Constant", Constant);
var EntityKind = function () {
  function EntityKind(caseName, fields) {
    _classCallCheck(this, EntityKind);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(EntityKind, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.EntityKind",
        interfaces: ["FSharpUnion"],
        cases: {
          ArgumentList: [makeGeneric(List$2, {
            T: Entity
          })],
          Binding: [Name, Entity],
          CallSite: [Entity, Name, Choice],
          ChainElement: ["boolean", Name, Entity, Option(Entity), Option(Entity)],
          Constant: [Constant],
          Function: [Entity, Entity],
          GlobalValue: [Name, Option(Expression)],
          LetCommand: [Entity, Entity],
          List: [makeGeneric(List$2, {
            T: Entity
          })],
          NamedMember: [Name, Entity],
          NamedParam: [Name, Entity],
          Operator: [Entity, Operator, Entity],
          Program: [makeGeneric(List$2, {
            T: Entity
          })],
          Root: [],
          RunCommand: [Entity],
          Variable: [Name, Entity]
        }
      };
    }
  }]);

  return EntityKind;
}();
setType("TheGamma.EntityKind", EntityKind);
var Entity = function () {
  function Entity(kind, symbol, value, meta, type, errors) {
    _classCallCheck(this, Entity);

    this.Kind = kind;
    this.Symbol = symbol;
    this.Value = value;
    this.Meta = meta;
    this.Type = type;
    this.Errors = errors;
  }

  _createClass(Entity, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Entity",
        interfaces: ["FSharpRecord"],
        properties: {
          Kind: EntityKind,
          Symbol: Interface("TheGamma.Common.Symbol"),
          Value: Option(EntityValue),
          Meta: makeGeneric(List$2, {
            T: Metadata
          }),
          Type: Option(Type),
          Errors: makeGeneric(List$2, {
            T: makeGeneric(_Error, {
              Range: _Range
            })
          })
        }
      };
    }
  }]);

  return Entity;
}();
setType("TheGamma.Entity", Entity);
var EntityValue = function () {
  function EntityValue(value, preview) {
    _classCallCheck(this, EntityValue);

    this.Value = value;
    this.Preview = preview;
  }

  _createClass(EntityValue, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.EntityValue",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          Value: Interface("TheGamma.RuntimeValue"),
          Preview: Any
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }]);

  return EntityValue;
}();
setType("TheGamma.EntityValue", EntityValue);

var _Node = function () {
  function _Node(whiteBefore, whiteAfter, range, node, entity) {
    _classCallCheck(this, _Node);

    this.WhiteBefore = whiteBefore;
    this.WhiteAfter = whiteAfter;
    this.Range = range;
    this.Node = node;
    this.Entity = entity;
  }

  _createClass(_Node, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Node",
        interfaces: ["FSharpRecord"],
        properties: {
          WhiteBefore: makeGeneric(List$2, {
            T: Token
          }),
          WhiteAfter: makeGeneric(List$2, {
            T: Token
          }),
          Range: _Range,
          Node: GenericParam("T"),
          Entity: Option(Entity)
        }
      };
    }
  }]);

  return _Node;
}();

setType("TheGamma.Node", _Node);
var Argument = function () {
  function Argument(name, value) {
    _classCallCheck(this, Argument);

    this.Name = name;
    this.Value = value;
  }

  _createClass(Argument, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Argument",
        interfaces: ["FSharpRecord"],
        properties: {
          Name: Option(makeGeneric(_Node, {
            T: Name
          })),
          Value: makeGeneric(_Node, {
            T: Expr
          })
        }
      };
    }
  }]);

  return Argument;
}();
setType("TheGamma.Argument", Argument);
var Program$$1 = function () {
  function Program$$1(body) {
    _classCallCheck(this, Program$$1);

    this.Body = body;
  }

  _createClass(Program$$1, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Program",
        interfaces: ["FSharpRecord"],
        properties: {
          Body: makeGeneric(_Node, {
            T: makeGeneric(List$2, {
              T: makeGeneric(_Node, {
                T: Command
              })
            })
          })
        }
      };
    }
  }]);

  return Program$$1;
}();
setType("TheGamma.Program", Program$$1);
var Command = function () {
  function Command(caseName, fields) {
    _classCallCheck(this, Command);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Command, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Command",
        interfaces: ["FSharpUnion"],
        cases: {
          Expr: [makeGeneric(_Node, {
            T: Expr
          })],
          Let: [makeGeneric(_Node, {
            T: Name
          }), makeGeneric(_Node, {
            T: Expr
          })]
        }
      };
    }
  }]);

  return Command;
}();
setType("TheGamma.Command", Command);
var Expr = function () {
  function Expr(caseName, fields) {
    _classCallCheck(this, Expr);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Expr, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Expr",
        interfaces: ["FSharpUnion"],
        cases: {
          Binary: [makeGeneric(_Node, {
            T: Expr
          }), makeGeneric(_Node, {
            T: Operator
          }), makeGeneric(_Node, {
            T: Expr
          })],
          Boolean: ["boolean"],
          Call: [Option(makeGeneric(_Node, {
            T: Expr
          })), makeGeneric(_Node, {
            T: Name
          }), makeGeneric(_Node, {
            T: makeGeneric(List$2, {
              T: Argument
            })
          })],
          Empty: [],
          Function: [makeGeneric(_Node, {
            T: Name
          }), makeGeneric(_Node, {
            T: Expr
          })],
          List: [makeGeneric(List$2, {
            T: makeGeneric(_Node, {
              T: Expr
            })
          })],
          Number: ["number"],
          Property: [makeGeneric(_Node, {
            T: Expr
          }), makeGeneric(_Node, {
            T: Name
          })],
          String: ["string"],
          Variable: [makeGeneric(_Node, {
            T: Name
          })]
        }
      };
    }
  }]);

  return Expr;
}();
setType("TheGamma.Expr", Expr);

var f$1 = _wks;

var _wksExt = {
	f: f$1
};

var iterator$2 = _wksExt.f('iterator');

var iterator = createCommonjsModule(function (module) {
module.exports = { "default": iterator$2, __esModule: true };
});

var global$7         = _global;
var core$3           = _core;
var LIBRARY$1        = _library;
var wksExt$1         = _wksExt;
var defineProperty$6 = _objectDp.f;
var _wksDefine = function(name){
  var $Symbol = core$3.Symbol || (core$3.Symbol = LIBRARY$1 ? {} : global$7.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty$6($Symbol, name, {value: wksExt$1.f(name)});
};

var getKeys$1   = _objectKeys;
var toIObject$4 = _toIobject;
var _keyof = function(object, el){
  var O      = toIObject$4(object)
    , keys   = getKeys$1(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};

var f$2 = Object.getOwnPropertySymbols;

var _objectGops = {
	f: f$2
};

var f$3 = {}.propertyIsEnumerable;

var _objectPie = {
	f: f$3
};

// all enumerable object keys, includes symbols
var getKeys$2 = _objectKeys;
var gOPS    = _objectGops;
var pIE     = _objectPie;
var _enumKeys = function(it){
  var result     = getKeys$2(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys$3      = _objectKeysInternal;
var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

var f$5 = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys$3(O, hiddenKeys);
};

var _objectGopn = {
	f: f$5
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject$5 = _toIobject;
var gOPN$1      = _objectGopn.f;
var toString$3  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN$1(it);
  } catch(e){
    return windowNames.slice();
  }
};

var f$4 = function getOwnPropertyNames(it){
  return windowNames && toString$3.call(it) == '[object Window]' ? getWindowNames(it) : gOPN$1(toIObject$5(it));
};

var _objectGopnExt = {
	f: f$4
};

var pIE$1            = _objectPie;
var createDesc$3     = _propertyDesc;
var toIObject$6      = _toIobject;
var toPrimitive$2    = _toPrimitive;
var has$6            = _has;
var IE8_DOM_DEFINE$1 = _ie8DomDefine;
var gOPD$1           = Object.getOwnPropertyDescriptor;

var f$6 = _descriptors ? gOPD$1 : function getOwnPropertyDescriptor(O, P){
  O = toIObject$6(O);
  P = toPrimitive$2(P, true);
  if(IE8_DOM_DEFINE$1)try {
    return gOPD$1(O, P);
  } catch(e){ /* empty */ }
  if(has$6(O, P))return createDesc$3(!pIE$1.f.call(O, P), O[P]);
};

var _objectGopd = {
	f: f$6
};

// ECMAScript 6 symbols shim
var global$6         = _global;
var has$5            = _has;
var DESCRIPTORS$3    = _descriptors;
var $export$7        = _export;
var redefine$1       = _redefine;
var META           = _meta.KEY;
var $fails         = _fails;
var shared$1         = _shared;
var setToStringTag$3 = _setToStringTag;
var uid$1            = _uid;
var wks            = _wks;
var wksExt         = _wksExt;
var wksDefine      = _wksDefine;
var keyOf          = _keyof;
var enumKeys       = _enumKeys;
var isArray$3        = _isArray;
var anObject$5       = _anObject;
var toIObject$3      = _toIobject;
var toPrimitive$1    = _toPrimitive;
var createDesc$2     = _propertyDesc;
var _create        = _objectCreate;
var gOPNExt        = _objectGopnExt;
var $GOPD          = _objectGopd;
var $DP            = _objectDp;
var $keys$2          = _objectKeys;
var gOPD           = $GOPD.f;
var dP$6             = $DP.f;
var gOPN           = gOPNExt.f;
var $Symbol        = global$6.Symbol;
var $JSON          = global$6.JSON;
var _stringify     = $JSON && $JSON.stringify;
var PROTOTYPE$2      = 'prototype';
var HIDDEN         = wks('_hidden');
var TO_PRIMITIVE   = wks('toPrimitive');
var isEnum         = {}.propertyIsEnumerable;
var SymbolRegistry = shared$1('symbol-registry');
var AllSymbols     = shared$1('symbols');
var OPSymbols      = shared$1('op-symbols');
var ObjectProto$1    = Object[PROTOTYPE$2];
var USE_NATIVE     = typeof $Symbol == 'function';
var QObject        = global$6.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS$3 && $fails(function(){
  return _create(dP$6({}, 'a', {
    get: function(){ return dP$6(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto$1, key);
  if(protoDesc)delete ObjectProto$1[key];
  dP$6(it, key, D);
  if(protoDesc && it !== ObjectProto$1)dP$6(ObjectProto$1, key, protoDesc);
} : dP$6;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE$2]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty$1 = function defineProperty(it, key, D){
  if(it === ObjectProto$1)$defineProperty$1(OPSymbols, key, D);
  anObject$5(it);
  key = toPrimitive$1(key, true);
  anObject$5(D);
  if(has$5(AllSymbols, key)){
    if(!D.enumerable){
      if(!has$5(it, HIDDEN))dP$6(it, HIDDEN, createDesc$2(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has$5(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc$2(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP$6(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject$5(it);
  var keys = enumKeys(P = toIObject$3(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty$1(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive$1(key, true));
  if(this === ObjectProto$1 && has$5(AllSymbols, key) && !has$5(OPSymbols, key))return false;
  return E || !has$5(this, key) || !has$5(AllSymbols, key) || has$5(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject$3(it);
  key = toPrimitive$1(key, true);
  if(it === ObjectProto$1 && has$5(AllSymbols, key) && !has$5(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has$5(AllSymbols, key) && !(has$5(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject$3(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has$5(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto$1
    , names  = gOPN(IS_OP ? OPSymbols : toIObject$3(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has$5(AllSymbols, key = names[i++]) && (IS_OP ? has$5(ObjectProto$1, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid$1(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto$1)$set.call(OPSymbols, value);
      if(has$5(this, HIDDEN) && has$5(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc$2(1, value));
    };
    if(DESCRIPTORS$3 && setter)setSymbolDesc(ObjectProto$1, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine$1($Symbol[PROTOTYPE$2], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty$1;
  _objectGopn.f = gOPNExt.f = $getOwnPropertyNames;
  _objectPie.f  = $propertyIsEnumerable;
  _objectGops.f = $getOwnPropertySymbols;

  if(DESCRIPTORS$3 && !_library){
    redefine$1(ObjectProto$1, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  };
}

$export$7($export$7.G + $export$7.W + $export$7.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i$1 = 0; symbols.length > i$1; )wks(symbols[i$1++]);

for(var symbols = $keys$2(wks.store), i$1 = 0; symbols.length > i$1; )wksDefine(symbols[i$1++]);

$export$7($export$7.S + $export$7.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has$5(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export$7($export$7.S + $export$7.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty$1,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export$7($export$7.S + $export$7.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray$3(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag$3($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag$3(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag$3(global$6.JSON, 'JSON', true);

_wksDefine('asyncIterator');

_wksDefine('observable');

var index = _core.Symbol;

var symbol = createCommonjsModule(function (module) {
module.exports = { "default": index, __esModule: true };
});

var _Symbol2 = unwrapExports(symbol);

var _typeof_1 = createCommonjsModule(function (module, exports) {
"use strict";

exports.__esModule = true;

var _iterator = iterator;

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = symbol;

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
});

var _typeof$2 = unwrapExports(_typeof_1);

var ProvidedType = function () {
  function ProvidedType(caseName, fields) {
    _classCallCheck(this, ProvidedType);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(ProvidedType, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.TypeProviders.ProvidedType",
        interfaces: ["FSharpUnion"],
        cases: {
          GlobalValue: ["string", makeGeneric(List$2, {
            T: Metadata
          }), Expression, Type],
          NamedType: ["string", makeGeneric(List$2, {
            T: "string"
          }), Type]
        }
      };
    }
  }]);

  return ProvidedType;
}();
setType("TheGamma.TypeProviders.ProvidedType", ProvidedType);
var ProviderHelpers = function (__exports) {
  var docMeta = __exports.docMeta = function (doc) {
    return new Metadata("http://thegamma.net", "Documentation", doc);
  };

  return __exports;
}({});
var FSharpProvider = function (__exports) {
  var AnyType = __exports.AnyType = function () {
    function AnyType(kind) {
      _classCallCheck(this, AnyType);

      this.kind = kind;
    }

    _createClass(AnyType, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.FSharpProvider.AnyType",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            kind: "string"
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return AnyType;
  }();

  setType("TheGamma.TypeProviders.FSharpProvider.AnyType", AnyType);

  var GenericParameterType = __exports.GenericParameterType = function () {
    function GenericParameterType(kind, name) {
      _classCallCheck(this, GenericParameterType);

      this.kind = kind;
      this.name = name;
    }

    _createClass(GenericParameterType, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.FSharpProvider.GenericParameterType",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            kind: "string",
            name: "string"
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return GenericParameterType;
  }();

  setType("TheGamma.TypeProviders.FSharpProvider.GenericParameterType", GenericParameterType);

  var ArrayType = __exports.ArrayType = function () {
    function ArrayType(kind, element) {
      _classCallCheck(this, ArrayType);

      this.kind = kind;
      this.element = element;
    }

    _createClass(ArrayType, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.FSharpProvider.ArrayType",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            kind: "string",
            element: AnyType
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return ArrayType;
  }();

  setType("TheGamma.TypeProviders.FSharpProvider.ArrayType", ArrayType);

  var PrimitiveType$$1 = __exports.PrimitiveType = function () {
    function PrimitiveType$$1(kind, name) {
      _classCallCheck(this, PrimitiveType$$1);

      this.kind = kind;
      this.name = name;
    }

    _createClass(PrimitiveType$$1, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.FSharpProvider.PrimitiveType",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            kind: "string",
            name: "string"
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return PrimitiveType$$1;
  }();

  setType("TheGamma.TypeProviders.FSharpProvider.PrimitiveType", PrimitiveType$$1);

  var FunctionType = __exports.FunctionType = function () {
    function FunctionType(kind, _arguments, returns) {
      _classCallCheck(this, FunctionType);

      this.kind = kind;
      this.arguments = _arguments;
      this.returns = returns;
    }

    _createClass(FunctionType, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.FSharpProvider.FunctionType",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            kind: "string",
            arguments: FArray(AnyType),
            returns: AnyType
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return FunctionType;
  }();

  setType("TheGamma.TypeProviders.FSharpProvider.FunctionType", FunctionType);

  var NamedType = __exports.NamedType = function () {
    function NamedType(kind, name, typargs) {
      _classCallCheck(this, NamedType);

      this.kind = kind;
      this.name = name;
      this.typargs = typargs;
    }

    _createClass(NamedType, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.FSharpProvider.NamedType",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            kind: "string",
            name: "string",
            typargs: FArray(AnyType)
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return NamedType;
  }();

  setType("TheGamma.TypeProviders.FSharpProvider.NamedType", NamedType);

  var Member$$1 = __exports.Member = function () {
    function Member$$1(kind) {
      _classCallCheck(this, Member$$1);

      this.kind = kind;
    }

    _createClass(Member$$1, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.FSharpProvider.Member",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            kind: "string"
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return Member$$1;
  }();

  setType("TheGamma.TypeProviders.FSharpProvider.Member", Member$$1);

  var Argument$$1 = __exports.Argument = function () {
    function Argument$$1(name, optional, type) {
      _classCallCheck(this, Argument$$1);

      this.name = name;
      this.optional = optional;
      this.type = type;
    }

    _createClass(Argument$$1, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.FSharpProvider.Argument",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            name: "string",
            optional: "boolean",
            type: AnyType
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return Argument$$1;
  }();

  setType("TheGamma.TypeProviders.FSharpProvider.Argument", Argument$$1);

  var MethodMember = __exports.MethodMember = function () {
    function MethodMember(kind, name, typepars, _arguments, returns) {
      _classCallCheck(this, MethodMember);

      this.kind = kind;
      this.name = name;
      this.typepars = typepars;
      this.arguments = _arguments;
      this.returns = returns;
    }

    _createClass(MethodMember, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.FSharpProvider.MethodMember",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            kind: "string",
            name: "string",
            typepars: FArray(AnyType),
            arguments: FArray(Argument$$1),
            returns: AnyType
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return MethodMember;
  }();

  setType("TheGamma.TypeProviders.FSharpProvider.MethodMember", MethodMember);

  var PropertyMember = __exports.PropertyMember = function () {
    function PropertyMember(kind, name, returns) {
      _classCallCheck(this, PropertyMember);

      this.kind = kind;
      this.name = name;
      this.returns = returns;
    }

    _createClass(PropertyMember, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.FSharpProvider.PropertyMember",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            kind: "string",
            name: "string",
            returns: AnyType
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return PropertyMember;
  }();

  setType("TheGamma.TypeProviders.FSharpProvider.PropertyMember", PropertyMember);

  var ExportedType = __exports.ExportedType = function () {
    function ExportedType(name, typepars, _static, instance, members) {
      _classCallCheck(this, ExportedType);

      this.name = name;
      this.typepars = typepars;
      this.static = _static;
      this.instance = instance;
      this.members = members;
    }

    _createClass(ExportedType, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.FSharpProvider.ExportedType",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            name: "string",
            typepars: FArray(AnyType),
            static: "boolean",
            instance: FArray("string"),
            members: FArray(Member$$1)
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return ExportedType;
  }();

  setType("TheGamma.TypeProviders.FSharpProvider.ExportedType", ExportedType);

  var provideFSharpTypes = __exports.provideFSharpTypes = function (lookupNamed, url) {
    var mapType = function mapType(t) {
      var $var97 = null;

      switch (t.kind) {
        case "primitive":
          {
            {
              var matchValue = t.name;
              var $var98 = null;

              switch (matchValue) {
                case "object":
                  {
                    $var98 = new Type("Any", []);
                    break;
                  }

                case "int":
                case "float":
                  {
                    $var98 = new Type("Primitive", [new PrimitiveType("Number", [])]);
                    break;
                  }

                case "string":
                  {
                    $var98 = new Type("Primitive", [new PrimitiveType("String", [])]);
                    break;
                  }

                case "bool":
                  {
                    $var98 = new Type("Primitive", [new PrimitiveType("Bool", [])]);
                    break;
                  }

                case "unit":
                  {
                    $var98 = new Type("Primitive", [new PrimitiveType("Unit", [])]);
                    break;
                  }

                default:
                  {
                    throw new Error("provideFSharpType: Unsupported type: " + matchValue);
                  }
              }

              $var97 = $var98;
            }
            break;
          }

        case "function":
          {
            {
              var t_1 = t;
              $var97 = new Type("Function", [toList(t_1.arguments.map(mapType)), mapType(t_1.returns)]);
            }
            break;
          }

        case "named":
          {
            {
              var _t_ = t;
              $var97 = lookupNamed(_t_.name)(ofArray(_t_.typargs.map(mapType)));
            }
            break;
          }

        case "parameter":
          {
            $var97 = new Type("Parameter", [t.name]);
            break;
          }

        case "array":
          {
            $var97 = new Type("List", [mapType(t.element)]);
            break;
          }

        default:
          {
            throw new Error("provideFSharpType: Unexpected type");
          }
      }

      return $var97;
    };

    var getTypeParameters = function getTypeParameters(typars) {
      return ofArray(typars.map(function (t) {
        var matchValue = mapType(t);

        if (matchValue.Case === "Parameter") {
          return matchValue.Fields[0];
        } else {
          throw new Error("importProvidedType: expected type parameter");
        }
      }));
    };

    var importProvidedType = function importProvidedType(exp) {
      return function (arg00) {
        return function (arg10) {
          return Async_CreateNamedFuture_Static(arg00, arg10);
        };
      }(exp.name)(function (builder_) {
        return builder_.Delay(function () {
          var mems = _Array$from(choose$1(function (m) {
            return m.kind === "method" ? function () {
              var m_1 = m;
              var args = toList(delay(function () {
                return map$5(function (a) {
                  return [a.name, a.optional, mapType(a.type)];
                }, m_1.arguments);
              }));
              var emitter = new Emitter(function (tupledArg) {
                return new Expression("CallExpression", [new Expression("MemberExpression", [tupledArg[0], new Expression("IdentifierExpression", [m_1.name, null]), false, null]), tupledArg[1], null]);
              });

              var typ = function () {
                var matchValue = getTypeParameters(m_1.typepars);

                if (matchValue.tail == null) {
                  return mapType(m_1.returns);
                } else {
                  return new Type("Forall", [matchValue, mapType(m_1.returns)]);
                }
              }();

              return new Member("Method", [m_1.name, args, typ, ofArray([ProviderHelpers.docMeta(new Documentation("Text", [""]))]), emitter]);
            }() : null;
          }, exp.members));

          var matchValue = getTypeParameters(exp.typepars);

          if (matchValue.tail == null) {
            return builder_.Return(new Type("Object", [new ObjectType(mems)]));
          } else {
            var obj = new Type("Object", [new ObjectType(mems)]);
            return builder_.Return(new Type("Forall", [matchValue, obj]));
          }
        });
      }(singleton$2));
    };

    return function (builder_) {
      return builder_.Delay(function () {
        return builder_.Bind(Http.Request("GET", url), function (_arg1) {
          var expTys = JSON.parse(_arg1);
          return builder_.Return(toList(delay(function () {
            return map$5(function (exp) {
              var guid = url + "," + exp.name;
              var ty = new Type("Delayed", [guid, importProvidedType(exp)]);

              if (exp.static) {
                var e = fold$1(function (chain, s) {
                  return chain != null ? new Expression("MemberExpression", [chain, new Expression("IdentifierExpression", [s, null]), false, null]) : new Expression("IdentifierExpression", [s, null]);
                }, null, exp.instance);

                var ty_1 = function () {
                  var matchValue = getTypeParameters(exp.typepars);

                  if (matchValue.tail == null) {
                    return ty;
                  } else {
                    return new Type("App", [ty, toList(delay(function () {
                      return map$5(function (v) {
                        return new Type("Any", []);
                      }, matchValue);
                    }))]);
                  }
                }();

                return new ProvidedType("GlobalValue", [exp.name, new List$2(), e, ty_1]);
              } else {
                return new ProvidedType("NamedType", [exp.name, getTypeParameters(exp.typepars), ty]);
              }
            }, expTys);
          })));
        });
      });
    }(singleton$2);
  };

  return __exports;
}({});
var RestProvider = function (__exports) {
  var AnyType = __exports.AnyType = function () {
    function AnyType(kind) {
      _classCallCheck(this, AnyType);

      this.kind = kind;
    }

    _createClass(AnyType, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.RestProvider.AnyType",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            kind: "string"
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return AnyType;
  }();

  setType("TheGamma.TypeProviders.RestProvider.AnyType", AnyType);

  var TypeNested = __exports.TypeNested = function () {
    function TypeNested(kind, endpoint) {
      _classCallCheck(this, TypeNested);

      this.kind = kind;
      this.endpoint = endpoint;
    }

    _createClass(TypeNested, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.RestProvider.TypeNested",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            kind: "string",
            endpoint: "string"
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return TypeNested;
  }();

  setType("TheGamma.TypeProviders.RestProvider.TypeNested", TypeNested);

  var TypePrimitive = __exports.TypePrimitive = function () {
    function TypePrimitive(kind, type, endpoint) {
      _classCallCheck(this, TypePrimitive);

      this.kind = kind;
      this.type = type;
      this.endpoint = endpoint;
    }

    _createClass(TypePrimitive, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.RestProvider.TypePrimitive",
          interfaces: ["FSharpRecord", "System.IEquatable"],
          properties: {
            kind: "string",
            type: Any,
            endpoint: "string"
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }]);

    return TypePrimitive;
  }();

  setType("TheGamma.TypeProviders.RestProvider.TypePrimitive", TypePrimitive);

  var Parameter = __exports.Parameter = function () {
    function Parameter(name, type) {
      _classCallCheck(this, Parameter);

      this.name = name;
      this.type = type;
    }

    _createClass(Parameter, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.RestProvider.Parameter",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            name: "string",
            type: "string"
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return Parameter;
  }();

  setType("TheGamma.TypeProviders.RestProvider.Parameter", Parameter);

  var Documentation$$1 = __exports.Documentation = function () {
    function Documentation$$1(title, details) {
      _classCallCheck(this, Documentation$$1);

      this.title = title;
      this.details = details;
    }

    _createClass(Documentation$$1, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.RestProvider.Documentation",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            title: Option("string"),
            details: Option("string")
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return Documentation$$1;
  }();

  setType("TheGamma.TypeProviders.RestProvider.Documentation", Documentation$$1);

  var Member$$1 = __exports.Member = function () {
    function Member$$1(name, returns, parameters, documentation, schema, trace) {
      _classCallCheck(this, Member$$1);

      this.name = name;
      this.returns = returns;
      this.parameters = parameters;
      this.documentation = documentation;
      this.schema = schema;
      this.trace = trace;
    }

    _createClass(Member$$1, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.RestProvider.Member",
          interfaces: ["FSharpRecord", "System.IEquatable"],
          properties: {
            name: "string",
            returns: AnyType,
            parameters: Option(FArray(Parameter)),
            documentation: Option(Any),
            schema: Option(Any),
            trace: FArray("string")
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }]);

    return Member$$1;
  }();

  setType("TheGamma.TypeProviders.RestProvider.Member", Member$$1);

  var ResultType = __exports.ResultType = function () {
    function ResultType(caseName, fields) {
      _classCallCheck(this, ResultType);

      this.Case = caseName;
      this.Fields = fields;
    }

    _createClass(ResultType, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.RestProvider.ResultType",
          interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
          cases: {
            Generic: ["string", FArray(ResultType)],
            Primitive: ["string"],
            Record: [FArray(Tuple(["string", ResultType]))]
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsUnions(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareUnions(this, other);
      }
    }]);

    return ResultType;
  }();

  setType("TheGamma.TypeProviders.RestProvider.ResultType", ResultType);

  var RawField = __exports.RawField = function () {
    function RawField(name, type) {
      _classCallCheck(this, RawField);

      this.name = name;
      this.type = type;
    }

    _createClass(RawField, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.RestProvider.RawField",
          interfaces: ["FSharpRecord", "System.IEquatable"],
          properties: {
            name: "string",
            type: Any
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }]);

    return RawField;
  }();

  setType("TheGamma.TypeProviders.RestProvider.RawField", RawField);

  var RawResultType = __exports.RawResultType = function () {
    function RawResultType(name, fields, params) {
      _classCallCheck(this, RawResultType);

      this.name = name;
      this.fields = fields;
      this.params = params;
    }

    _createClass(RawResultType, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.TypeProviders.RestProvider.RawResultType",
          interfaces: ["FSharpRecord", "System.IEquatable"],
          properties: {
            name: "string",
            fields: FArray(RawField),
            params: FArray(Any)
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }]);

    return RawResultType;
  }();

  setType("TheGamma.TypeProviders.RestProvider.RawResultType", RawResultType);

  var parseDoc = __exports.parseDoc = function (json) {
    return function () {
      return json == null;
    }() ? new Documentation("None", []) : typeof json === "string" ? new Documentation("Text", [json]) : function () {
      var doc = json;
      var matchValue = [doc.title, doc.details];

      var _target1 = function _target1() {
        return new Documentation("None", []);
      };

      if (matchValue[0] != null) {
        if (matchValue[1] != null) {
          var dets = matchValue[1];
          var title = matchValue[0];
          return new Documentation("Details", [title, dets]);
        } else {
          return _target1();
        }
      } else {
        return _target1();
      }
    }();
  };

  var fromRawType = __exports.fromRawType = function (json) {
    return typeof json === "string" ? new ResultType("Primitive", [json]) : function () {
      var res = json;

      if (res.name === "record") {
        return new ResultType("Record", [res.fields.map(function (f) {
          return [f.name, fromRawType(f.type)];
        })]);
      } else {
        return new ResultType("Generic", [res.name, _Array$from(map$5(function (json_1) {
          return fromRawType(json_1);
        }, res.params))]);
      }
    }();
  };

  var load = __exports.load = function (url, cookies) {
    return function (builder_) {
      return builder_.Delay(function () {
        return builder_.Bind(Http.Request("GET", url, null, cookies), function (_arg1) {
          var members = JSON.parse(_arg1);
          return builder_.Return(members);
        });
      });
    }(singleton$2);
  };

  var trimLeft = __exports.trimLeft = function (c, s) {
    return _Array$from(skipWhile(function (y) {
      return c === y;
    }, s.split(""))).join('');
  };

  var trimRight = __exports.trimRight = function (c, s) {
    return _Array$from(skipWhile(function (y) {
      return c === y;
    }, s.split("").slice().reverse())).slice().reverse().join('');
  };

  var concatUrl = __exports.concatUrl = function (a, b) {
    return trimRight("/", a) + "/" + trimLeft("/", b);
  };

  var addTraceCall = __exports.addTraceCall = function (inst, trace) {
    return isEmpty$1(trace) ? inst : function () {
      var trace_1 = new Expression("StringLiteral", [join("&", trace), null]);
      var mem = new Expression("MemberExpression", [inst, new Expression("IdentifierExpression", ["addTrace", null]), false, null]);
      return new Expression("CallExpression", [mem, ofArray([trace_1]), null]);
    }();
  };

  var propAccess = __exports.propAccess = function (trace) {
    return new Emitter(function (tupledArg) {
      return addTraceCall(tupledArg[0], trace);
    });
  };

  var methCall = __exports.methCall = function (argNames, trace) {
    return new Emitter(function (tupledArg) {
      var withTrace = addTraceCall(tupledArg[0], trace);
      return function () {
        var folder = function folder(inst) {
          return function (tupledArg_1) {
            var trace_1 = new Expression("BinaryExpression", [new BinaryOperator("BinaryPlus", []), new Expression("StringLiteral", [tupledArg_1[0] + "=", null]), tupledArg_1[1], null]);
            var mem = new Expression("MemberExpression", [inst, new Expression("IdentifierExpression", ["addTrace", null]), false, null]);
            return new Expression("CallExpression", [mem, ofArray([trace_1]), null]);
          };
        };

        return function (source) {
          return fold$1(function ($var99, $var100) {
            return folder($var99)($var100);
          }, withTrace, source);
        };
      }()(zip(argNames, tupledArg[1]));
    });
  };

  var dataCall = __exports.dataCall = function (parser, trace, endp) {
    return new Emitter(function (tupledArg) {
      var tr = propAccess(trace).Emit([tupledArg[0], tupledArg[1]]);
      var mem = new Expression("MemberExpression", [tr, new Expression("IdentifierExpression", ["getValue", null]), false, null]);
      return parser(new Expression("CallExpression", [mem, ofArray([new Expression("StringLiteral", [endp, null])]), null]));
    });
  };

  var ident = __exports.ident = function (s) {
    return new Expression("IdentifierExpression", [s, null]);
  };

  var str = __exports.str = function (v) {
    return new Expression("StringLiteral", [v, null]);
  };

  var op_Dynamic = __exports.op_Dynamic = function (e, s) {
    return new Expression("MemberExpression", [e, new Expression("IdentifierExpression", [s, null]), false, null]);
  };

  var op_DivideAtDivide = __exports.op_DivideAtDivide = function (e, args) {
    return new Expression("CallExpression", [e, args, null]);
  };

  var func = __exports.func = function (v, f) {
    var body = new Statement("BlockStatement", [ofArray([new Statement("ReturnStatement", [f(ident(v)), null])]), null]);
    return new Expression("FunctionExpression", [null, ofArray([new Pattern("IdentifierPattern", [v, null])]), body, false, false, null]);
  };

  var getTypeAndEmitter = __exports.getTypeAndEmitter = function (lookupNamed, ty) {
    var _target1 = function _target1() {
      return [new Type("Primitive", [new PrimitiveType("Number", [])]), function (e) {
        return new Expression("CallExpression", [new Expression("IdentifierExpression", ["Number", null]), ofArray([e]), null]);
      }];
    };

    var _target3 = function _target3(ty_1) {
      var patternInput = getTypeAndEmitter(lookupNamed, ty_1);
      var serTy = lookupNamed("series")(ofArray([new Type("Primitive", [new PrimitiveType("Number", [])]), patternInput[0]]));
      return [serTy, function (d) {
        return op_DivideAtDivide(op_Dynamic(ident("series"), "ordinal"), ofArray([op_DivideAtDivide(ident("convertSequence"), ofArray([func("v", patternInput[1]), d])), str("key"), str("value"), str("")]));
      }];
    };

    var _target5 = function _target5() {
      console.log("getTypeAndEmitter: Cannot handle %O", ty);
      throw new Error("getTypeAndEmitter: Cannot handle type");
    };

    if (ty.Case === "Generic") {
      if (ty.Fields[0] === "seq") {
        if (ty.Fields[1].length === 1) {
          if (ty.Fields[1][0].Case === "Generic") {
            if (ty.Fields[1][0].Fields[0] === "tuple") {
              if (function () {
                var testExpr = ty.Fields[1][0].Fields[1];
                return testExpr.length === 2;
              }()) {
                var t1 = ty.Fields[1][0].Fields[1][0];
                var t2 = ty.Fields[1][0].Fields[1][1];
                {
                  var _ret = function () {
                    var patternInput = getTypeAndEmitter(lookupNamed, t1);
                    var patternInput_1 = getTypeAndEmitter(lookupNamed, t2);
                    var typ = lookupNamed("series")(ofArray([patternInput[0], patternInput_1[0]]));
                    return {
                      v: [typ, function (d) {
                        return op_DivideAtDivide(op_Dynamic(ident("series"), "create"), ofArray([op_DivideAtDivide(ident("convertTupleSequence"), ofArray([func("v", patternInput[1]), func("v", patternInput_1[1]), d])), str("key"), str("value"), str("")]));
                      }]
                    };
                  }();

                  if ((typeof _ret === "undefined" ? "undefined" : _typeof$2(_ret)) === "object") return _ret.v;
                }
              } else {
                return _target3(ty.Fields[1][0]);
              }
            } else {
              return _target3(ty.Fields[1][0]);
            }
          } else {
            return _target3(ty.Fields[1][0]);
          }
        } else {
          return _target5();
        }
      } else {
        return _target5();
      }
    } else {
      if (ty.Case === "Record") {
        var membs = ty.Fields[0];
        var membs_1 = membs.map(function (tupledArg) {
          var patternInput = getTypeAndEmitter(lookupNamed, tupledArg[1]);
          var emitter = new Emitter(function (tupledArg_1) {
            return patternInput[1](op_Dynamic(tupledArg_1[0], tupledArg[0]));
          });
          return new Member("Property", [tupledArg[0], patternInput[0], ofArray([ProviderHelpers.docMeta(new Documentation("Text", [""]))]), emitter]);
        });
        var obj = new Type("Object", [new ObjectType(membs_1)]);
        return [obj, function (x) {
          return x;
        }];
      } else {
        if (ty.Fields[0] === "string") {
          return [new Type("Primitive", [new PrimitiveType("String", [])]), function (x) {
            return x;
          }];
        } else {
          if (ty.Fields[0] === "int") {
            return _target1();
          } else {
            if (ty.Fields[0] === "float") {
              return _target1();
            } else {
              return _target5();
            }
          }
        }
      }
    }
  };

  var mapParamType = __exports.mapParamType = function (_arg1) {
    var $var101 = null;

    switch (_arg1) {
      case "int":
      case "float":
        {
          $var101 = new PrimitiveType("Number", []);
          break;
        }

      default:
        {
          throw new Error("mapParamType: Unsupported parameter type");
        }
    }

    return $var101;
  };

  var restTypeCache = __exports.restTypeCache = new _Map();

  var createRestType = __exports.createRestType = function (lookupNamed, root, cookies, url) {
    var guid = concatUrl(root, url) + cookies;
    var matchValue = tryGetValue(restTypeCache, guid);

    if (matchValue[0]) {
      return matchValue[1];
    } else {
      var future = function (builder_) {
        return builder_.Delay(function () {
          return builder_.Bind(load(concatUrl(root, url), cookies), function (_arg1) {
            return builder_.Return(new Type("Object", [new ObjectType(_arg1.map(function (m) {
              var schema = m.schema != null ? ofArray([function () {
                var Type$$1 = m.schema["@type"];
                return new Metadata("http://schema.org", Type$$1, m.schema);
              }()]) : new List$2();
              var matchValue_1 = m.returns.kind;
              var $var102 = null;

              switch (matchValue_1) {
                case "nested":
                  {
                    {
                      var returns = m.returns;
                      var retTyp = createRestType(lookupNamed, root, cookies, returns.endpoint);

                      if (m.parameters == null) {
                        $var102 = new Member("Property", [m.name, retTyp, new List$2(ProviderHelpers.docMeta(parseDoc(m.documentation)), schema), propAccess(m.trace)]);
                      } else {
                        var args = toList(delay(function () {
                          return map$5(function (p) {
                            return [p.name, false, new Type("Primitive", [mapParamType(p.type)])];
                          }, m.parameters);
                        }));
                        var argNames = toList(delay(function () {
                          return map$5(function (p) {
                            return p.name;
                          }, m.parameters);
                        }));
                        $var102 = new Member("Method", [m.name, args, retTyp, ofArray([ProviderHelpers.docMeta(parseDoc(m.documentation))]), methCall(argNames, m.trace)]);
                      }
                    }
                    break;
                  }

                case "primitive":
                  {
                    {
                      var _returns = m.returns;

                      var _ty = fromRawType(_returns.type);

                      var patternInput = getTypeAndEmitter(lookupNamed, _ty);
                      $var102 = new Member("Property", [m.name, patternInput[0], new List$2(ProviderHelpers.docMeta(parseDoc(m.documentation)), schema), dataCall(patternInput[1], m.trace, _returns.endpoint)]);
                    }
                    break;
                  }

                default:
                  {
                    throw new Error("?");
                  }
              }

              return $var102;
            }))]));
          });
        });
      }(singleton$2);

      var ty = new Type("Delayed", [guid, function (arg00) {
        return function (arg10) {
          return Async_CreateNamedFuture_Static(arg00, arg10);
        };
      }(guid)(future)]);
      restTypeCache.set(guid, ty);
      return ty;
    }
  };

  var provideRestType = __exports.provideRestType = function (lookupNamed, name, root, cookies) {
    var ctx = ident("RuntimeContext");
    return new ProvidedType("GlobalValue", [name, new List$2(), new Expression("NewExpression", [ctx, ofArray([str(root), str(cookies), str("")]), null]), createRestType(lookupNamed, root, cookies, "/")]);
  };

  return __exports;
}({});

var SeriesInternals = function (__exports) {
  var slice = __exports.slice = function (lo, hi, arr) {
    return _Array$from(initialize$1(hi - lo + 1, function (i) {
      return arr[lo + i];
    }));
  };

  var dictAny = __exports.dictAny = function (v) {
    return new _Map(v);
  };

  var zipUnsorted = __exports.zipUnsorted = function (arr1, arr2) {
    var d1 = dictAny(arr1);
    var d2 = dictAny(arr2);
    var res = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(d1), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var kv1 = _step.value;
        var v2 = d2.has(kv1[0]) ? d2.get(kv1[0]) : null;
        res.push([kv1[0], [kv1[1], v2]]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _getIterator(d2), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var kv2 = _step2.value;

        if (!d1.has(kv2[0])) {
          res.push([kv2[0], [null, kv2[1]]]);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return _Array$from(res);
  };

  var isSortedUsing = __exports.isSortedUsing = function (test, proj, arr) {
    var loop = function loop(i) {
      return i === arr.length ? true : test(proj(arr[i - 1]))(proj(arr[i])) ? loop(i + 1) : false;
    };

    if (arr.length === 0) {
      return true;
    } else {
      return loop(1);
    }
  };

  var zipSorted = __exports.zipSorted = function (arr1, arr2) {
    var i1 = 0;
    var i2 = 0;
    var res = [];

    while (i1 < arr1.length ? i2 < arr2.length : false) {
      var patternInput = [arr1[i1], arr2[i2]];
      var v2 = patternInput[1][1];
      var v1 = patternInput[0][1];
      var k2 = patternInput[1][0];
      var k1 = patternInput[0][0];

      if (function (a) {
        return function (b) {
          return (a < b ? -1 : a == b ? 0 : 1) === 0;
        };
      }(k1)(k2)) {
        res.push([k1, [v1, v2]]);
        i1 = i1 + 1;
        i2 = i2 + 1;
      } else {
        if (function (a) {
          return function (b) {
            return (a < b ? -1 : a == b ? 0 : 1) < 0;
          };
        }(k1)(k2)) {
          res.push([k1, [v1, null]]);
          i1 = i1 + 1;
        } else {
          if (function (a) {
            return function (b) {
              return (a < b ? -1 : a == b ? 0 : 1) < 0;
            };
          }(k2)(k1)) {
            res.push([k2, [null, v2]]);
            i2 = i2 + 1;
          }
        }
      }
    }

    while (i1 < arr1.length) {
      var _patternInput = arr1[i1];
      res.push([_patternInput[0], [_patternInput[1], null]]);
      i1 = i1 + 1;
    }

    while (i2 < arr2.length) {
      var _patternInput2 = arr2[i2];
      res.push([_patternInput2[0], [null, _patternInput2[1]]]);
      i2 = i2 + 2;
    }

    return _Array$from(res);
  };

  var zipAny = __exports.zipAny = function (arr1, arr2) {
    var op_LessEqualsDot = function op_LessEqualsDot(a) {
      return function (b) {
        return (a < b ? -1 : a == b ? 0 : 1) <= 0;
      };
    };

    var op_GreaterEqualsDot = function op_GreaterEqualsDot(a) {
      return function (b) {
        return (a < b ? -1 : a == b ? 0 : 1) >= 0;
      };
    };

    if (isSortedUsing(op_LessEqualsDot, function (tuple) {
      return tuple[0];
    }, arr1) ? isSortedUsing(op_LessEqualsDot, function (tuple) {
      return tuple[0];
    }, arr2) : false) {
      return zipSorted(arr1, arr2);
    } else {
      if (isSortedUsing(op_GreaterEqualsDot, function (tuple) {
        return tuple[0];
      }, arr1) ? isSortedUsing(op_GreaterEqualsDot, function (tuple) {
        return tuple[0];
      }, arr2) : false) {
        return zipSorted(arr1.slice().reverse(), arr2.slice().reverse()).slice().reverse();
      } else {
        return zipUnsorted(arr1, arr2);
      }
    }
  };

  return __exports;
}({});
var helpers = function () {
  function helpers() {
    _classCallCheck(this, helpers);
  }

  _createClass(helpers, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Series.helpers",
        properties: {}
      };
    }
  }]);

  return helpers;
}();
setType("TheGamma.Series.helpers", helpers);

var series = function () {
  function series(data, keyName, valueName, seriesName) {
    _classCallCheck(this, series);

    this.data = data;
    this.keyName = keyName;
    this.valueName = valueName;
    this.seriesName = seriesName;
  }

  _createClass(series, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Series.series",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          data: Interface("TheGamma.Common.Future"),
          keyName: "string",
          valueName: "string",
          seriesName: "string"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "set",
    value: function (data, keyName, valueName, seriesName) {
      return new series(data, keyName != null ? keyName : this.keyName, valueName != null ? valueName : this.valueName, seriesName != null ? seriesName : this.seriesName);
    }
  }, {
    key: "setProperties",
    value: function (keyName, valueName, seriesName) {
      var keyName_1 = keyName != null ? keyName : this.keyName;
      var valueName_1 = valueName != null ? valueName : this.valueName;
      var seriesName_1 = seriesName != null ? seriesName : this.seriesName;
      return new series(this.data, keyName_1, valueName_1, seriesName_1);
    }
  }, {
    key: "sortKeys",
    value: function (reverse$$1) {
      return function (arg00) {
        return function (arg10) {
          var $var7 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var7.data), function (_arg1) {
                return builder_.Return(arg00(_arg1));
              });
            });
          }(singleton$2));
          return new series(nd, $var7.keyName, $var7.valueName, $var7.seriesName);
        };
      }(function (arr) {
        return (equals(reverse$$1, true) ? function (array) {
          return array.slice().reverse();
        } : function (x) {
          return x;
        })(_Array$from(sortWith(function (tupledArg, tupledArg_1) {
          return tupledArg[0] < tupledArg_1[0] ? -1 : tupledArg[0] == tupledArg_1[0] ? 0 : 1;
        }, arr)));
      })(this);
    }
  }, {
    key: "sortValues",
    value: function (reverse$$1) {
      return function (arg00) {
        return function (arg10) {
          var $var8 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var8.data), function (_arg1) {
                return builder_.Return(arg00(_arg1));
              });
            });
          }(singleton$2));
          return new series(nd, $var8.keyName, $var8.valueName, $var8.seriesName);
        };
      }(function (arr) {
        return (equals(reverse$$1, true) ? function (array) {
          return array.slice().reverse();
        } : function (x) {
          return x;
        })(_Array$from(sortWith(function (tupledArg, tupledArg_1) {
          return tupledArg[1] < tupledArg_1[1] ? -1 : tupledArg[1] == tupledArg_1[1] ? 0 : 1;
        }, arr)));
      })(this);
    }
  }, {
    key: "sortBy",
    value: function (f, reverse$$1) {
      return function (arg00) {
        return function (arg10) {
          var $var9 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var9.data), function (_arg1) {
                return builder_.Return(arg00(_arg1));
              });
            });
          }(singleton$2));
          return new series(nd, $var9.keyName, $var9.valueName, $var9.seriesName);
        };
      }(function (arr) {
        return (equals(reverse$$1, true) ? function (array) {
          return array.slice().reverse();
        } : function (x) {
          return x;
        })(_Array$from(sortWith(function (tupledArg, tupledArg_1) {
          return f(tupledArg[1]) < f(tupledArg_1[1]) ? -1 : f(tupledArg[1]) == f(tupledArg_1[1]) ? 0 : 1;
        }, arr)));
      })(this);
    }
  }, {
    key: "reverse",
    value: function () {
      return function (arg00) {
        return function (arg10) {
          var $var10 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var10.data), function (_arg1) {
                return builder_.Return(arg00(_arg1));
              });
            });
          }(singleton$2));
          return new series(nd, $var10.keyName, $var10.valueName, $var10.seriesName);
        };
      }(function (array) {
        return array.slice().reverse();
      })(this);
    }
  }, {
    key: "take",
    value: function (count$$1) {
      return function (arg00) {
        return function (arg10) {
          var $var11 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var11.data), function (_arg1) {
                return builder_.Return(arg00(_arg1));
              });
            });
          }(singleton$2));
          return new series(nd, $var11.keyName, $var11.valueName, $var11.seriesName);
        };
      }(function (arr) {
        return SeriesInternals.slice(0, (arr.length < count$$1 ? arr.length : count$$1) - 1, arr);
      })(this);
    }
  }, {
    key: "skip",
    value: function (count$$1) {
      return function (arg00) {
        return function (arg10) {
          var $var12 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var12.data), function (_arg1) {
                return builder_.Return(arg00(_arg1));
              });
            });
          }(singleton$2));
          return new series(nd, $var12.keyName, $var12.valueName, $var12.seriesName);
        };
      }(function (arr) {
        return SeriesInternals.slice(arr.length < count$$1 ? arr.length : count$$1, arr.length - 1, arr);
      })(this);
    }
  }, {
    key: "map",
    value: function (f) {
      return function (arg00) {
        return function (arg10) {
          var $var13 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var13.data), function (_arg1) {
                return builder_.Return(arg00(_arg1));
              });
            });
          }(singleton$2));
          return new series(nd, $var13.keyName, $var13.valueName, $var13.seriesName);
        };
      }(function () {
        var mapping = function mapping(tupledArg) {
          return [tupledArg[0], f(tupledArg[1])];
        };

        return function (array) {
          return array.map(mapping);
        };
      }())(this);
    }
  }, {
    key: "mapKeys",
    value: function (f) {
      return function (arg00) {
        return function (arg10) {
          var $var14 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var14.data), function (_arg1) {
                return builder_.Return(arg00(_arg1));
              });
            });
          }(singleton$2));
          return new series(nd, $var14.keyName, $var14.valueName, $var14.seriesName);
        };
      }(function () {
        var mapping = function mapping(tupledArg) {
          return [f(tupledArg[0]), tupledArg[1]];
        };

        return function (array) {
          return array.map(mapping);
        };
      }())(this);
    }
  }, {
    key: "mapPairs",
    value: function (f) {
      return function (arg00) {
        return function (arg10) {
          var $var15 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var15.data), function (_arg1) {
                return builder_.Return(arg00(_arg1));
              });
            });
          }(singleton$2));
          return new series(nd, $var15.keyName, $var15.valueName, $var15.seriesName);
        };
      }(function () {
        var mapping = function mapping(tupledArg) {
          return [tupledArg[0], f(tupledArg[0])(tupledArg[1])];
        };

        return function (array) {
          return array.map(mapping);
        };
      }())(this);
    }
  }, {
    key: "filter",
    value: function (f) {
      return function (arg00) {
        return function (arg10) {
          var $var16 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var16.data), function (_arg1) {
                return builder_.Return(arg00(_arg1));
              });
            });
          }(singleton$2));
          return new series(nd, $var16.keyName, $var16.valueName, $var16.seriesName);
        };
      }(function () {
        var predicate = function predicate($var17) {
          return f(function (tuple) {
            return tuple[1];
          }($var17));
        };

        return function (array) {
          return array.filter(predicate);
        };
      }())(this);
    }
  }, {
    key: "choose",
    value: function (f) {
      return function (arg00) {
        return function (arg10) {
          var $var18 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var18.data), function (_arg1) {
                return builder_.Return(arg00(_arg1));
              });
            });
          }(singleton$2));
          return new series(nd, $var18.keyName, $var18.valueName, $var18.seriesName);
        };
      }(function () {
        var chooser = function chooser(tupledArg) {
          var matchValue = f(tupledArg[1]);

          if (matchValue != null) {
            return [tupledArg[0], matchValue];
          }
        };

        return function (array) {
          return _Array$from(choose$1(chooser, array));
        };
      }())(this);
    }
  }, {
    key: "joinOuter",
    value: function (s2) {
      var _this = this;

      var data = function (builder_) {
        return builder_.Delay(function () {
          return builder_.Bind(Async_AwaitFuture_Static(_this.data), function (_arg4) {
            return builder_.Bind(Async_AwaitFuture_Static(s2.data), function (_arg5) {
              return builder_.Return(SeriesInternals.zipAny(_arg4, _arg5));
            });
          });
        });
      }(singleton$2);

      return series.create(data, this.keyName, "Values", this.seriesName + " and " + s2.seriesName);
    }
  }, {
    key: "joinInner",
    value: function (s2) {
      return this.joinOuter(s2).choose(function (_arg6) {
        var _target1 = function _target1() {
          return null;
        };

        if (_arg6[0] != null) {
          if (_arg6[1] != null) {
            var v1 = _arg6[0];
            var v2 = _arg6[1];
            return [v1, v2];
          } else {
            return _target1();
          }
        } else {
          return _target1();
        }
      });
    }
  }, {
    key: "appendScalar",
    value: function (key, _value) {
      return function (arg00) {
        return function (arg10) {
          var $var19 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var19.data), function (_arg1) {
                return builder_.Return(arg00(_arg1));
              });
            });
          }(singleton$2));
          return new series(nd, $var19.keyName, $var19.valueName, $var19.seriesName);
        };
      }(function (arr) {
        return arr.concat([[key, _value]]);
      })(this);
    }
  }, {
    key: "append",
    value: function (s2) {
      var _this2 = this;

      return this.set(Async_StartAsFuture_Static(function (builder_) {
        return builder_.Delay(function () {
          return builder_.Bind(Async_AwaitFuture_Static(_this2.data), function (_arg7) {
            return builder_.Bind(Async_AwaitFuture_Static(s2.data), function (_arg8) {
              return builder_.Return(_arg7.concat(_arg8));
            });
          });
        });
      }(singleton$2)));
    }
  }, {
    key: "realign",
    value: function (newKeys, defaultValue) {
      return function (arg00) {
        return function (arg10) {
          var $var20 = arg10;
          var nd = Async_StartAsFuture_Static(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Async_AwaitFuture_Static($var20.data), function (_arg2) {
                return builder_.ReturnFrom(arg00(_arg2));
              });
            });
          }(singleton$2));
          return new series(nd, $var20.keyName, $var20.valueName, $var20.seriesName);
        };
      }(function (arr) {
        return function (builder_) {
          return builder_.Delay(function () {
            return builder_.Bind(Async_AwaitFuture_Static(newKeys.data), function (_arg9) {
              var newKeys_1 = _arg9.map(function (tupledArg) {
                return tupledArg[1];
              });

              var lookup = create$4(arr, new GenericComparer(function (x, y) {
                return x < y ? -1 : x > y ? 1 : 0;
              }));
              return builder_.Return(newKeys_1.map(function (k) {
                var matchValue = tryFind$1(k, lookup);

                if (matchValue == null) {
                  return [k, defaultValue];
                } else {
                  return [k, matchValue];
                }
              }));
            });
          });
        }(singleton$2);
      })(this);
    }
  }, {
    key: "preview",
    value: function () {
      return this.take(10);
    }
  }], [{
    key: "create",
    value: function (data, keyName, valueName, seriesName) {
      return new series(Async_StartAsFuture_Static(data), keyName, valueName, seriesName);
    }
  }, {
    key: "values",
    value: function (_values) {
      var data = Async_StartAsFuture_Static(function (builder_) {
        return builder_.Delay(function () {
          return builder_.Return(_Array$from(mapIndexed$1(function (i, v) {
            return [i, v];
          }, _values)));
        });
      }(singleton$2));
      return new series(data, "key", "value", "");
    }
  }, {
    key: "range",
    value: function (from, to) {
      return series.values(Int32Array.from(range(from, to)));
    }
  }, {
    key: "rangeBy",
    value: function (from, to, step) {
      return series.values(Int32Array.from(rangeStep(from, step, to)));
    }
  }, {
    key: "ordinal",
    value: function (data, keyName, valueName, seriesName) {
      var data_1 = Async_StartAsFuture_Static(function (builder_) {
        return builder_.Delay(function () {
          return builder_.Bind(data, function (_arg3) {
            return builder_.Return(_Array$from(mapIndexed$1(function (i, v) {
              return [i, v];
            }, _arg3)));
          });
        });
      }(singleton$2));
      return new series(data_1, keyName, valueName, seriesName);
    }
  }]);

  return series;
}();

setType("TheGamma.Series.series", series);

function convertTupleSequence(f, g, data) {
  return function (builder_) {
    return builder_.Delay(function () {
      return builder_.Bind(data, function (_arg1) {
        return builder_.Return(_arg1.map(function (tupledArg) {
          return [f(tupledArg[0]), g(tupledArg[1])];
        }));
      });
    });
  }(singleton$2);
}

function trimLeft(c, s) {
  return _Array$from(skipWhile(function (y) {
    return c === y;
  }, s.split(""))).join('');
}
function trimRight(c, s) {
  return _Array$from(skipWhile(function (y) {
    return c === y;
  }, s.split("").slice().reverse())).slice().reverse().join('');
}
function concatUrl(a, b) {
  return trimRight("/", a) + "/" + trimLeft("/", b);
}
var RuntimeContext = function () {
  _createClass(RuntimeContext, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.TypeProvidersRuntime.RuntimeContext",
        properties: {
          root: "string",
          trace: "string"
        }
      };
    }
  }]);

  function RuntimeContext(root, cookies, trace) {
    _classCallCheck(this, RuntimeContext);

    this["root@19"] = root;
    this.cookies = cookies;
    this["trace@19"] = trace;
  }

  _createClass(RuntimeContext, [{
    key: "addTrace",
    value: function (suffix) {
      var _this = this;

      var traces = toList(delay(function () {
        return append$1(!isNullOrEmpty(_this["trace@19"]) ? singleton$1(_this["trace@19"]) : empty(), delay(function () {
          return !isNullOrEmpty(suffix) ? singleton$1(suffix) : empty();
        }));
      }));
      return new RuntimeContext(this["root@19"], this.cookies, join("&", traces));
    }
  }, {
    key: "getValue",
    value: function (endpoint) {
      var _this2 = this;

      return function (builder_) {
        return builder_.Delay(function () {
          return builder_.Bind(Http.Request("POST", concatUrl(_this2["root@19"], endpoint), _this2["trace@19"], _this2.cookies), function (_arg1) {
            return builder_.Return(JSON.parse(_arg1));
          });
        });
      }(singleton$2);
    }
  }, {
    key: "root",
    get: function () {
      return this["root@19"];
    }
  }, {
    key: "trace",
    get: function () {
      return this["trace@19"];
    }
  }]);

  return RuntimeContext;
}();
setType("TheGamma.TypeProvidersRuntime.RuntimeContext", RuntimeContext);
var PivotContext = function () {
  _createClass(PivotContext, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.TypeProvidersRuntime.PivotContext",
        properties: {}
      };
    }
  }]);

  function PivotContext(root, calls) {
    _classCallCheck(this, PivotContext);

    this.root = root;
    this.calls = calls;
  }

  _createClass(PivotContext, [{
    key: "addCall",
    value: function (callid, values) {
      return new PivotContext(this.root, [[callid, values]].concat(this.calls));
    }
  }, {
    key: "getData",
    value: function (tfs, isPreview) {
      var _this3 = this;

      return function (builder_) {
        return builder_.Delay(function () {
          var url = function () {
            var folder = function folder(tfs_1) {
              return function (tupledArg) {
                if (tupledArg[1].length !== 1) {
                  throw new Error("PivotContext.getData: Expected one argument");
                }

                return replace$$1(tfs_1, tupledArg[0], toString$2(tupledArg[1][0]));
              };
            };

            return function (array) {
              return fold$1(function ($var92, $var93) {
                return folder($var92)($var93);
              }, tfs, array);
            };
          }()(_this3.calls);

          var url_1 = _this3.root + "?" + url + (isPreview ? "&preview" : "");
          Log.trace("runtime", "Pivot: %s", url_1);
          return builder_.Bind(Http.Request("GET", url_1), function (_arg1) {
            return builder_.Return(JSON.parse(_arg1));
          });
        });
      }(singleton$2);
    }
  }]);

  return PivotContext;
}();
setType("TheGamma.TypeProvidersRuntime.PivotContext", PivotContext);

var ChartData = function () {
  function ChartData(data) {
    _classCallCheck(this, ChartData);

    this.data = data;
  }

  _createClass(ChartData, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.ChartData",
        interfaces: ["FSharpRecord"],
        properties: {
          data: Async$1
        }
      };
    }
  }]);

  return ChartData;
}();
setType("TheGamma.GoogleCharts.ChartData", ChartData);
var LazyCharting = function (__exports) {
  var chartsToDraw = __exports.chartsToDraw = [];
  var googleLoaded = (Object.defineProperty(__exports, 'googleLoaded', {
    get: function get() {
      return googleLoaded;
    },
    set: function set(x) {
      return googleLoaded = x;
    }
  }), false);

  var drawChartOnLoad = __exports.drawChartOnLoad = function (f) {
    if (googleLoaded) {
      f();
    } else {
      chartsToDraw.push(f);
    }
  };

  if (typeof google != "undefined") google.load('visualization', '1', {
    'packages': ['corechart'],
    callback: function () {
      (function () {
        googleLoaded = true;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(chartsToDraw), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var f = _step.value;
            f();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      })();
    }
  });
  return __exports;
}({});
var Helpers = function (__exports) {
  var copy = __exports.copy = function (o, prop) {
    return o == null ? undefined : o[prop];
  };

  var orDefault = __exports.orDefault = function (newValue) {
    return newValue != null ? newValue : undefined;
  };

  var right = __exports.right = function (o, prop, newValue) {
    return newValue != null ? newValue : o == null ? undefined : o[prop];
  };

  var showChart = __exports.showChart = function (chart, outputId) {
    LazyCharting.drawChartOnLoad(function () {
      (function (arg00) {
        startImmediate(arg00);
      })(function (builder_) {
        return builder_.Delay(function () {
          return builder_.TryWith(builder_.Delay(function () {
            return builder_.Bind(chart["data"].data, function (_arg1) {
              var ctor = eval("(function(a) { return new google.visualization." + chart.typeName + " (a); })");
              var ch = ctor(document.getElementById(outputId));
              if (chart.options.height == undefined) chart.options.height = 400;
              ch.draw(_arg1, chart.options);
              return builder_.Zero();
            });
          }), function (_arg2) {
            Log.error("google", "Error when getting data or rendering chart: %O", _arg2);
            return builder_.Zero();
          });
        });
      }(singleton$2));
    });
  };

  return __exports;
}({});
var ChartDataOperations = function (__exports) {
  var collect$$1 = __exports.collect = function (f, l) {
    return function (builder_) {
      return builder_.Delay(function () {
        return l.tail == null ? builder_.Return(new List$2()) : builder_.Bind(f(l.head), function (_arg1) {
          return builder_.Bind(collect$$1(f, l.tail), function (_arg2) {
            return builder_.Return(append$$1(_arg1, _arg2));
          });
        });
      });
    }(singleton$2);
  };

  var oneKeyValue = __exports.oneKeyValue = function (keyType, v) {
    return new ChartData(function (builder_) {
      return builder_.Delay(function () {
        var data = new google.visualization.DataTable();
        data.addColumn(keyType, v.keyName);
        data.addColumn("number", v.seriesName);
        return builder_.Bind(Async_AwaitFuture_Static(v.mapPairs(function (k) {
          return function (v_1) {
            return [k, v_1];
          };
        }).data), function (_arg1) {
          (function (arg00) {
            data.addRows(arg00);
          })(_arg1.map(function (tuple) {
            return tuple[1];
          }));

          return builder_.Return(data);
        });
      });
    }(singleton$2));
  };

  var oneKeyTwoValues = __exports.oneKeyTwoValues = function (keyType, v) {
    return new ChartData(function (builder_) {
      return builder_.Delay(function () {
        var data = new google.visualization.DataTable();
        data.addColumn(keyType, v.keyName);
        data.addColumn("number", v.seriesName);
        data.addColumn("number", v.seriesName);
        return builder_.Bind(Async_AwaitFuture_Static(v.mapPairs(function (k) {
          return function (tupledArg) {
            return [k, tupledArg[0], tupledArg[1]];
          };
        }).data), function (_arg1) {
          (function (arg00) {
            data.addRows(arg00);
          })(_arg1.map(function (tuple) {
            return tuple[1];
          }));

          return builder_.Return(data);
        });
      });
    }(singleton$2));
  };

  var oneKeyAppendValues = __exports.oneKeyAppendValues = function (keyType, vs, colors) {
    return new ChartData(function (builder_) {
      return builder_.Delay(function () {
        var data = new google.visualization.DataTable();
        data.addColumn(keyType, vs[0].keyName);
        data.addColumn("number", vs[0].valueName);
        data.addColumn({
          type: "string",
          role: "style"
        });
        return builder_.Bind(collect$$1(function (tupledArg) {
          return function (builder__1) {
            return builder__1.Delay(function () {
              return builder__1.Bind(Async_AwaitFuture_Static(tupledArg[0].mapPairs(function (k) {
                return function (v) {
                  return [k, v, tupledArg[1]];
                };
              }).data), function (_arg1) {
                return builder__1.Return(ofArray(_arg1.map(function (tuple) {
                  return tuple[1];
                })));
              });
            });
          }(singleton$2);
        }, ofArray(_Array$from(zip(vs, colors)))), function (_arg2) {
          (function (arg00) {
            data.addRows(arg00);
          })(_Array$from(toList(sortWith(function (x, y) {
            return -compare(function (tupledArg) {
              return tupledArg[1];
            }(x), function (tupledArg) {
              return tupledArg[1];
            }(y));
          }, _arg2))).map(function (tupledArg) {
            return [tupledArg[0], tupledArg[1], tupledArg[2]];
          }));

          return builder_.Return(data);
        });
      });
    }(singleton$2));
  };

  var oneKeyNValues = __exports.oneKeyNValues = function (keyType, v) {
    return new ChartData(function (builder_) {
      return builder_.Delay(function () {
        var data = new google.visualization.DataTable();
        return builder_.Bind(Async_AwaitFuture_Static(v.data), function (_arg1) {
          var v_1 = _arg1.map(function (tuple) {
            return tuple[1];
          });

          data.addColumn(keyType, v_1[0].keyName);
          return builder_.Combine(builder_.For(range(0, v_1.length - 1), function (_arg2) {
            data.addColumn("number", v_1[_arg2].seriesName);
            return builder_.Zero();
          }), builder_.Delay(function () {
            var head$$1 = v_1[0].map(function (v_2) {
              return create$4(ofArray([[0, v_2]]), new GenericComparer(function (x, y) {
                return x < y ? -1 : x > y ? 1 : 0;
              }));
            });

            var tail$$1 = _Array$from(mapIndexed$1(function (i, v_2) {
              return [i + 1, v_2];
            }, SeriesInternals.slice(1, v_1.length - 1, v_1)));

            var all = fold$1(function (s1, tupledArg) {
              return s1.joinOuter(tupledArg[1]).map(function (tupledArg_1) {
                var matchValue = [tupledArg_1[0] != null ? tupledArg_1[0] : create$4(null, new GenericComparer(function (x, y) {
                  return x < y ? -1 : x > y ? 1 : 0;
                })), tupledArg_1[1]];

                if (matchValue[1] == null) {
                  return matchValue[0];
                } else {
                  var r = matchValue[1];
                  return add$2(tupledArg[0], r, matchValue[0]);
                }
              });
            }, head$$1, tail$$1);
            return builder_.Bind(Async_AwaitFuture_Static(all.mapPairs(function (k) {
              return function (vals) {
                var data_1 = _Array$from(initialize$1(v_1.length, function (i) {
                  return tryFind$1(i, vals) != null ? tryFind$1(i, vals) : undefined;
                }));

                return _Array$from(append$1([k], data_1));
              };
            }).data), function (_arg3) {
              (function (arg00) {
                data.addRows(arg00);
              })(_arg3.map(function (tuple) {
                return tuple[1];
              }));

              return builder_.Return(data);
            });
          }));
        });
      });
    }(singleton$2));
  };

  var twoValues = __exports.twoValues = function (v1, v2) {
    return new ChartData(function (builder_) {
      return builder_.Delay(function () {
        var data = new google.visualization.DataTable();
        data.addColumn("number", v1.seriesName);
        data.addColumn("number", v2.seriesName);
        return builder_.Bind(Async_AwaitFuture_Static(v1.joinInner(v2).map(function (tupledArg) {
          return [tupledArg[0], tupledArg[1]];
        }).data), function (_arg1) {
          (function (arg00) {
            data.addRows(arg00);
          })(_arg1.map(function (tuple) {
            return tuple[1];
          }));

          return builder_.Return(data);
        });
      });
    }(singleton$2));
  };

  return __exports;
}({});

var ChartSizeAxis = function () {
    function ChartSizeAxis(maxSize, maxValue, minSize, minValue) {
        _classCallCheck(this, ChartSizeAxis);

        this.maxSize = maxSize;
        this.maxValue = maxValue;
        this.minSize = minSize;
        this.minValue = minValue;
    }

    _createClass(ChartSizeAxis, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartSizeAxis",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    maxSize: "number",
                    maxValue: "number",
                    minSize: "number",
                    minValue: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartSizeAxis;
}();
setType("TheGamma.GoogleCharts.Options.ChartSizeAxis", ChartSizeAxis);
var ChartTextStyle = function () {
    function ChartTextStyle(fontName, fontSize, bold, italic, color, auraColor, opacity) {
        _classCallCheck(this, ChartTextStyle);

        this.fontName = fontName;
        this.fontSize = fontSize;
        this.bold = bold;
        this.italic = italic;
        this.color = color;
        this.auraColor = auraColor;
        this.opacity = opacity;
    }

    _createClass(ChartTextStyle, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartTextStyle",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    fontName: "string",
                    fontSize: "number",
                    bold: "boolean",
                    italic: "boolean",
                    color: "string",
                    auraColor: "string",
                    opacity: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartTextStyle;
}();
setType("TheGamma.GoogleCharts.Options.ChartTextStyle", ChartTextStyle);
var ChartTooltip = function () {
    function ChartTooltip(isHtml, showColorCode, textStyle, trigger) {
        _classCallCheck(this, ChartTooltip);

        this.isHtml = isHtml;
        this.showColorCode = showColorCode;
        this.textStyle = textStyle;
        this.trigger = trigger;
    }

    _createClass(ChartTooltip, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartTooltip",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    isHtml: "boolean",
                    showColorCode: "boolean",
                    textStyle: ChartTextStyle,
                    trigger: "string"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartTooltip;
}();
setType("TheGamma.GoogleCharts.Options.ChartTooltip", ChartTooltip);
var ChartLegend = function () {
    function ChartLegend(alignment, maxLines, position, textStyle, numberFormat) {
        _classCallCheck(this, ChartLegend);

        this.alignment = alignment;
        this.maxLines = maxLines;
        this.position = position;
        this.textStyle = textStyle;
        this.numberFormat = numberFormat;
    }

    _createClass(ChartLegend, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartLegend",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    alignment: "string",
                    maxLines: "number",
                    position: "string",
                    textStyle: ChartTextStyle,
                    numberFormat: "string"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartLegend;
}();
setType("TheGamma.GoogleCharts.Options.ChartLegend", ChartLegend);
var ChartColorAxis = function () {
    function ChartColorAxis(minValue, maxValue, values, colors, legend) {
        _classCallCheck(this, ChartColorAxis);

        this.minValue = minValue;
        this.maxValue = maxValue;
        this.values = values;
        this.colors = colors;
        this.legend = legend;
    }

    _createClass(ChartColorAxis, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartColorAxis",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    minValue: "number",
                    maxValue: "number",
                    values: FArray("number"),
                    colors: FArray("string"),
                    legend: ChartLegend
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartColorAxis;
}();
setType("TheGamma.GoogleCharts.Options.ChartColorAxis", ChartColorAxis);
var GeoChartMagnifyingGlass = function () {
    function GeoChartMagnifyingGlass(enable, zoomFactor) {
        _classCallCheck(this, GeoChartMagnifyingGlass);

        this.enable = enable;
        this.zoomFactor = zoomFactor;
    }

    _createClass(GeoChartMagnifyingGlass, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.GeoChartMagnifyingGlass",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    enable: "boolean",
                    zoomFactor: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return GeoChartMagnifyingGlass;
}();
setType("TheGamma.GoogleCharts.Options.GeoChartMagnifyingGlass", GeoChartMagnifyingGlass);
var GeoChartOptions = function () {
    function GeoChartOptions(backgroundColor, colorAxis, datalessRegionColor, displayMode, enableRegionInteractivity, height, keepAspectRatio, legend, region, magnifyingGlass, markerOpacity, resolution, sizeAxis, tooltip, width) {
        _classCallCheck(this, GeoChartOptions);

        this.backgroundColor = backgroundColor;
        this.colorAxis = colorAxis;
        this.datalessRegionColor = datalessRegionColor;
        this.displayMode = displayMode;
        this.enableRegionInteractivity = enableRegionInteractivity;
        this.height = height;
        this.keepAspectRatio = keepAspectRatio;
        this.legend = legend;
        this.region = region;
        this.magnifyingGlass = magnifyingGlass;
        this.markerOpacity = markerOpacity;
        this.resolution = resolution;
        this.sizeAxis = sizeAxis;
        this.tooltip = tooltip;
        this.width = width;
    }

    _createClass(GeoChartOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.GeoChartOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    backgroundColor: Any,
                    colorAxis: ChartColorAxis,
                    datalessRegionColor: "string",
                    displayMode: "string",
                    enableRegionInteractivity: "boolean",
                    height: "number",
                    keepAspectRatio: "boolean",
                    legend: ChartLegend,
                    region: "string",
                    magnifyingGlass: GeoChartMagnifyingGlass,
                    markerOpacity: "number",
                    resolution: "string",
                    sizeAxis: ChartSizeAxis,
                    tooltip: ChartTooltip,
                    width: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return GeoChartOptions;
}();
setType("TheGamma.GoogleCharts.Options.GeoChartOptions", GeoChartOptions);
var ChartBoxStyleGradient = function () {
    function ChartBoxStyleGradient(color1, color2, x1, y1, x2, y2, useObjectBoundingBoxUnits) {
        _classCallCheck(this, ChartBoxStyleGradient);

        this.color1 = color1;
        this.color2 = color2;
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
        this.useObjectBoundingBoxUnits = useObjectBoundingBoxUnits;
    }

    _createClass(ChartBoxStyleGradient, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartBoxStyleGradient",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    color1: "string",
                    color2: "string",
                    x1: "string",
                    y1: "string",
                    x2: "string",
                    y2: "string",
                    useObjectBoundingBoxUnits: "boolean"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartBoxStyleGradient;
}();
setType("TheGamma.GoogleCharts.Options.ChartBoxStyleGradient", ChartBoxStyleGradient);
var ChartBoxStyle = function () {
    function ChartBoxStyle(stroke, strokeWidth, rx, ry, gradient) {
        _classCallCheck(this, ChartBoxStyle);

        this.stroke = stroke;
        this.strokeWidth = strokeWidth;
        this.rx = rx;
        this.ry = ry;
        this.gradient = gradient;
    }

    _createClass(ChartBoxStyle, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartBoxStyle",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    stroke: "string",
                    strokeWidth: "number",
                    rx: "number",
                    ry: "number",
                    gradient: ChartBoxStyleGradient
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartBoxStyle;
}();
setType("TheGamma.GoogleCharts.Options.ChartBoxStyle", ChartBoxStyle);
var ChartAnnotations = function () {
    function ChartAnnotations(boxStyle, textStyle) {
        _classCallCheck(this, ChartAnnotations);

        this.boxStyle = boxStyle;
        this.textStyle = textStyle;
    }

    _createClass(ChartAnnotations, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartAnnotations",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    boxStyle: ChartBoxStyle,
                    textStyle: ChartTextStyle
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartAnnotations;
}();
setType("TheGamma.GoogleCharts.Options.ChartAnnotations", ChartAnnotations);
var ChartCrosshairFocused = function () {
    function ChartCrosshairFocused(color, opacity) {
        _classCallCheck(this, ChartCrosshairFocused);

        this.color = color;
        this.opacity = opacity;
    }

    _createClass(ChartCrosshairFocused, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartCrosshairFocused",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    color: "string",
                    opacity: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartCrosshairFocused;
}();
setType("TheGamma.GoogleCharts.Options.ChartCrosshairFocused", ChartCrosshairFocused);
var ChartCrosshairSelected = function () {
    function ChartCrosshairSelected(color, opacity) {
        _classCallCheck(this, ChartCrosshairSelected);

        this.color = color;
        this.opacity = opacity;
    }

    _createClass(ChartCrosshairSelected, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartCrosshairSelected",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    color: "string",
                    opacity: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartCrosshairSelected;
}();
setType("TheGamma.GoogleCharts.Options.ChartCrosshairSelected", ChartCrosshairSelected);
var ChartCrosshair = function () {
    function ChartCrosshair(color, focused, opacity, orientation, selected, trigger) {
        _classCallCheck(this, ChartCrosshair);

        this.color = color;
        this.focused = focused;
        this.opacity = opacity;
        this.orientation = orientation;
        this.selected = selected;
        this.trigger = trigger;
    }

    _createClass(ChartCrosshair, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartCrosshair",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    color: "string",
                    focused: ChartCrosshairFocused,
                    opacity: "number",
                    orientation: "string",
                    selected: ChartCrosshairSelected,
                    trigger: "string"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartCrosshair;
}();
setType("TheGamma.GoogleCharts.Options.ChartCrosshair", ChartCrosshair);
var ChartExplorer = function () {
    function ChartExplorer(actions, axis, keepInBounds, maxZoomIn, maxZoomOut, zoomDelta) {
        _classCallCheck(this, ChartExplorer);

        this.actions = actions;
        this.axis = axis;
        this.keepInBounds = keepInBounds;
        this.maxZoomIn = maxZoomIn;
        this.maxZoomOut = maxZoomOut;
        this.zoomDelta = zoomDelta;
    }

    _createClass(ChartExplorer, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartExplorer",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    actions: FArray("string"),
                    axis: "string",
                    keepInBounds: "boolean",
                    maxZoomIn: "number",
                    maxZoomOut: "number",
                    zoomDelta: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartExplorer;
}();
setType("TheGamma.GoogleCharts.Options.ChartExplorer", ChartExplorer);
var ChartStroke = function () {
    function ChartStroke(stroke, strokeWidth, fill) {
        _classCallCheck(this, ChartStroke);

        this.stroke = stroke;
        this.strokeWidth = strokeWidth;
        this.fill = fill;
    }

    _createClass(ChartStroke, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartStroke",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    stroke: "string",
                    strokeWidth: "number",
                    fill: "string"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartStroke;
}();
setType("TheGamma.GoogleCharts.Options.ChartStroke", ChartStroke);
var ChartArea = function () {
    function ChartArea(top, left, width, height) {
        _classCallCheck(this, ChartArea);

        this.top = top;
        this.left = left;
        this.width = width;
        this.height = height;
    }

    _createClass(ChartArea, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartArea",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    top: Any,
                    left: Any,
                    width: Any,
                    height: Any
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return ChartArea;
}();
setType("TheGamma.GoogleCharts.Options.ChartArea", ChartArea);
var TransitionAnimation = function () {
    function TransitionAnimation(duration, easing) {
        _classCallCheck(this, TransitionAnimation);

        this.duration = duration;
        this.easing = easing;
    }

    _createClass(TransitionAnimation, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.TransitionAnimation",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    duration: "number",
                    easing: "string"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return TransitionAnimation;
}();
setType("TheGamma.GoogleCharts.Options.TransitionAnimation", TransitionAnimation);
var ChartGridlines = function () {
    function ChartGridlines(color, count) {
        _classCallCheck(this, ChartGridlines);

        this.color = color;
        this.count = count;
    }

    _createClass(ChartGridlines, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartGridlines",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    color: "string",
                    count: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartGridlines;
}();
setType("TheGamma.GoogleCharts.Options.ChartGridlines", ChartGridlines);
var ChartViewWindow = function () {
    function ChartViewWindow(max, min) {
        _classCallCheck(this, ChartViewWindow);

        this.max = max;
        this.min = min;
    }

    _createClass(ChartViewWindow, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartViewWindow",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    max: "number",
                    min: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartViewWindow;
}();
setType("TheGamma.GoogleCharts.Options.ChartViewWindow", ChartViewWindow);
var ChartAxis = function () {
    function ChartAxis(baseline, baselineColor, direction, format, gridlines, minorGridlines, logScale, textPosition, textStyle, ticks, title, titleTextStyle, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode, viewWindow) {
        _classCallCheck(this, ChartAxis);

        this.baseline = baseline;
        this.baselineColor = baselineColor;
        this.direction = direction;
        this.format = format;
        this.gridlines = gridlines;
        this.minorGridlines = minorGridlines;
        this.logScale = logScale;
        this.textPosition = textPosition;
        this.textStyle = textStyle;
        this.ticks = ticks;
        this.title = title;
        this.titleTextStyle = titleTextStyle;
        this.allowContainerBoundaryTextCufoff = allowContainerBoundaryTextCufoff;
        this.slantedText = slantedText;
        this.slantedTextAngle = slantedTextAngle;
        this.maxAlternation = maxAlternation;
        this.maxTextLines = maxTextLines;
        this.minTextSpacing = minTextSpacing;
        this.showTextEvery = showTextEvery;
        this.maxValue = maxValue;
        this.minValue = minValue;
        this.viewWindowMode = viewWindowMode;
        this.viewWindow = viewWindow;
    }

    _createClass(ChartAxis, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartAxis",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    baseline: "number",
                    baselineColor: "string",
                    direction: "number",
                    format: "string",
                    gridlines: ChartGridlines,
                    minorGridlines: ChartGridlines,
                    logScale: "boolean",
                    textPosition: "string",
                    textStyle: ChartTextStyle,
                    ticks: FArray(Any),
                    title: "string",
                    titleTextStyle: ChartTextStyle,
                    allowContainerBoundaryTextCufoff: "boolean",
                    slantedText: "boolean",
                    slantedTextAngle: "number",
                    maxAlternation: "number",
                    maxTextLines: "number",
                    minTextSpacing: "number",
                    showTextEvery: "number",
                    maxValue: "number",
                    minValue: "number",
                    viewWindowMode: "string",
                    viewWindow: ChartViewWindow
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return ChartAxis;
}();
setType("TheGamma.GoogleCharts.Options.ChartAxis", ChartAxis);
var ChartBoundingBox = function () {
    function ChartBoundingBox(left, top, width, height) {
        _classCallCheck(this, ChartBoundingBox);

        this.left = left;
        this.top = top;
        this.width = width;
        this.height = height;
    }

    _createClass(ChartBoundingBox, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartBoundingBox",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    left: "number",
                    top: "number",
                    width: "number",
                    height: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartBoundingBox;
}();
setType("TheGamma.GoogleCharts.Options.ChartBoundingBox", ChartBoundingBox);
var GroupWidth = function () {
    function GroupWidth(groupWidth) {
        _classCallCheck(this, GroupWidth);

        this.groupWidth = groupWidth;
    }

    _createClass(GroupWidth, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.GroupWidth",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    groupWidth: Any
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return GroupWidth;
}();
setType("TheGamma.GoogleCharts.Options.GroupWidth", GroupWidth);
var Trendline = function () {
    function Trendline(color, lineWidth, labelInLegend, opacity, pointSize, pointsVisible, showR2, type, visibleInLegend) {
        _classCallCheck(this, Trendline);

        this.color = color;
        this.lineWidth = lineWidth;
        this.labelInLegend = labelInLegend;
        this.opacity = opacity;
        this.pointSize = pointSize;
        this.pointsVisible = pointsVisible;
        this.showR2 = showR2;
        this.type = type;
        this.visibleInLegend = visibleInLegend;
    }

    _createClass(Trendline, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.Trendline",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    color: "string",
                    lineWidth: "number",
                    labelInLegend: "string",
                    opacity: "number",
                    pointSize: "number",
                    pointsVisible: "boolean",
                    showR2: "boolean",
                    type: "string",
                    visibleInLegend: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return Trendline;
}();
setType("TheGamma.GoogleCharts.Options.Trendline", Trendline);
var ScatterChartOptions = function () {
    function ScatterChartOptions(aggregationTarget, animation, annotations, axisTitlesPosition, backgroundColor, chartArea, colors, crosshair, curveType, dataOpacity, enableInteractivity, explorer, fontSize, fontName, forceIFrame, hAxis, height, legend, lineWidth, pointSize, selectionMode, series, theme, title, titlePosition, titleTextStyle, tooltip, trendlines, vAxis, width) {
        _classCallCheck(this, ScatterChartOptions);

        this.aggregationTarget = aggregationTarget;
        this.animation = animation;
        this.annotations = annotations;
        this.axisTitlesPosition = axisTitlesPosition;
        this.backgroundColor = backgroundColor;
        this.chartArea = chartArea;
        this.colors = colors;
        this.crosshair = crosshair;
        this.curveType = curveType;
        this.dataOpacity = dataOpacity;
        this.enableInteractivity = enableInteractivity;
        this.explorer = explorer;
        this.fontSize = fontSize;
        this.fontName = fontName;
        this.forceIFrame = forceIFrame;
        this.hAxis = hAxis;
        this.height = height;
        this.legend = legend;
        this.lineWidth = lineWidth;
        this.pointSize = pointSize;
        this.selectionMode = selectionMode;
        this.series = series;
        this.theme = theme;
        this.title = title;
        this.titlePosition = titlePosition;
        this.titleTextStyle = titleTextStyle;
        this.tooltip = tooltip;
        this.trendlines = trendlines;
        this.vAxis = vAxis;
        this.width = width;
    }

    _createClass(ScatterChartOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ScatterChartOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    aggregationTarget: "string",
                    animation: TransitionAnimation,
                    annotations: ChartAnnotations,
                    axisTitlesPosition: "string",
                    backgroundColor: Any,
                    chartArea: ChartArea,
                    colors: FArray("string"),
                    crosshair: ChartCrosshair,
                    curveType: "string",
                    dataOpacity: "number",
                    enableInteractivity: "boolean",
                    explorer: ChartExplorer,
                    fontSize: "number",
                    fontName: "string",
                    forceIFrame: "boolean",
                    hAxis: ChartAxis,
                    height: "number",
                    legend: ChartLegend,
                    lineWidth: "number",
                    pointSize: "number",
                    selectionMode: "string",
                    series: Any,
                    theme: "string",
                    title: "string",
                    titlePosition: "string",
                    titleTextStyle: ChartTextStyle,
                    tooltip: ChartTooltip,
                    trendlines: FArray(Trendline),
                    vAxis: ChartAxis,
                    width: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return ScatterChartOptions;
}();
setType("TheGamma.GoogleCharts.Options.ScatterChartOptions", ScatterChartOptions);
var ColumnChartOptions = function () {
    function ColumnChartOptions(aggregationTarget, animation, annotations, axisTitlesPosition, backgroundColor, bar, chartArea, colors, enableInteractivity, focusTarget, fontSize, fontName, hAxis, height, isStacked, legend, reverseCategories, selectionMode, series, theme, title, titlePosition, titleTextStyle, tooltip, vAxes, vAxis, width) {
        _classCallCheck(this, ColumnChartOptions);

        this.aggregationTarget = aggregationTarget;
        this.animation = animation;
        this.annotations = annotations;
        this.axisTitlesPosition = axisTitlesPosition;
        this.backgroundColor = backgroundColor;
        this.bar = bar;
        this.chartArea = chartArea;
        this.colors = colors;
        this.enableInteractivity = enableInteractivity;
        this.focusTarget = focusTarget;
        this.fontSize = fontSize;
        this.fontName = fontName;
        this.hAxis = hAxis;
        this.height = height;
        this.isStacked = isStacked;
        this.legend = legend;
        this.reverseCategories = reverseCategories;
        this.selectionMode = selectionMode;
        this.series = series;
        this.theme = theme;
        this.title = title;
        this.titlePosition = titlePosition;
        this.titleTextStyle = titleTextStyle;
        this.tooltip = tooltip;
        this.vAxes = vAxes;
        this.vAxis = vAxis;
        this.width = width;
    }

    _createClass(ColumnChartOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ColumnChartOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    aggregationTarget: "string",
                    animation: TransitionAnimation,
                    annotations: ChartAnnotations,
                    axisTitlesPosition: "string",
                    backgroundColor: Any,
                    bar: GroupWidth,
                    chartArea: ChartArea,
                    colors: FArray("string"),
                    enableInteractivity: "boolean",
                    focusTarget: "string",
                    fontSize: "number",
                    fontName: "string",
                    hAxis: ChartAxis,
                    height: "number",
                    isStacked: "boolean",
                    legend: ChartLegend,
                    reverseCategories: "boolean",
                    selectionMode: "string",
                    series: Any,
                    theme: "string",
                    title: "string",
                    titlePosition: "string",
                    titleTextStyle: ChartTextStyle,
                    tooltip: ChartTooltip,
                    vAxes: Any,
                    vAxis: ChartAxis,
                    width: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return ColumnChartOptions;
}();
setType("TheGamma.GoogleCharts.Options.ColumnChartOptions", ColumnChartOptions);
var LineChartOptions = function () {
    function LineChartOptions(aggregationTarget, animation, annotations, axisTitlesPosition, backgroundColor, chartArea, colors, crosshair, curveType, dataOpacity, enableInteractivity, explorer, focusTarget, fontSize, fontName, hAxis, height, interpolateNulls, legend, lineWidth, orientation, pointSize, reverseCategories, selectionMode, series, theme, title, titlePosition, titleTextStyle, tooltip, vAxes, vAxis, width) {
        _classCallCheck(this, LineChartOptions);

        this.aggregationTarget = aggregationTarget;
        this.animation = animation;
        this.annotations = annotations;
        this.axisTitlesPosition = axisTitlesPosition;
        this.backgroundColor = backgroundColor;
        this.chartArea = chartArea;
        this.colors = colors;
        this.crosshair = crosshair;
        this.curveType = curveType;
        this.dataOpacity = dataOpacity;
        this.enableInteractivity = enableInteractivity;
        this.explorer = explorer;
        this.focusTarget = focusTarget;
        this.fontSize = fontSize;
        this.fontName = fontName;
        this.hAxis = hAxis;
        this.height = height;
        this.interpolateNulls = interpolateNulls;
        this.legend = legend;
        this.lineWidth = lineWidth;
        this.orientation = orientation;
        this.pointSize = pointSize;
        this.reverseCategories = reverseCategories;
        this.selectionMode = selectionMode;
        this.series = series;
        this.theme = theme;
        this.title = title;
        this.titlePosition = titlePosition;
        this.titleTextStyle = titleTextStyle;
        this.tooltip = tooltip;
        this.vAxes = vAxes;
        this.vAxis = vAxis;
        this.width = width;
    }

    _createClass(LineChartOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.LineChartOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    aggregationTarget: "string",
                    animation: TransitionAnimation,
                    annotations: ChartAnnotations,
                    axisTitlesPosition: "string",
                    backgroundColor: Any,
                    chartArea: ChartArea,
                    colors: FArray("string"),
                    crosshair: ChartCrosshair,
                    curveType: "string",
                    dataOpacity: "number",
                    enableInteractivity: "boolean",
                    explorer: ChartExplorer,
                    focusTarget: "string",
                    fontSize: "number",
                    fontName: "string",
                    hAxis: ChartAxis,
                    height: "number",
                    interpolateNulls: "boolean",
                    legend: ChartLegend,
                    lineWidth: "number",
                    orientation: "string",
                    pointSize: "number",
                    reverseCategories: "boolean",
                    selectionMode: "string",
                    series: Any,
                    theme: "string",
                    title: "string",
                    titlePosition: "string",
                    titleTextStyle: ChartTextStyle,
                    tooltip: ChartTooltip,
                    vAxes: Any,
                    vAxis: ChartAxis,
                    width: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return LineChartOptions;
}();
setType("TheGamma.GoogleCharts.Options.LineChartOptions", LineChartOptions);
var BarChartOptions = function () {
    function BarChartOptions(aggregationTarget, animation, annotations, axisTitlesPosition, backgroundColor, bar, chartArea, colors, dataOpacity, enableInteractivity, focusTarget, fontSize, fontName, hAxes, hAxis, height, isStacked, legend, reverseCategories, series, theme, title, titlePosition, titleTextStyle, tooltip, vAxes, vAxis, width) {
        _classCallCheck(this, BarChartOptions);

        this.aggregationTarget = aggregationTarget;
        this.animation = animation;
        this.annotations = annotations;
        this.axisTitlesPosition = axisTitlesPosition;
        this.backgroundColor = backgroundColor;
        this.bar = bar;
        this.chartArea = chartArea;
        this.colors = colors;
        this.dataOpacity = dataOpacity;
        this.enableInteractivity = enableInteractivity;
        this.focusTarget = focusTarget;
        this.fontSize = fontSize;
        this.fontName = fontName;
        this.hAxes = hAxes;
        this.hAxis = hAxis;
        this.height = height;
        this.isStacked = isStacked;
        this.legend = legend;
        this.reverseCategories = reverseCategories;
        this.series = series;
        this.theme = theme;
        this.title = title;
        this.titlePosition = titlePosition;
        this.titleTextStyle = titleTextStyle;
        this.tooltip = tooltip;
        this.vAxes = vAxes;
        this.vAxis = vAxis;
        this.width = width;
    }

    _createClass(BarChartOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.BarChartOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    aggregationTarget: "string",
                    animation: TransitionAnimation,
                    annotations: ChartAnnotations,
                    axisTitlesPosition: "string",
                    backgroundColor: Any,
                    bar: GroupWidth,
                    chartArea: ChartArea,
                    colors: FArray("string"),
                    dataOpacity: "number",
                    enableInteractivity: "boolean",
                    focusTarget: "string",
                    fontSize: "number",
                    fontName: "string",
                    hAxes: Any,
                    hAxis: ChartAxis,
                    height: "number",
                    isStacked: "boolean",
                    legend: ChartLegend,
                    reverseCategories: "boolean",
                    series: Any,
                    theme: "string",
                    title: "string",
                    titlePosition: "string",
                    titleTextStyle: ChartTextStyle,
                    tooltip: ChartTooltip,
                    vAxes: Any,
                    vAxis: ChartAxis,
                    width: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return BarChartOptions;
}();
setType("TheGamma.GoogleCharts.Options.BarChartOptions", BarChartOptions);
var HistogramHistogram = function () {
    function HistogramHistogram(bucketSize, hideBucketItems, lastBucketPercentile) {
        _classCallCheck(this, HistogramHistogram);

        this.bucketSize = bucketSize;
        this.hideBucketItems = hideBucketItems;
        this.lastBucketPercentile = lastBucketPercentile;
    }

    _createClass(HistogramHistogram, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.HistogramHistogram",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    bucketSize: "number",
                    hideBucketItems: "boolean",
                    lastBucketPercentile: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return HistogramHistogram;
}();
setType("TheGamma.GoogleCharts.Options.HistogramHistogram", HistogramHistogram);
var HistogramOptions = function () {
    function HistogramOptions(animation, axisTitlesPosition, backgroundColor, bar, chartArea, colors, dataOpacity, enableInteractivity, focusTarget, fontSize, fontName, hAxis, histogram, height, interpolateNulls, isStacked, legend, orientation, reverseCategories, series, theme, title, titlePosition, titleTextStyle, tooltip, vAxes, vAxis, width) {
        _classCallCheck(this, HistogramOptions);

        this.animation = animation;
        this.axisTitlesPosition = axisTitlesPosition;
        this.backgroundColor = backgroundColor;
        this.bar = bar;
        this.chartArea = chartArea;
        this.colors = colors;
        this.dataOpacity = dataOpacity;
        this.enableInteractivity = enableInteractivity;
        this.focusTarget = focusTarget;
        this.fontSize = fontSize;
        this.fontName = fontName;
        this.hAxis = hAxis;
        this.histogram = histogram;
        this.height = height;
        this.interpolateNulls = interpolateNulls;
        this.isStacked = isStacked;
        this.legend = legend;
        this.orientation = orientation;
        this.reverseCategories = reverseCategories;
        this.series = series;
        this.theme = theme;
        this.title = title;
        this.titlePosition = titlePosition;
        this.titleTextStyle = titleTextStyle;
        this.tooltip = tooltip;
        this.vAxes = vAxes;
        this.vAxis = vAxis;
        this.width = width;
    }

    _createClass(HistogramOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.HistogramOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    animation: TransitionAnimation,
                    axisTitlesPosition: "string",
                    backgroundColor: Any,
                    bar: GroupWidth,
                    chartArea: ChartArea,
                    colors: FArray("string"),
                    dataOpacity: "number",
                    enableInteractivity: "boolean",
                    focusTarget: "string",
                    fontSize: "number",
                    fontName: "string",
                    hAxis: ChartAxis,
                    histogram: HistogramHistogram,
                    height: "number",
                    interpolateNulls: "boolean",
                    isStacked: "boolean",
                    legend: ChartLegend,
                    orientation: "string",
                    reverseCategories: "boolean",
                    series: Any,
                    theme: "string",
                    title: "string",
                    titlePosition: "string",
                    titleTextStyle: ChartTextStyle,
                    tooltip: ChartTooltip,
                    vAxes: Any,
                    vAxis: ChartAxis,
                    width: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return HistogramOptions;
}();
setType("TheGamma.GoogleCharts.Options.HistogramOptions", HistogramOptions);
var AreaChartOptions = function () {
    function AreaChartOptions(aggregationTarget, animation, areaOpacity, axisTitlesPosition, backgroundColor, chartArea, colors, crosshair, dataOpacity, enableInteractivity, explorer, focusTarget, fontSize, fontName, hAxis, height, interpolateNulls, isStacked, legend, lineWidth, orientation, pointSize, reverseCategories, selectionMode, series, theme, title, titlePosition, titleTextStyle, tooltip, vAxes, vAxis, width) {
        _classCallCheck(this, AreaChartOptions);

        this.aggregationTarget = aggregationTarget;
        this.animation = animation;
        this.areaOpacity = areaOpacity;
        this.axisTitlesPosition = axisTitlesPosition;
        this.backgroundColor = backgroundColor;
        this.chartArea = chartArea;
        this.colors = colors;
        this.crosshair = crosshair;
        this.dataOpacity = dataOpacity;
        this.enableInteractivity = enableInteractivity;
        this.explorer = explorer;
        this.focusTarget = focusTarget;
        this.fontSize = fontSize;
        this.fontName = fontName;
        this.hAxis = hAxis;
        this.height = height;
        this.interpolateNulls = interpolateNulls;
        this.isStacked = isStacked;
        this.legend = legend;
        this.lineWidth = lineWidth;
        this.orientation = orientation;
        this.pointSize = pointSize;
        this.reverseCategories = reverseCategories;
        this.selectionMode = selectionMode;
        this.series = series;
        this.theme = theme;
        this.title = title;
        this.titlePosition = titlePosition;
        this.titleTextStyle = titleTextStyle;
        this.tooltip = tooltip;
        this.vAxes = vAxes;
        this.vAxis = vAxis;
        this.width = width;
    }

    _createClass(AreaChartOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.AreaChartOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    aggregationTarget: "string",
                    animation: TransitionAnimation,
                    areaOpacity: "number",
                    axisTitlesPosition: "string",
                    backgroundColor: Any,
                    chartArea: ChartArea,
                    colors: FArray("string"),
                    crosshair: ChartCrosshair,
                    dataOpacity: "number",
                    enableInteractivity: "boolean",
                    explorer: ChartExplorer,
                    focusTarget: "string",
                    fontSize: "number",
                    fontName: "string",
                    hAxis: ChartAxis,
                    height: "number",
                    interpolateNulls: "boolean",
                    isStacked: "boolean",
                    legend: ChartLegend,
                    lineWidth: "number",
                    orientation: "string",
                    pointSize: "number",
                    reverseCategories: "boolean",
                    selectionMode: "string",
                    series: Any,
                    theme: "string",
                    title: "string",
                    titlePosition: "string",
                    titleTextStyle: ChartTextStyle,
                    tooltip: ChartTooltip,
                    vAxes: Any,
                    vAxis: ChartAxis,
                    width: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return AreaChartOptions;
}();
setType("TheGamma.GoogleCharts.Options.AreaChartOptions", AreaChartOptions);
var AnnotationChartOptions = function () {
    function AnnotationChartOptions(allowHtml, allValuesSuffix, annotationsWidth, colors, dateFormat, displayAnnotations, displayAnnotationsFilter, displayDateTimeBarSeparator, displayExactValues, displayLegendDots, displayLegendValues, displayRangeSelector, displayZoomButtons, fill, legendPosition, max, min, numberFormats, scaleColumns, scaleFormat, scaleType, thickness, zoomEndTime, zoomStartTime) {
        _classCallCheck(this, AnnotationChartOptions);

        this.allowHtml = allowHtml;
        this.allValuesSuffix = allValuesSuffix;
        this.annotationsWidth = annotationsWidth;
        this.colors = colors;
        this.dateFormat = dateFormat;
        this.displayAnnotations = displayAnnotations;
        this.displayAnnotationsFilter = displayAnnotationsFilter;
        this.displayDateTimeBarSeparator = displayDateTimeBarSeparator;
        this.displayExactValues = displayExactValues;
        this.displayLegendDots = displayLegendDots;
        this.displayLegendValues = displayLegendValues;
        this.displayRangeSelector = displayRangeSelector;
        this.displayZoomButtons = displayZoomButtons;
        this.fill = fill;
        this.legendPosition = legendPosition;
        this.max = max;
        this.min = min;
        this.numberFormats = numberFormats;
        this.scaleColumns = scaleColumns;
        this.scaleFormat = scaleFormat;
        this.scaleType = scaleType;
        this.thickness = thickness;
        this.zoomEndTime = zoomEndTime;
        this.zoomStartTime = zoomStartTime;
    }

    _createClass(AnnotationChartOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.AnnotationChartOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    allowHtml: "boolean",
                    allValuesSuffix: "string",
                    annotationsWidth: "number",
                    colors: FArray("string"),
                    dateFormat: "string",
                    displayAnnotations: "boolean",
                    displayAnnotationsFilter: "boolean",
                    displayDateTimeBarSeparator: "boolean",
                    displayExactValues: "boolean",
                    displayLegendDots: "boolean",
                    displayLegendValues: "boolean",
                    displayRangeSelector: "boolean",
                    displayZoomButtons: "boolean",
                    fill: "number",
                    legendPosition: "string",
                    max: "number",
                    min: "number",
                    numberFormats: Any,
                    scaleColumns: FArray("number"),
                    scaleFormat: "string",
                    scaleType: "string",
                    thickness: "number",
                    zoomEndTime: Date,
                    zoomStartTime: Date
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return AnnotationChartOptions;
}();
setType("TheGamma.GoogleCharts.Options.AnnotationChartOptions", AnnotationChartOptions);
var SteppedAreaChartOptions = function () {
    function SteppedAreaChartOptions(aggregationTarget, animation, areaOpacity, axisTitlesPosition, backgroundColor, chartArea, colors, connectSteps, enableInteractivity, focusTarget, fontSize, fontName, hAxis, height, interpolateNulls, isStacked, legend, reverseCategories, selectionMode, series, theme, title, titlePosition, titleTextStyle, tooltip, vAxes, vAxis, width) {
        _classCallCheck(this, SteppedAreaChartOptions);

        this.aggregationTarget = aggregationTarget;
        this.animation = animation;
        this.areaOpacity = areaOpacity;
        this.axisTitlesPosition = axisTitlesPosition;
        this.backgroundColor = backgroundColor;
        this.chartArea = chartArea;
        this.colors = colors;
        this.connectSteps = connectSteps;
        this.enableInteractivity = enableInteractivity;
        this.focusTarget = focusTarget;
        this.fontSize = fontSize;
        this.fontName = fontName;
        this.hAxis = hAxis;
        this.height = height;
        this.interpolateNulls = interpolateNulls;
        this.isStacked = isStacked;
        this.legend = legend;
        this.reverseCategories = reverseCategories;
        this.selectionMode = selectionMode;
        this.series = series;
        this.theme = theme;
        this.title = title;
        this.titlePosition = titlePosition;
        this.titleTextStyle = titleTextStyle;
        this.tooltip = tooltip;
        this.vAxes = vAxes;
        this.vAxis = vAxis;
        this.width = width;
    }

    _createClass(SteppedAreaChartOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.SteppedAreaChartOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    aggregationTarget: "string",
                    animation: TransitionAnimation,
                    areaOpacity: "number",
                    axisTitlesPosition: "string",
                    backgroundColor: Any,
                    chartArea: ChartArea,
                    colors: FArray("string"),
                    connectSteps: "boolean",
                    enableInteractivity: "boolean",
                    focusTarget: "string",
                    fontSize: "number",
                    fontName: "string",
                    hAxis: ChartAxis,
                    height: "number",
                    interpolateNulls: "boolean",
                    isStacked: "boolean",
                    legend: ChartLegend,
                    reverseCategories: "boolean",
                    selectionMode: "string",
                    series: Any,
                    theme: "string",
                    title: "string",
                    titlePosition: "string",
                    titleTextStyle: ChartTextStyle,
                    tooltip: ChartTooltip,
                    vAxes: Any,
                    vAxis: ChartAxis,
                    width: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return SteppedAreaChartOptions;
}();
setType("TheGamma.GoogleCharts.Options.SteppedAreaChartOptions", SteppedAreaChartOptions);
var PieChartOptions = function () {
    function PieChartOptions(backgroundColor, chartArea, colors, enableInteractivity, fontSize, fontName, height, is3D, legend, pieHole, pieSliceBorderColor, pieSliceText, pieSliceTextStyle, pieStartAngle, reverseCategories, pieResidueSliceColor, pieResidueSliceLabel, slices, sliceVisibilityThreshold, title, titleTextStyle, tooltip, width) {
        _classCallCheck(this, PieChartOptions);

        this.backgroundColor = backgroundColor;
        this.chartArea = chartArea;
        this.colors = colors;
        this.enableInteractivity = enableInteractivity;
        this.fontSize = fontSize;
        this.fontName = fontName;
        this.height = height;
        this.is3D = is3D;
        this.legend = legend;
        this.pieHole = pieHole;
        this.pieSliceBorderColor = pieSliceBorderColor;
        this.pieSliceText = pieSliceText;
        this.pieSliceTextStyle = pieSliceTextStyle;
        this.pieStartAngle = pieStartAngle;
        this.reverseCategories = reverseCategories;
        this.pieResidueSliceColor = pieResidueSliceColor;
        this.pieResidueSliceLabel = pieResidueSliceLabel;
        this.slices = slices;
        this.sliceVisibilityThreshold = sliceVisibilityThreshold;
        this.title = title;
        this.titleTextStyle = titleTextStyle;
        this.tooltip = tooltip;
        this.width = width;
    }

    _createClass(PieChartOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.PieChartOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    backgroundColor: Any,
                    chartArea: ChartArea,
                    colors: FArray("string"),
                    enableInteractivity: "boolean",
                    fontSize: "number",
                    fontName: "string",
                    height: "number",
                    is3D: "boolean",
                    legend: ChartLegend,
                    pieHole: "number",
                    pieSliceBorderColor: "string",
                    pieSliceText: "string",
                    pieSliceTextStyle: ChartTextStyle,
                    pieStartAngle: "number",
                    reverseCategories: "boolean",
                    pieResidueSliceColor: "string",
                    pieResidueSliceLabel: "string",
                    slices: Any,
                    sliceVisibilityThreshold: "number",
                    title: "string",
                    titleTextStyle: ChartTextStyle,
                    tooltip: ChartTooltip,
                    width: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return PieChartOptions;
}();
setType("TheGamma.GoogleCharts.Options.PieChartOptions", PieChartOptions);
var ChartBubble = function () {
    function ChartBubble(opacity, stroke, textStyle) {
        _classCallCheck(this, ChartBubble);

        this.opacity = opacity;
        this.stroke = stroke;
        this.textStyle = textStyle;
    }

    _createClass(ChartBubble, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.ChartBubble",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    opacity: "number",
                    stroke: "string",
                    textStyle: ChartTextStyle
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return ChartBubble;
}();
setType("TheGamma.GoogleCharts.Options.ChartBubble", ChartBubble);
var BubbleChartOptions = function () {
    function BubbleChartOptions(animation, axisTitlesPosition, backgroundColor, bubble, chartArea, colors, colorAxis, enableInteractivity, explorer, fontSize, fontName, forceIFrame, hAxis, height, legend, selectionMode, series, sizeAxis, sortBubblesBySize, theme, title, titlePosition, titleTextStyle, tooltip, vAxis, width) {
        _classCallCheck(this, BubbleChartOptions);

        this.animation = animation;
        this.axisTitlesPosition = axisTitlesPosition;
        this.backgroundColor = backgroundColor;
        this.bubble = bubble;
        this.chartArea = chartArea;
        this.colors = colors;
        this.colorAxis = colorAxis;
        this.enableInteractivity = enableInteractivity;
        this.explorer = explorer;
        this.fontSize = fontSize;
        this.fontName = fontName;
        this.forceIFrame = forceIFrame;
        this.hAxis = hAxis;
        this.height = height;
        this.legend = legend;
        this.selectionMode = selectionMode;
        this.series = series;
        this.sizeAxis = sizeAxis;
        this.sortBubblesBySize = sortBubblesBySize;
        this.theme = theme;
        this.title = title;
        this.titlePosition = titlePosition;
        this.titleTextStyle = titleTextStyle;
        this.tooltip = tooltip;
        this.vAxis = vAxis;
        this.width = width;
    }

    _createClass(BubbleChartOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.BubbleChartOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    animation: TransitionAnimation,
                    axisTitlesPosition: "string",
                    backgroundColor: Any,
                    bubble: ChartBubble,
                    chartArea: ChartArea,
                    colors: FArray("string"),
                    colorAxis: ChartColorAxis,
                    enableInteractivity: "boolean",
                    explorer: ChartExplorer,
                    fontSize: "number",
                    fontName: "string",
                    forceIFrame: "boolean",
                    hAxis: ChartAxis,
                    height: "number",
                    legend: ChartLegend,
                    selectionMode: "string",
                    series: Any,
                    sizeAxis: ChartSizeAxis,
                    sortBubblesBySize: "boolean",
                    theme: "string",
                    title: "string",
                    titlePosition: "string",
                    titleTextStyle: ChartTextStyle,
                    tooltip: ChartTooltip,
                    vAxis: ChartAxis,
                    width: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return BubbleChartOptions;
}();
setType("TheGamma.GoogleCharts.Options.BubbleChartOptions", BubbleChartOptions);
var TreeMapOptions = function () {
    function TreeMapOptions(fontColor, fontFamily, fontSize, forceIFrame, headerColor, headerHeight, headerHighlightColor, hintOpacity, maxColor, maxDepth, maxHighlightColor, maxPostDepth, maxColorValue, midColor, midHighlightColor, minColor, minHighlightColor, minColorValue, showScale, showTooltips, textStyle, title, titleTextStyle, useWeightedAverageForAggregation) {
        _classCallCheck(this, TreeMapOptions);

        this.fontColor = fontColor;
        this.fontFamily = fontFamily;
        this.fontSize = fontSize;
        this.forceIFrame = forceIFrame;
        this.headerColor = headerColor;
        this.headerHeight = headerHeight;
        this.headerHighlightColor = headerHighlightColor;
        this.hintOpacity = hintOpacity;
        this.maxColor = maxColor;
        this.maxDepth = maxDepth;
        this.maxHighlightColor = maxHighlightColor;
        this.maxPostDepth = maxPostDepth;
        this.maxColorValue = maxColorValue;
        this.midColor = midColor;
        this.midHighlightColor = midHighlightColor;
        this.minColor = minColor;
        this.minHighlightColor = minHighlightColor;
        this.minColorValue = minColorValue;
        this.showScale = showScale;
        this.showTooltips = showTooltips;
        this.textStyle = textStyle;
        this.title = title;
        this.titleTextStyle = titleTextStyle;
        this.useWeightedAverageForAggregation = useWeightedAverageForAggregation;
    }

    _createClass(TreeMapOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.TreeMapOptions",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    fontColor: "string",
                    fontFamily: "string",
                    fontSize: "number",
                    forceIFrame: "boolean",
                    headerColor: "string",
                    headerHeight: "number",
                    headerHighlightColor: "string",
                    hintOpacity: "number",
                    maxColor: "string",
                    maxDepth: "number",
                    maxHighlightColor: "string",
                    maxPostDepth: "number",
                    maxColorValue: "number",
                    midColor: "string",
                    midHighlightColor: "string",
                    minColor: "string",
                    minHighlightColor: "string",
                    minColorValue: "number",
                    showScale: "boolean",
                    showTooltips: "boolean",
                    textStyle: ChartTextStyle,
                    title: "string",
                    titleTextStyle: ChartTextStyle,
                    useWeightedAverageForAggregation: "boolean"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return TreeMapOptions;
}();
setType("TheGamma.GoogleCharts.Options.TreeMapOptions", TreeMapOptions);
var CssClassNames = function () {
    function CssClassNames(headerRow, tableRow, oddTableRow, selectedTableRow, hoverTableRow, headerCell, tableCell, rowNumberCell) {
        _classCallCheck(this, CssClassNames);

        this.headerRow = headerRow;
        this.tableRow = tableRow;
        this.oddTableRow = oddTableRow;
        this.selectedTableRow = selectedTableRow;
        this.hoverTableRow = hoverTableRow;
        this.headerCell = headerCell;
        this.tableCell = tableCell;
        this.rowNumberCell = rowNumberCell;
    }

    _createClass(CssClassNames, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.CssClassNames",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    headerRow: "string",
                    tableRow: "string",
                    oddTableRow: "string",
                    selectedTableRow: "string",
                    hoverTableRow: "string",
                    headerCell: "string",
                    tableCell: "string",
                    rowNumberCell: "string"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return CssClassNames;
}();
setType("TheGamma.GoogleCharts.Options.CssClassNames", CssClassNames);
var TableOptions = function () {
    function TableOptions(allowHtml, alternatingRowStyle, cssClassName, firstRowNumber, height, page, pageSize, rtlTable, scrollLeftStartPosition, showRowNumber, sort, sortAscending, sortColumn, startPage, width) {
        _classCallCheck(this, TableOptions);

        this.allowHtml = allowHtml;
        this.alternatingRowStyle = alternatingRowStyle;
        this.cssClassName = cssClassName;
        this.firstRowNumber = firstRowNumber;
        this.height = height;
        this.page = page;
        this.pageSize = pageSize;
        this.rtlTable = rtlTable;
        this.scrollLeftStartPosition = scrollLeftStartPosition;
        this.showRowNumber = showRowNumber;
        this.sort = sort;
        this.sortAscending = sortAscending;
        this.sortColumn = sortColumn;
        this.startPage = startPage;
        this.width = width;
    }

    _createClass(TableOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.TableOptions",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    allowHtml: "boolean",
                    alternatingRowStyle: "boolean",
                    cssClassName: CssClassNames,
                    firstRowNumber: "number",
                    height: "string",
                    page: "string",
                    pageSize: "number",
                    rtlTable: "boolean",
                    scrollLeftStartPosition: "number",
                    showRowNumber: "boolean",
                    sort: "string",
                    sortAscending: "boolean",
                    sortColumn: "number",
                    startPage: "number",
                    width: "string"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return TableOptions;
}();
setType("TheGamma.GoogleCharts.Options.TableOptions", TableOptions);
var LabelStyle = function () {
    function LabelStyle(color, fontName, fontSize) {
        _classCallCheck(this, LabelStyle);

        this.color = color;
        this.fontName = fontName;
        this.fontSize = fontSize;
    }

    _createClass(LabelStyle, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.LabelStyle",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    color: "string",
                    fontName: "string",
                    fontSize: "string"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return LabelStyle;
}();
setType("TheGamma.GoogleCharts.Options.LabelStyle", LabelStyle);
var TimelineTimeline = function () {
    function TimelineTimeline(barLabelStyle, colorByRowLabel, groupByRowLabel, rowLabelStyle, showRowLabels, singleColor) {
        _classCallCheck(this, TimelineTimeline);

        this.barLabelStyle = barLabelStyle;
        this.colorByRowLabel = colorByRowLabel;
        this.groupByRowLabel = groupByRowLabel;
        this.rowLabelStyle = rowLabelStyle;
        this.showRowLabels = showRowLabels;
        this.singleColor = singleColor;
    }

    _createClass(TimelineTimeline, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.TimelineTimeline",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    barLabelStyle: LabelStyle,
                    colorByRowLabel: "boolean",
                    groupByRowLabel: "boolean",
                    rowLabelStyle: LabelStyle,
                    showRowLabels: "boolean",
                    singleColor: "string"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return TimelineTimeline;
}();
setType("TheGamma.GoogleCharts.Options.TimelineTimeline", TimelineTimeline);
var TimelineOptions = function () {
    function TimelineOptions(avoidOverlappingGridLines, backgroundColor, colors, enableInteractivity, forceIFrame, height, timeline, width) {
        _classCallCheck(this, TimelineOptions);

        this.avoidOverlappingGridLines = avoidOverlappingGridLines;
        this.backgroundColor = backgroundColor;
        this.colors = colors;
        this.enableInteractivity = enableInteractivity;
        this.forceIFrame = forceIFrame;
        this.height = height;
        this.timeline = timeline;
        this.width = width;
    }

    _createClass(TimelineOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.TimelineOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    avoidOverlappingGridLines: "boolean",
                    backgroundColor: Any,
                    colors: FArray("string"),
                    enableInteractivity: "boolean",
                    forceIFrame: "boolean",
                    height: "number",
                    timeline: TimelineTimeline,
                    width: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return TimelineOptions;
}();
setType("TheGamma.GoogleCharts.Options.TimelineOptions", TimelineOptions);
var CandlestickCandlestick = function () {
    function CandlestickCandlestick(hollowIsRising, fallingColor, risingColor) {
        _classCallCheck(this, CandlestickCandlestick);

        this.hollowIsRising = hollowIsRising;
        this.fallingColor = fallingColor;
        this.risingColor = risingColor;
    }

    _createClass(CandlestickCandlestick, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.CandlestickCandlestick",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    hollowIsRising: "boolean",
                    fallingColor: ChartStroke,
                    risingColor: ChartStroke
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return CandlestickCandlestick;
}();
setType("TheGamma.GoogleCharts.Options.CandlestickCandlestick", CandlestickCandlestick);
var CandlestickChartOptions = function () {
    function CandlestickChartOptions(aggregationTarget, animation, axisTitlesPosition, backgroundColor, bar, candlestick, chartArea, colors, enableInteractivity, focusTarget, fontSize, fontName, hAxis, height, legend, orientation, reverseCategories, selectionMode, series, theme, title, titlePosition, titleTextStyle, tooltip, vAxes, vAxis, width) {
        _classCallCheck(this, CandlestickChartOptions);

        this.aggregationTarget = aggregationTarget;
        this.animation = animation;
        this.axisTitlesPosition = axisTitlesPosition;
        this.backgroundColor = backgroundColor;
        this.bar = bar;
        this.candlestick = candlestick;
        this.chartArea = chartArea;
        this.colors = colors;
        this.enableInteractivity = enableInteractivity;
        this.focusTarget = focusTarget;
        this.fontSize = fontSize;
        this.fontName = fontName;
        this.hAxis = hAxis;
        this.height = height;
        this.legend = legend;
        this.orientation = orientation;
        this.reverseCategories = reverseCategories;
        this.selectionMode = selectionMode;
        this.series = series;
        this.theme = theme;
        this.title = title;
        this.titlePosition = titlePosition;
        this.titleTextStyle = titleTextStyle;
        this.tooltip = tooltip;
        this.vAxes = vAxes;
        this.vAxis = vAxis;
        this.width = width;
    }

    _createClass(CandlestickChartOptions, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.GoogleCharts.Options.CandlestickChartOptions",
                interfaces: ["FSharpRecord", "System.IEquatable"],
                properties: {
                    aggregationTarget: "string",
                    animation: TransitionAnimation,
                    axisTitlesPosition: "string",
                    backgroundColor: Any,
                    bar: GroupWidth,
                    candlestick: CandlestickCandlestick,
                    chartArea: ChartArea,
                    colors: FArray("string"),
                    enableInteractivity: "boolean",
                    focusTarget: "string",
                    fontSize: "number",
                    fontName: "string",
                    hAxis: ChartAxis,
                    height: "number",
                    legend: ChartLegend,
                    orientation: "string",
                    reverseCategories: "boolean",
                    selectionMode: "string",
                    series: Any,
                    theme: "string",
                    title: "string",
                    titlePosition: "string",
                    titleTextStyle: ChartTextStyle,
                    tooltip: ChartTooltip,
                    vAxes: Any,
                    vAxis: ChartAxis,
                    width: "number"
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }]);

    return CandlestickChartOptions;
}();
setType("TheGamma.GoogleCharts.Options.CandlestickChartOptions", CandlestickChartOptions);

var Geo = function () {
  function Geo(data, typeName, options) {
    _classCallCheck(this, Geo);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Geo, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Geo",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: GeoChartOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (backgroundColor, datalessRegionColor, displayMode, enableRegionInteractivity, height, keepAspectRatio, region, markerOpacity, resolution, width) {
      var _this = this;

      var newOptions = function () {
        var backgroundColor_1 = Helpers.right(_this.options, "backgroundColor", backgroundColor);
        var datalessRegionColor_1 = Helpers.right(_this.options, "datalessRegionColor", datalessRegionColor);
        var displayMode_1 = Helpers.right(_this.options, "displayMode", displayMode);
        var enableRegionInteractivity_1 = Helpers.right(_this.options, "enableRegionInteractivity", enableRegionInteractivity);
        var height_1 = Helpers.right(_this.options, "height", height);
        var keepAspectRatio_1 = Helpers.right(_this.options, "keepAspectRatio", keepAspectRatio);
        var region_1 = Helpers.right(_this.options, "region", region);
        var markerOpacity_1 = Helpers.right(_this.options, "markerOpacity", markerOpacity);
        var resolution_1 = Helpers.right(_this.options, "resolution", resolution);
        var width_1 = Helpers.right(_this.options, "width", width);
        return new GeoChartOptions(backgroundColor_1, _this.options.colorAxis, datalessRegionColor_1, displayMode_1, enableRegionInteractivity_1, height_1, keepAspectRatio_1, _this.options.legend, region_1, _this.options.magnifyingGlass, markerOpacity_1, resolution_1, _this.options.sizeAxis, _this.options.tooltip, width_1);
      }();

      return new Geo(this.data, this.typeName, newOptions);
    }
  }, {
    key: "colorAxis",
    value: function (minValue, maxValue, values, colors) {
      var o = this.options.colorAxis;
      var newNested = new ChartColorAxis(Helpers.right(o, "minValue", minValue), Helpers.right(o, "maxValue", maxValue), Helpers.right(o, "values", function () {
        var $var21 = values;

        if ($var21 != null) {
          return function (source) {
            return Float64Array.from(source);
          }($var21);
        } else {
          return $var21;
        }
      }()), Helpers.right(o, "colors", function () {
        var $var22 = colors;

        if ($var22 != null) {
          return function (source) {
            return _Array$from(source);
          }($var22);
        } else {
          return $var22;
        }
      }()), Helpers.copy(o, "legend"));
      var options = new GeoChartOptions(this.options.backgroundColor, newNested, this.options.datalessRegionColor, this.options.displayMode, this.options.enableRegionInteractivity, this.options.height, this.options.keepAspectRatio, this.options.legend, this.options.region, this.options.magnifyingGlass, this.options.markerOpacity, this.options.resolution, this.options.sizeAxis, this.options.tooltip, this.options.width);
      return new Geo(this.data, this.typeName, options);
    }
  }, {
    key: "legend",
    value: function (alignment, maxLines, position, numberFormat) {
      var o = this.options.legend;

      var newNested = function () {
        var alignment_1 = Helpers.right(o, "alignment", alignment);
        var maxLines_1 = Helpers.right(o, "maxLines", maxLines);
        var position_1 = Helpers.right(o, "position", position);
        var numberFormat_1 = Helpers.right(o, "numberFormat", numberFormat);
        return new ChartLegend(alignment_1, maxLines_1, position_1, Helpers.copy(o, "textStyle"), numberFormat_1);
      }();

      var options = new GeoChartOptions(this.options.backgroundColor, this.options.colorAxis, this.options.datalessRegionColor, this.options.displayMode, this.options.enableRegionInteractivity, this.options.height, this.options.keepAspectRatio, newNested, this.options.region, this.options.magnifyingGlass, this.options.markerOpacity, this.options.resolution, this.options.sizeAxis, this.options.tooltip, this.options.width);
      return new Geo(this.data, this.typeName, options);
    }
  }, {
    key: "magnifyingGlass",
    value: function (enable, zoomFactor) {
      var o = this.options.magnifyingGlass;
      var newNested = new GeoChartMagnifyingGlass(Helpers.right(o, "enable", enable), Helpers.right(o, "zoomFactor", zoomFactor));
      var options = new GeoChartOptions(this.options.backgroundColor, this.options.colorAxis, this.options.datalessRegionColor, this.options.displayMode, this.options.enableRegionInteractivity, this.options.height, this.options.keepAspectRatio, this.options.legend, this.options.region, newNested, this.options.markerOpacity, this.options.resolution, this.options.sizeAxis, this.options.tooltip, this.options.width);
      return new Geo(this.data, this.typeName, options);
    }
  }, {
    key: "sizeAxis",
    value: function (maxSize, maxValue, minSize, minValue) {
      var o = this.options.sizeAxis;
      var newNested = new ChartSizeAxis(Helpers.right(o, "maxSize", maxSize), Helpers.right(o, "maxValue", maxValue), Helpers.right(o, "minSize", minSize), Helpers.right(o, "minValue", minValue));
      var options = new GeoChartOptions(this.options.backgroundColor, this.options.colorAxis, this.options.datalessRegionColor, this.options.displayMode, this.options.enableRegionInteractivity, this.options.height, this.options.keepAspectRatio, this.options.legend, this.options.region, this.options.magnifyingGlass, this.options.markerOpacity, this.options.resolution, newNested, this.options.tooltip, this.options.width);
      return new Geo(this.data, this.typeName, options);
    }
  }, {
    key: "tooltip",
    value: function (isHtml, showColorCode, trigger) {
      var o = this.options.tooltip;

      var newNested = function () {
        var isHtml_1 = Helpers.right(o, "isHtml", isHtml);
        var showColorCode_1 = Helpers.right(o, "showColorCode", showColorCode);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartTooltip(isHtml_1, showColorCode_1, Helpers.copy(o, "textStyle"), trigger_1);
      }();

      var options = new GeoChartOptions(this.options.backgroundColor, this.options.colorAxis, this.options.datalessRegionColor, this.options.displayMode, this.options.enableRegionInteractivity, this.options.height, this.options.keepAspectRatio, this.options.legend, this.options.region, this.options.magnifyingGlass, this.options.markerOpacity, this.options.resolution, this.options.sizeAxis, newNested, this.options.width);
      return new Geo(this.data, this.typeName, options);
    }
  }]);

  return Geo;
}();
setType("TheGamma.GoogleCharts.Extensions.Geo", Geo);

var Scatter = function () {
  function Scatter(data, typeName, options) {
    _classCallCheck(this, Scatter);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Scatter, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Scatter",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: ScatterChartOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (aggregationTarget, axisTitlesPosition, backgroundColor, colors, curveType, dataOpacity, enableInteractivity, fontSize, fontName, forceIFrame, height, lineWidth, pointSize, selectionMode, series, theme, title, titlePosition, width) {
      var _this2 = this;

      var newOptions = function () {
        var aggregationTarget_1 = Helpers.right(_this2.options, "aggregationTarget", aggregationTarget);
        var axisTitlesPosition_1 = Helpers.right(_this2.options, "axisTitlesPosition", axisTitlesPosition);
        var backgroundColor_1 = Helpers.right(_this2.options, "backgroundColor", backgroundColor);
        var colors_1 = Helpers.right(_this2.options, "colors", function () {
          var $var23 = colors;

          if ($var23 != null) {
            return function (source) {
              return _Array$from(source);
            }($var23);
          } else {
            return $var23;
          }
        }());
        var curveType_1 = Helpers.right(_this2.options, "curveType", curveType);
        var dataOpacity_1 = Helpers.right(_this2.options, "dataOpacity", dataOpacity);
        var enableInteractivity_1 = Helpers.right(_this2.options, "enableInteractivity", enableInteractivity);
        var fontSize_1 = Helpers.right(_this2.options, "fontSize", fontSize);
        var fontName_1 = Helpers.right(_this2.options, "fontName", fontName);
        var forceIFrame_1 = Helpers.right(_this2.options, "forceIFrame", forceIFrame);
        var height_1 = Helpers.right(_this2.options, "height", height);
        var lineWidth_1 = Helpers.right(_this2.options, "lineWidth", lineWidth);
        var pointSize_1 = Helpers.right(_this2.options, "pointSize", pointSize);
        var selectionMode_1 = Helpers.right(_this2.options, "selectionMode", selectionMode);
        var series_1 = Helpers.right(_this2.options, "series", series);
        var theme_1 = Helpers.right(_this2.options, "theme", theme);
        var title_1 = Helpers.right(_this2.options, "title", title);
        var titlePosition_1 = Helpers.right(_this2.options, "titlePosition", titlePosition);
        var width_1 = Helpers.right(_this2.options, "width", width);
        return new ScatterChartOptions(aggregationTarget_1, _this2.options.animation, _this2.options.annotations, axisTitlesPosition_1, backgroundColor_1, _this2.options.chartArea, colors_1, _this2.options.crosshair, curveType_1, dataOpacity_1, enableInteractivity_1, _this2.options.explorer, fontSize_1, fontName_1, forceIFrame_1, _this2.options.hAxis, height_1, _this2.options.legend, lineWidth_1, pointSize_1, selectionMode_1, series_1, theme_1, title_1, titlePosition_1, _this2.options.titleTextStyle, _this2.options.tooltip, _this2.options.trendlines, _this2.options.vAxis, width_1);
      }();

      return new Scatter(this.data, this.typeName, newOptions);
    }
  }, {
    key: "trendlines",
    value: function (_trendlines) {
      var _this3 = this;

      var options = function () {
        var trendlines_1 = Helpers.right(_this3.options, "trendlines", function () {
          var $var24 = _trendlines;

          if ($var24 != null) {
            return function (source) {
              return _Array$from(source);
            }($var24);
          } else {
            return $var24;
          }
        }());
        return new ScatterChartOptions(_this3.options.aggregationTarget, _this3.options.animation, _this3.options.annotations, _this3.options.axisTitlesPosition, _this3.options.backgroundColor, _this3.options.chartArea, _this3.options.colors, _this3.options.crosshair, _this3.options.curveType, _this3.options.dataOpacity, _this3.options.enableInteractivity, _this3.options.explorer, _this3.options.fontSize, _this3.options.fontName, _this3.options.forceIFrame, _this3.options.hAxis, _this3.options.height, _this3.options.legend, _this3.options.lineWidth, _this3.options.pointSize, _this3.options.selectionMode, _this3.options.series, _this3.options.theme, _this3.options.title, _this3.options.titlePosition, _this3.options.titleTextStyle, _this3.options.tooltip, trendlines_1, _this3.options.vAxis, _this3.options.width);
      }();

      return new Scatter(this.data, this.typeName, options);
    }
  }, {
    key: "animation",
    value: function (duration, easing) {
      var o = this.options.animation;
      var newNested = new TransitionAnimation(Helpers.right(o, "duration", duration), Helpers.right(o, "easing", easing));
      var options = new ScatterChartOptions(this.options.aggregationTarget, newNested, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.lineWidth, this.options.pointSize, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.trendlines, this.options.vAxis, this.options.width);
      return new Scatter(this.data, this.typeName, options);
    }
  }, {
    key: "chartArea",
    value: function (top, left, width, height) {
      var o = this.options.chartArea;
      var newNested = new ChartArea(Helpers.right(o, "top", top), Helpers.right(o, "left", left), Helpers.right(o, "width", width), Helpers.right(o, "height", height));
      var options = new ScatterChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, newNested, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.lineWidth, this.options.pointSize, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.trendlines, this.options.vAxis, this.options.width);
      return new Scatter(this.data, this.typeName, options);
    }
  }, {
    key: "crosshair",
    value: function (color, opacity, orientation, trigger) {
      var o = this.options.crosshair;

      var newNested = function () {
        var color_1 = Helpers.right(o, "color", color);
        var opacity_1 = Helpers.right(o, "opacity", opacity);
        var orientation_1 = Helpers.right(o, "orientation", orientation);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartCrosshair(color_1, Helpers.copy(o, "focused"), opacity_1, orientation_1, Helpers.copy(o, "selected"), trigger_1);
      }();

      var options = new ScatterChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, newNested, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.lineWidth, this.options.pointSize, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.trendlines, this.options.vAxis, this.options.width);
      return new Scatter(this.data, this.typeName, options);
    }
  }, {
    key: "explorer",
    value: function (actions, axis, keepInBounds, maxZoomIn, maxZoomOut, zoomDelta) {
      var o = this.options.explorer;
      var newNested = new ChartExplorer(Helpers.right(o, "actions", function () {
        var $var25 = actions;

        if ($var25 != null) {
          return function (source) {
            return _Array$from(source);
          }($var25);
        } else {
          return $var25;
        }
      }()), Helpers.right(o, "axis", axis), Helpers.right(o, "keepInBounds", keepInBounds), Helpers.right(o, "maxZoomIn", maxZoomIn), Helpers.right(o, "maxZoomOut", maxZoomOut), Helpers.right(o, "zoomDelta", zoomDelta));
      var options = new ScatterChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, newNested, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.lineWidth, this.options.pointSize, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.trendlines, this.options.vAxis, this.options.width);
      return new Scatter(this.data, this.typeName, options);
    }
  }, {
    key: "hAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.hAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var26 = ticks;

          if ($var26 != null) {
            return function (source) {
              return _Array$from(source);
            }($var26);
          } else {
            return $var26;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new ScatterChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, newNested, this.options.height, this.options.legend, this.options.lineWidth, this.options.pointSize, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.trendlines, this.options.vAxis, this.options.width);
      return new Scatter(this.data, this.typeName, options);
    }
  }, {
    key: "legend",
    value: function (alignment, maxLines, position, numberFormat) {
      var o = this.options.legend;

      var newNested = function () {
        var alignment_1 = Helpers.right(o, "alignment", alignment);
        var maxLines_1 = Helpers.right(o, "maxLines", maxLines);
        var position_1 = Helpers.right(o, "position", position);
        var numberFormat_1 = Helpers.right(o, "numberFormat", numberFormat);
        return new ChartLegend(alignment_1, maxLines_1, position_1, Helpers.copy(o, "textStyle"), numberFormat_1);
      }();

      var options = new ScatterChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, newNested, this.options.lineWidth, this.options.pointSize, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.trendlines, this.options.vAxis, this.options.width);
      return new Scatter(this.data, this.typeName, options);
    }
  }, {
    key: "titleTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.titleTextStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new ScatterChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.lineWidth, this.options.pointSize, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, newNested, this.options.tooltip, this.options.trendlines, this.options.vAxis, this.options.width);
      return new Scatter(this.data, this.typeName, options);
    }
  }, {
    key: "tooltip",
    value: function (isHtml, showColorCode, trigger) {
      var o = this.options.tooltip;

      var newNested = function () {
        var isHtml_1 = Helpers.right(o, "isHtml", isHtml);
        var showColorCode_1 = Helpers.right(o, "showColorCode", showColorCode);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartTooltip(isHtml_1, showColorCode_1, Helpers.copy(o, "textStyle"), trigger_1);
      }();

      var options = new ScatterChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.lineWidth, this.options.pointSize, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, newNested, this.options.trendlines, this.options.vAxis, this.options.width);
      return new Scatter(this.data, this.typeName, options);
    }
  }, {
    key: "vAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.vAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var27 = ticks;

          if ($var27 != null) {
            return function (source) {
              return _Array$from(source);
            }($var27);
          } else {
            return $var27;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new ScatterChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.lineWidth, this.options.pointSize, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.trendlines, newNested, this.options.width);
      return new Scatter(this.data, this.typeName, options);
    }
  }]);

  return Scatter;
}();

setType("TheGamma.GoogleCharts.Extensions.Scatter", Scatter);
var Column = function () {
  function Column(data, typeName, options) {
    _classCallCheck(this, Column);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Column, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Column",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: ColumnChartOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (aggregationTarget, axisTitlesPosition, backgroundColor, colors, enableInteractivity, focusTarget, fontSize, fontName, height, isStacked, reverseCategories, selectionMode, series, theme, title, titlePosition, vAxes, width) {
      var _this4 = this;

      var newOptions = function () {
        var aggregationTarget_1 = Helpers.right(_this4.options, "aggregationTarget", aggregationTarget);
        var axisTitlesPosition_1 = Helpers.right(_this4.options, "axisTitlesPosition", axisTitlesPosition);
        var backgroundColor_1 = Helpers.right(_this4.options, "backgroundColor", backgroundColor);
        var colors_1 = Helpers.right(_this4.options, "colors", function () {
          var $var28 = colors;

          if ($var28 != null) {
            return function (source) {
              return _Array$from(source);
            }($var28);
          } else {
            return $var28;
          }
        }());
        var enableInteractivity_1 = Helpers.right(_this4.options, "enableInteractivity", enableInteractivity);
        var focusTarget_1 = Helpers.right(_this4.options, "focusTarget", focusTarget);
        var fontSize_1 = Helpers.right(_this4.options, "fontSize", fontSize);
        var fontName_1 = Helpers.right(_this4.options, "fontName", fontName);
        var height_1 = Helpers.right(_this4.options, "height", height);
        var isStacked_1 = Helpers.right(_this4.options, "isStacked", isStacked);
        var reverseCategories_1 = Helpers.right(_this4.options, "reverseCategories", reverseCategories);
        var selectionMode_1 = Helpers.right(_this4.options, "selectionMode", selectionMode);
        var series_1 = Helpers.right(_this4.options, "series", series);
        var theme_1 = Helpers.right(_this4.options, "theme", theme);
        var title_1 = Helpers.right(_this4.options, "title", title);
        var titlePosition_1 = Helpers.right(_this4.options, "titlePosition", titlePosition);
        var vAxes_1 = Helpers.right(_this4.options, "vAxes", vAxes);
        var width_1 = Helpers.right(_this4.options, "width", width);
        return new ColumnChartOptions(aggregationTarget_1, _this4.options.animation, _this4.options.annotations, axisTitlesPosition_1, backgroundColor_1, _this4.options.bar, _this4.options.chartArea, colors_1, enableInteractivity_1, focusTarget_1, fontSize_1, fontName_1, _this4.options.hAxis, height_1, isStacked_1, _this4.options.legend, reverseCategories_1, selectionMode_1, series_1, theme_1, title_1, titlePosition_1, _this4.options.titleTextStyle, _this4.options.tooltip, vAxes_1, _this4.options.vAxis, width_1);
      }();

      return new Column(this.data, this.typeName, newOptions);
    }
  }, {
    key: "animation",
    value: function (duration, easing) {
      var o = this.options.animation;
      var newNested = new TransitionAnimation(Helpers.right(o, "duration", duration), Helpers.right(o, "easing", easing));
      var options = new ColumnChartOptions(this.options.aggregationTarget, newNested, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Column(this.data, this.typeName, options);
    }
  }, {
    key: "bar",
    value: function (groupWidth) {
      var o = this.options.bar;
      var newNested = new GroupWidth(Helpers.right(o, "groupWidth", groupWidth));
      var options = new ColumnChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, newNested, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Column(this.data, this.typeName, options);
    }
  }, {
    key: "chartArea",
    value: function (top, left, width, height) {
      var o = this.options.chartArea;
      var newNested = new ChartArea(Helpers.right(o, "top", top), Helpers.right(o, "left", left), Helpers.right(o, "width", width), Helpers.right(o, "height", height));
      var options = new ColumnChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, newNested, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Column(this.data, this.typeName, options);
    }
  }, {
    key: "hAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.hAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var29 = ticks;

          if ($var29 != null) {
            return function (source) {
              return _Array$from(source);
            }($var29);
          } else {
            return $var29;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new ColumnChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, newNested, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Column(this.data, this.typeName, options);
    }
  }, {
    key: "legend",
    value: function (alignment, maxLines, position, numberFormat) {
      var o = this.options.legend;

      var newNested = function () {
        var alignment_1 = Helpers.right(o, "alignment", alignment);
        var maxLines_1 = Helpers.right(o, "maxLines", maxLines);
        var position_1 = Helpers.right(o, "position", position);
        var numberFormat_1 = Helpers.right(o, "numberFormat", numberFormat);
        return new ChartLegend(alignment_1, maxLines_1, position_1, Helpers.copy(o, "textStyle"), numberFormat_1);
      }();

      var options = new ColumnChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.isStacked, newNested, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Column(this.data, this.typeName, options);
    }
  }, {
    key: "titleTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.titleTextStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new ColumnChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, newNested, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Column(this.data, this.typeName, options);
    }
  }, {
    key: "tooltip",
    value: function (isHtml, showColorCode, trigger) {
      var o = this.options.tooltip;

      var newNested = function () {
        var isHtml_1 = Helpers.right(o, "isHtml", isHtml);
        var showColorCode_1 = Helpers.right(o, "showColorCode", showColorCode);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartTooltip(isHtml_1, showColorCode_1, Helpers.copy(o, "textStyle"), trigger_1);
      }();

      var options = new ColumnChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, newNested, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Column(this.data, this.typeName, options);
    }
  }, {
    key: "vAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.vAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var30 = ticks;

          if ($var30 != null) {
            return function (source) {
              return _Array$from(source);
            }($var30);
          } else {
            return $var30;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new ColumnChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, newNested, this.options.width);
      return new Column(this.data, this.typeName, options);
    }
  }]);

  return Column;
}();
setType("TheGamma.GoogleCharts.Extensions.Column", Column);
var Line = function () {
  function Line(data, typeName, options) {
    _classCallCheck(this, Line);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Line, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Line",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: LineChartOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (aggregationTarget, axisTitlesPosition, backgroundColor, colors, curveType, dataOpacity, enableInteractivity, focusTarget, fontSize, fontName, height, interpolateNulls, lineWidth, orientation, pointSize, reverseCategories, selectionMode, series, theme, title, titlePosition, vAxes, width) {
      var _this5 = this;

      var newOptions = function () {
        var aggregationTarget_1 = Helpers.right(_this5.options, "aggregationTarget", aggregationTarget);
        var axisTitlesPosition_1 = Helpers.right(_this5.options, "axisTitlesPosition", axisTitlesPosition);
        var backgroundColor_1 = Helpers.right(_this5.options, "backgroundColor", backgroundColor);
        var colors_1 = Helpers.right(_this5.options, "colors", function () {
          var $var31 = colors;

          if ($var31 != null) {
            return function (source) {
              return _Array$from(source);
            }($var31);
          } else {
            return $var31;
          }
        }());
        var curveType_1 = Helpers.right(_this5.options, "curveType", curveType);
        var dataOpacity_1 = Helpers.right(_this5.options, "dataOpacity", dataOpacity);
        var enableInteractivity_1 = Helpers.right(_this5.options, "enableInteractivity", enableInteractivity);
        var focusTarget_1 = Helpers.right(_this5.options, "focusTarget", focusTarget);
        var fontSize_1 = Helpers.right(_this5.options, "fontSize", fontSize);
        var fontName_1 = Helpers.right(_this5.options, "fontName", fontName);
        var height_1 = Helpers.right(_this5.options, "height", height);
        var interpolateNulls_1 = Helpers.right(_this5.options, "interpolateNulls", interpolateNulls);
        var lineWidth_1 = Helpers.right(_this5.options, "lineWidth", lineWidth);
        var orientation_1 = Helpers.right(_this5.options, "orientation", orientation);
        var pointSize_1 = Helpers.right(_this5.options, "pointSize", pointSize);
        var reverseCategories_1 = Helpers.right(_this5.options, "reverseCategories", reverseCategories);
        var selectionMode_1 = Helpers.right(_this5.options, "selectionMode", selectionMode);
        var series_1 = Helpers.right(_this5.options, "series", series);
        var theme_1 = Helpers.right(_this5.options, "theme", theme);
        var title_1 = Helpers.right(_this5.options, "title", title);
        var titlePosition_1 = Helpers.right(_this5.options, "titlePosition", titlePosition);
        var vAxes_1 = Helpers.right(_this5.options, "vAxes", vAxes);
        var width_1 = Helpers.right(_this5.options, "width", width);
        return new LineChartOptions(aggregationTarget_1, _this5.options.animation, _this5.options.annotations, axisTitlesPosition_1, backgroundColor_1, _this5.options.chartArea, colors_1, _this5.options.crosshair, curveType_1, dataOpacity_1, enableInteractivity_1, _this5.options.explorer, focusTarget_1, fontSize_1, fontName_1, _this5.options.hAxis, height_1, interpolateNulls_1, _this5.options.legend, lineWidth_1, orientation_1, pointSize_1, reverseCategories_1, selectionMode_1, series_1, theme_1, title_1, titlePosition_1, _this5.options.titleTextStyle, _this5.options.tooltip, vAxes_1, _this5.options.vAxis, width_1);
      }();

      return new Line(this.data, this.typeName, newOptions);
    }
  }, {
    key: "animation",
    value: function (duration, easing) {
      var o = this.options.animation;
      var newNested = new TransitionAnimation(Helpers.right(o, "duration", duration), Helpers.right(o, "easing", easing));
      var options = new LineChartOptions(this.options.aggregationTarget, newNested, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Line(this.data, this.typeName, options);
    }
  }, {
    key: "chartArea",
    value: function (top, left, width, height) {
      var o = this.options.chartArea;
      var newNested = new ChartArea(Helpers.right(o, "top", top), Helpers.right(o, "left", left), Helpers.right(o, "width", width), Helpers.right(o, "height", height));
      var options = new LineChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, newNested, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Line(this.data, this.typeName, options);
    }
  }, {
    key: "crosshair",
    value: function (color, opacity, orientation, trigger) {
      var o = this.options.crosshair;

      var newNested = function () {
        var color_1 = Helpers.right(o, "color", color);
        var opacity_1 = Helpers.right(o, "opacity", opacity);
        var orientation_1 = Helpers.right(o, "orientation", orientation);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartCrosshair(color_1, Helpers.copy(o, "focused"), opacity_1, orientation_1, Helpers.copy(o, "selected"), trigger_1);
      }();

      var options = new LineChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, newNested, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Line(this.data, this.typeName, options);
    }
  }, {
    key: "explorer",
    value: function (actions, axis, keepInBounds, maxZoomIn, maxZoomOut, zoomDelta) {
      var o = this.options.explorer;
      var newNested = new ChartExplorer(Helpers.right(o, "actions", function () {
        var $var32 = actions;

        if ($var32 != null) {
          return function (source) {
            return _Array$from(source);
          }($var32);
        } else {
          return $var32;
        }
      }()), Helpers.right(o, "axis", axis), Helpers.right(o, "keepInBounds", keepInBounds), Helpers.right(o, "maxZoomIn", maxZoomIn), Helpers.right(o, "maxZoomOut", maxZoomOut), Helpers.right(o, "zoomDelta", zoomDelta));
      var options = new LineChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, newNested, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Line(this.data, this.typeName, options);
    }
  }, {
    key: "hAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.hAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var33 = ticks;

          if ($var33 != null) {
            return function (source) {
              return _Array$from(source);
            }($var33);
          } else {
            return $var33;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new LineChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, newNested, this.options.height, this.options.interpolateNulls, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Line(this.data, this.typeName, options);
    }
  }, {
    key: "legend",
    value: function (alignment, maxLines, position, numberFormat) {
      var o = this.options.legend;

      var newNested = function () {
        var alignment_1 = Helpers.right(o, "alignment", alignment);
        var maxLines_1 = Helpers.right(o, "maxLines", maxLines);
        var position_1 = Helpers.right(o, "position", position);
        var numberFormat_1 = Helpers.right(o, "numberFormat", numberFormat);
        return new ChartLegend(alignment_1, maxLines_1, position_1, Helpers.copy(o, "textStyle"), numberFormat_1);
      }();

      var options = new LineChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, newNested, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Line(this.data, this.typeName, options);
    }
  }, {
    key: "titleTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.titleTextStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new LineChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, newNested, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Line(this.data, this.typeName, options);
    }
  }, {
    key: "tooltip",
    value: function (isHtml, showColorCode, trigger) {
      var o = this.options.tooltip;

      var newNested = function () {
        var isHtml_1 = Helpers.right(o, "isHtml", isHtml);
        var showColorCode_1 = Helpers.right(o, "showColorCode", showColorCode);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartTooltip(isHtml_1, showColorCode_1, Helpers.copy(o, "textStyle"), trigger_1);
      }();

      var options = new LineChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, newNested, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Line(this.data, this.typeName, options);
    }
  }, {
    key: "vAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.vAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var34 = ticks;

          if ($var34 != null) {
            return function (source) {
              return _Array$from(source);
            }($var34);
          } else {
            return $var34;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new LineChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.curveType, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, newNested, this.options.width);
      return new Line(this.data, this.typeName, options);
    }
  }]);

  return Line;
}();
setType("TheGamma.GoogleCharts.Extensions.Line", Line);
var Bar = function () {
  function Bar(data, typeName, options) {
    _classCallCheck(this, Bar);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Bar, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Bar",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: BarChartOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (aggregationTarget, axisTitlesPosition, backgroundColor, colors, dataOpacity, enableInteractivity, focusTarget, fontSize, fontName, hAxes, height, isStacked, reverseCategories, series, theme, title, titlePosition, vAxes, width) {
      var _this6 = this;

      var newOptions = function () {
        var aggregationTarget_1 = Helpers.right(_this6.options, "aggregationTarget", aggregationTarget);
        var axisTitlesPosition_1 = Helpers.right(_this6.options, "axisTitlesPosition", axisTitlesPosition);
        var backgroundColor_1 = Helpers.right(_this6.options, "backgroundColor", backgroundColor);
        var colors_1 = Helpers.right(_this6.options, "colors", function () {
          var $var35 = colors;

          if ($var35 != null) {
            return function (source) {
              return _Array$from(source);
            }($var35);
          } else {
            return $var35;
          }
        }());
        var dataOpacity_1 = Helpers.right(_this6.options, "dataOpacity", dataOpacity);
        var enableInteractivity_1 = Helpers.right(_this6.options, "enableInteractivity", enableInteractivity);
        var focusTarget_1 = Helpers.right(_this6.options, "focusTarget", focusTarget);
        var fontSize_1 = Helpers.right(_this6.options, "fontSize", fontSize);
        var fontName_1 = Helpers.right(_this6.options, "fontName", fontName);
        var hAxes_1 = Helpers.right(_this6.options, "hAxes", hAxes);
        var height_1 = Helpers.right(_this6.options, "height", height);
        var isStacked_1 = Helpers.right(_this6.options, "isStacked", isStacked);
        var reverseCategories_1 = Helpers.right(_this6.options, "reverseCategories", reverseCategories);
        var series_1 = Helpers.right(_this6.options, "series", series);
        var theme_1 = Helpers.right(_this6.options, "theme", theme);
        var title_1 = Helpers.right(_this6.options, "title", title);
        var titlePosition_1 = Helpers.right(_this6.options, "titlePosition", titlePosition);
        var vAxes_1 = Helpers.right(_this6.options, "vAxes", vAxes);
        var width_1 = Helpers.right(_this6.options, "width", width);
        return new BarChartOptions(aggregationTarget_1, _this6.options.animation, _this6.options.annotations, axisTitlesPosition_1, backgroundColor_1, _this6.options.bar, _this6.options.chartArea, colors_1, dataOpacity_1, enableInteractivity_1, focusTarget_1, fontSize_1, fontName_1, hAxes_1, _this6.options.hAxis, height_1, isStacked_1, _this6.options.legend, reverseCategories_1, series_1, theme_1, title_1, titlePosition_1, _this6.options.titleTextStyle, _this6.options.tooltip, vAxes_1, _this6.options.vAxis, width_1);
      }();

      return new Bar(this.data, this.typeName, newOptions);
    }
  }, {
    key: "animation",
    value: function (duration, easing) {
      var o = this.options.animation;
      var newNested = new TransitionAnimation(Helpers.right(o, "duration", duration), Helpers.right(o, "easing", easing));
      var options = new BarChartOptions(this.options.aggregationTarget, newNested, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxes, this.options.hAxis, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Bar(this.data, this.typeName, options);
    }
  }, {
    key: "bar",
    value: function (groupWidth) {
      var o = this.options.bar;
      var newNested = new GroupWidth(Helpers.right(o, "groupWidth", groupWidth));
      var options = new BarChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, newNested, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxes, this.options.hAxis, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Bar(this.data, this.typeName, options);
    }
  }, {
    key: "chartArea",
    value: function (top, left, width, height) {
      var o = this.options.chartArea;
      var newNested = new ChartArea(Helpers.right(o, "top", top), Helpers.right(o, "left", left), Helpers.right(o, "width", width), Helpers.right(o, "height", height));
      var options = new BarChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, newNested, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxes, this.options.hAxis, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Bar(this.data, this.typeName, options);
    }
  }, {
    key: "hAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.hAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var36 = ticks;

          if ($var36 != null) {
            return function (source) {
              return _Array$from(source);
            }($var36);
          } else {
            return $var36;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new BarChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxes, newNested, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Bar(this.data, this.typeName, options);
    }
  }, {
    key: "legend",
    value: function (alignment, maxLines, position, numberFormat) {
      var o = this.options.legend;

      var newNested = function () {
        var alignment_1 = Helpers.right(o, "alignment", alignment);
        var maxLines_1 = Helpers.right(o, "maxLines", maxLines);
        var position_1 = Helpers.right(o, "position", position);
        var numberFormat_1 = Helpers.right(o, "numberFormat", numberFormat);
        return new ChartLegend(alignment_1, maxLines_1, position_1, Helpers.copy(o, "textStyle"), numberFormat_1);
      }();

      var options = new BarChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxes, this.options.hAxis, this.options.height, this.options.isStacked, newNested, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Bar(this.data, this.typeName, options);
    }
  }, {
    key: "titleTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.titleTextStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new BarChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxes, this.options.hAxis, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, newNested, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Bar(this.data, this.typeName, options);
    }
  }, {
    key: "tooltip",
    value: function (isHtml, showColorCode, trigger) {
      var o = this.options.tooltip;

      var newNested = function () {
        var isHtml_1 = Helpers.right(o, "isHtml", isHtml);
        var showColorCode_1 = Helpers.right(o, "showColorCode", showColorCode);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartTooltip(isHtml_1, showColorCode_1, Helpers.copy(o, "textStyle"), trigger_1);
      }();

      var options = new BarChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxes, this.options.hAxis, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, newNested, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Bar(this.data, this.typeName, options);
    }
  }, {
    key: "vAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.vAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var37 = ticks;

          if ($var37 != null) {
            return function (source) {
              return _Array$from(source);
            }($var37);
          } else {
            return $var37;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new BarChartOptions(this.options.aggregationTarget, this.options.animation, this.options.annotations, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxes, this.options.hAxis, this.options.height, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, newNested, this.options.width);
      return new Bar(this.data, this.typeName, options);
    }
  }]);

  return Bar;
}();
setType("TheGamma.GoogleCharts.Extensions.Bar", Bar);
var Histogram = function () {
  function Histogram(data, typeName, options) {
    _classCallCheck(this, Histogram);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Histogram, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Histogram",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: HistogramOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (axisTitlesPosition, backgroundColor, colors, dataOpacity, enableInteractivity, focusTarget, fontSize, fontName, height, interpolateNulls, isStacked, orientation, reverseCategories, series, theme, title, titlePosition, vAxes, width) {
      var _this7 = this;

      var newOptions = function () {
        var axisTitlesPosition_1 = Helpers.right(_this7.options, "axisTitlesPosition", axisTitlesPosition);
        var backgroundColor_1 = Helpers.right(_this7.options, "backgroundColor", backgroundColor);
        var colors_1 = Helpers.right(_this7.options, "colors", function () {
          var $var38 = colors;

          if ($var38 != null) {
            return function (source) {
              return _Array$from(source);
            }($var38);
          } else {
            return $var38;
          }
        }());
        var dataOpacity_1 = Helpers.right(_this7.options, "dataOpacity", dataOpacity);
        var enableInteractivity_1 = Helpers.right(_this7.options, "enableInteractivity", enableInteractivity);
        var focusTarget_1 = Helpers.right(_this7.options, "focusTarget", focusTarget);
        var fontSize_1 = Helpers.right(_this7.options, "fontSize", fontSize);
        var fontName_1 = Helpers.right(_this7.options, "fontName", fontName);
        var height_1 = Helpers.right(_this7.options, "height", height);
        var interpolateNulls_1 = Helpers.right(_this7.options, "interpolateNulls", interpolateNulls);
        var isStacked_1 = Helpers.right(_this7.options, "isStacked", isStacked);
        var orientation_1 = Helpers.right(_this7.options, "orientation", orientation);
        var reverseCategories_1 = Helpers.right(_this7.options, "reverseCategories", reverseCategories);
        var series_1 = Helpers.right(_this7.options, "series", series);
        var theme_1 = Helpers.right(_this7.options, "theme", theme);
        var title_1 = Helpers.right(_this7.options, "title", title);
        var titlePosition_1 = Helpers.right(_this7.options, "titlePosition", titlePosition);
        var vAxes_1 = Helpers.right(_this7.options, "vAxes", vAxes);
        var width_1 = Helpers.right(_this7.options, "width", width);
        return new HistogramOptions(_this7.options.animation, axisTitlesPosition_1, backgroundColor_1, _this7.options.bar, _this7.options.chartArea, colors_1, dataOpacity_1, enableInteractivity_1, focusTarget_1, fontSize_1, fontName_1, _this7.options.hAxis, _this7.options.histogram, height_1, interpolateNulls_1, isStacked_1, _this7.options.legend, orientation_1, reverseCategories_1, series_1, theme_1, title_1, titlePosition_1, _this7.options.titleTextStyle, _this7.options.tooltip, vAxes_1, _this7.options.vAxis, width_1);
      }();

      return new Histogram(this.data, this.typeName, newOptions);
    }
  }, {
    key: "animation",
    value: function (duration, easing) {
      var o = this.options.animation;
      var newNested = new TransitionAnimation(Helpers.right(o, "duration", duration), Helpers.right(o, "easing", easing));
      var options = new HistogramOptions(newNested, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.histogram, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Histogram(this.data, this.typeName, options);
    }
  }, {
    key: "bar",
    value: function (groupWidth) {
      var o = this.options.bar;
      var newNested = new GroupWidth(Helpers.right(o, "groupWidth", groupWidth));
      var options = new HistogramOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, newNested, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.histogram, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Histogram(this.data, this.typeName, options);
    }
  }, {
    key: "chartArea",
    value: function (top, left, width, height) {
      var o = this.options.chartArea;
      var newNested = new ChartArea(Helpers.right(o, "top", top), Helpers.right(o, "left", left), Helpers.right(o, "width", width), Helpers.right(o, "height", height));
      var options = new HistogramOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, newNested, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.histogram, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Histogram(this.data, this.typeName, options);
    }
  }, {
    key: "hAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.hAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var39 = ticks;

          if ($var39 != null) {
            return function (source) {
              return _Array$from(source);
            }($var39);
          } else {
            return $var39;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new HistogramOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, newNested, this.options.histogram, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Histogram(this.data, this.typeName, options);
    }
  }, {
    key: "histogram",
    value: function (bucketSize, hideBucketItems, lastBucketPercentile) {
      var o = this.options.histogram;
      var newNested = new HistogramHistogram(Helpers.right(o, "bucketSize", bucketSize), Helpers.right(o, "hideBucketItems", hideBucketItems), Helpers.right(o, "lastBucketPercentile", lastBucketPercentile));
      var options = new HistogramOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, newNested, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Histogram(this.data, this.typeName, options);
    }
  }, {
    key: "legend",
    value: function (alignment, maxLines, position, numberFormat) {
      var o = this.options.legend;

      var newNested = function () {
        var alignment_1 = Helpers.right(o, "alignment", alignment);
        var maxLines_1 = Helpers.right(o, "maxLines", maxLines);
        var position_1 = Helpers.right(o, "position", position);
        var numberFormat_1 = Helpers.right(o, "numberFormat", numberFormat);
        return new ChartLegend(alignment_1, maxLines_1, position_1, Helpers.copy(o, "textStyle"), numberFormat_1);
      }();

      var options = new HistogramOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.histogram, this.options.height, this.options.interpolateNulls, this.options.isStacked, newNested, this.options.orientation, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Histogram(this.data, this.typeName, options);
    }
  }, {
    key: "titleTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.titleTextStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new HistogramOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.histogram, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, newNested, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Histogram(this.data, this.typeName, options);
    }
  }, {
    key: "tooltip",
    value: function (isHtml, showColorCode, trigger) {
      var o = this.options.tooltip;

      var newNested = function () {
        var isHtml_1 = Helpers.right(o, "isHtml", isHtml);
        var showColorCode_1 = Helpers.right(o, "showColorCode", showColorCode);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartTooltip(isHtml_1, showColorCode_1, Helpers.copy(o, "textStyle"), trigger_1);
      }();

      var options = new HistogramOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.histogram, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, newNested, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Histogram(this.data, this.typeName, options);
    }
  }, {
    key: "vAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.vAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var40 = ticks;

          if ($var40 != null) {
            return function (source) {
              return _Array$from(source);
            }($var40);
          } else {
            return $var40;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new HistogramOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.chartArea, this.options.colors, this.options.dataOpacity, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.histogram, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, newNested, this.options.width);
      return new Histogram(this.data, this.typeName, options);
    }
  }]);

  return Histogram;
}();
setType("TheGamma.GoogleCharts.Extensions.Histogram", Histogram);
var Area = function () {
  function Area(data, typeName, options) {
    _classCallCheck(this, Area);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Area, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Area",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: AreaChartOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (aggregationTarget, areaOpacity, axisTitlesPosition, backgroundColor, colors, dataOpacity, enableInteractivity, focusTarget, fontSize, fontName, height, interpolateNulls, isStacked, lineWidth, orientation, pointSize, reverseCategories, selectionMode, series, theme, title, titlePosition, vAxes, width) {
      var _this8 = this;

      var newOptions = function () {
        var aggregationTarget_1 = Helpers.right(_this8.options, "aggregationTarget", aggregationTarget);
        var areaOpacity_1 = Helpers.right(_this8.options, "areaOpacity", areaOpacity);
        var axisTitlesPosition_1 = Helpers.right(_this8.options, "axisTitlesPosition", axisTitlesPosition);
        var backgroundColor_1 = Helpers.right(_this8.options, "backgroundColor", backgroundColor);
        var colors_1 = Helpers.right(_this8.options, "colors", function () {
          var $var41 = colors;

          if ($var41 != null) {
            return function (source) {
              return _Array$from(source);
            }($var41);
          } else {
            return $var41;
          }
        }());
        var dataOpacity_1 = Helpers.right(_this8.options, "dataOpacity", dataOpacity);
        var enableInteractivity_1 = Helpers.right(_this8.options, "enableInteractivity", enableInteractivity);
        var focusTarget_1 = Helpers.right(_this8.options, "focusTarget", focusTarget);
        var fontSize_1 = Helpers.right(_this8.options, "fontSize", fontSize);
        var fontName_1 = Helpers.right(_this8.options, "fontName", fontName);
        var height_1 = Helpers.right(_this8.options, "height", height);
        var interpolateNulls_1 = Helpers.right(_this8.options, "interpolateNulls", interpolateNulls);
        var isStacked_1 = Helpers.right(_this8.options, "isStacked", isStacked);
        var lineWidth_1 = Helpers.right(_this8.options, "lineWidth", lineWidth);
        var orientation_1 = Helpers.right(_this8.options, "orientation", orientation);
        var pointSize_1 = Helpers.right(_this8.options, "pointSize", pointSize);
        var reverseCategories_1 = Helpers.right(_this8.options, "reverseCategories", reverseCategories);
        var selectionMode_1 = Helpers.right(_this8.options, "selectionMode", selectionMode);
        var series_1 = Helpers.right(_this8.options, "series", series);
        var theme_1 = Helpers.right(_this8.options, "theme", theme);
        var title_1 = Helpers.right(_this8.options, "title", title);
        var titlePosition_1 = Helpers.right(_this8.options, "titlePosition", titlePosition);
        var vAxes_1 = Helpers.right(_this8.options, "vAxes", vAxes);
        var width_1 = Helpers.right(_this8.options, "width", width);
        return new AreaChartOptions(aggregationTarget_1, _this8.options.animation, areaOpacity_1, axisTitlesPosition_1, backgroundColor_1, _this8.options.chartArea, colors_1, _this8.options.crosshair, dataOpacity_1, enableInteractivity_1, _this8.options.explorer, focusTarget_1, fontSize_1, fontName_1, _this8.options.hAxis, height_1, interpolateNulls_1, isStacked_1, _this8.options.legend, lineWidth_1, orientation_1, pointSize_1, reverseCategories_1, selectionMode_1, series_1, theme_1, title_1, titlePosition_1, _this8.options.titleTextStyle, _this8.options.tooltip, vAxes_1, _this8.options.vAxis, width_1);
      }();

      return new Area(this.data, this.typeName, newOptions);
    }
  }, {
    key: "animation",
    value: function (duration, easing) {
      var o = this.options.animation;
      var newNested = new TransitionAnimation(Helpers.right(o, "duration", duration), Helpers.right(o, "easing", easing));
      var options = new AreaChartOptions(this.options.aggregationTarget, newNested, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Area(this.data, this.typeName, options);
    }
  }, {
    key: "chartArea",
    value: function (top, left, width, height) {
      var o = this.options.chartArea;
      var newNested = new ChartArea(Helpers.right(o, "top", top), Helpers.right(o, "left", left), Helpers.right(o, "width", width), Helpers.right(o, "height", height));
      var options = new AreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, newNested, this.options.colors, this.options.crosshair, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Area(this.data, this.typeName, options);
    }
  }, {
    key: "crosshair",
    value: function (color, opacity, orientation, trigger) {
      var o = this.options.crosshair;

      var newNested = function () {
        var color_1 = Helpers.right(o, "color", color);
        var opacity_1 = Helpers.right(o, "opacity", opacity);
        var orientation_1 = Helpers.right(o, "orientation", orientation);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartCrosshair(color_1, Helpers.copy(o, "focused"), opacity_1, orientation_1, Helpers.copy(o, "selected"), trigger_1);
      }();

      var options = new AreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, newNested, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Area(this.data, this.typeName, options);
    }
  }, {
    key: "explorer",
    value: function (actions, axis, keepInBounds, maxZoomIn, maxZoomOut, zoomDelta) {
      var o = this.options.explorer;
      var newNested = new ChartExplorer(Helpers.right(o, "actions", function () {
        var $var42 = actions;

        if ($var42 != null) {
          return function (source) {
            return _Array$from(source);
          }($var42);
        } else {
          return $var42;
        }
      }()), Helpers.right(o, "axis", axis), Helpers.right(o, "keepInBounds", keepInBounds), Helpers.right(o, "maxZoomIn", maxZoomIn), Helpers.right(o, "maxZoomOut", maxZoomOut), Helpers.right(o, "zoomDelta", zoomDelta));
      var options = new AreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.dataOpacity, this.options.enableInteractivity, newNested, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Area(this.data, this.typeName, options);
    }
  }, {
    key: "hAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.hAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var43 = ticks;

          if ($var43 != null) {
            return function (source) {
              return _Array$from(source);
            }($var43);
          } else {
            return $var43;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new AreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, newNested, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Area(this.data, this.typeName, options);
    }
  }, {
    key: "legend",
    value: function (alignment, maxLines, position, numberFormat) {
      var o = this.options.legend;

      var newNested = function () {
        var alignment_1 = Helpers.right(o, "alignment", alignment);
        var maxLines_1 = Helpers.right(o, "maxLines", maxLines);
        var position_1 = Helpers.right(o, "position", position);
        var numberFormat_1 = Helpers.right(o, "numberFormat", numberFormat);
        return new ChartLegend(alignment_1, maxLines_1, position_1, Helpers.copy(o, "textStyle"), numberFormat_1);
      }();

      var options = new AreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, newNested, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Area(this.data, this.typeName, options);
    }
  }, {
    key: "titleTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.titleTextStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new AreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, newNested, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Area(this.data, this.typeName, options);
    }
  }, {
    key: "tooltip",
    value: function (isHtml, showColorCode, trigger) {
      var o = this.options.tooltip;

      var newNested = function () {
        var isHtml_1 = Helpers.right(o, "isHtml", isHtml);
        var showColorCode_1 = Helpers.right(o, "showColorCode", showColorCode);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartTooltip(isHtml_1, showColorCode_1, Helpers.copy(o, "textStyle"), trigger_1);
      }();

      var options = new AreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, newNested, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Area(this.data, this.typeName, options);
    }
  }, {
    key: "vAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.vAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var44 = ticks;

          if ($var44 != null) {
            return function (source) {
              return _Array$from(source);
            }($var44);
          } else {
            return $var44;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new AreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.crosshair, this.options.dataOpacity, this.options.enableInteractivity, this.options.explorer, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.lineWidth, this.options.orientation, this.options.pointSize, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, newNested, this.options.width);
      return new Area(this.data, this.typeName, options);
    }
  }]);

  return Area;
}();
setType("TheGamma.GoogleCharts.Extensions.Area", Area);
var Annotation = function () {
  function Annotation(data, typeName, options) {
    _classCallCheck(this, Annotation);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Annotation, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Annotation",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: AnnotationChartOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (allowHtml, allValuesSuffix, annotationsWidth, colors, dateFormat, displayAnnotations, displayAnnotationsFilter, displayDateTimeBarSeparator, displayExactValues, displayLegendDots, displayLegendValues, displayRangeSelector, displayZoomButtons, fill, legendPosition, max, min, numberFormats, scaleColumns, scaleFormat, scaleType, thickness, zoomEndTime, zoomStartTime) {
      var newOptions = new AnnotationChartOptions(Helpers.right(this.options, "allowHtml", allowHtml), Helpers.right(this.options, "allValuesSuffix", allValuesSuffix), Helpers.right(this.options, "annotationsWidth", annotationsWidth), Helpers.right(this.options, "colors", function () {
        var $var45 = colors;

        if ($var45 != null) {
          return function (source) {
            return _Array$from(source);
          }($var45);
        } else {
          return $var45;
        }
      }()), Helpers.right(this.options, "dateFormat", dateFormat), Helpers.right(this.options, "displayAnnotations", displayAnnotations), Helpers.right(this.options, "displayAnnotationsFilter", displayAnnotationsFilter), Helpers.right(this.options, "displayDateTimeBarSeparator", displayDateTimeBarSeparator), Helpers.right(this.options, "displayExactValues", displayExactValues), Helpers.right(this.options, "displayLegendDots", displayLegendDots), Helpers.right(this.options, "displayLegendValues", displayLegendValues), Helpers.right(this.options, "displayRangeSelector", displayRangeSelector), Helpers.right(this.options, "displayZoomButtons", displayZoomButtons), Helpers.right(this.options, "fill", fill), Helpers.right(this.options, "legendPosition", legendPosition), Helpers.right(this.options, "max", max), Helpers.right(this.options, "min", min), Helpers.right(this.options, "numberFormats", numberFormats), Helpers.right(this.options, "scaleColumns", function () {
        var $var46 = scaleColumns;

        if ($var46 != null) {
          return function (source) {
            return Float64Array.from(source);
          }($var46);
        } else {
          return $var46;
        }
      }()), Helpers.right(this.options, "scaleFormat", scaleFormat), Helpers.right(this.options, "scaleType", scaleType), Helpers.right(this.options, "thickness", thickness), Helpers.right(this.options, "zoomEndTime", zoomEndTime), Helpers.right(this.options, "zoomStartTime", zoomStartTime));
      return new Annotation(this.data, this.typeName, newOptions);
    }
  }]);

  return Annotation;
}();
setType("TheGamma.GoogleCharts.Extensions.Annotation", Annotation);
var SteppedArea = function () {
  function SteppedArea(data, typeName, options) {
    _classCallCheck(this, SteppedArea);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(SteppedArea, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.SteppedArea",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: SteppedAreaChartOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (aggregationTarget, areaOpacity, axisTitlesPosition, backgroundColor, colors, connectSteps, enableInteractivity, focusTarget, fontSize, fontName, height, interpolateNulls, isStacked, reverseCategories, selectionMode, series, theme, title, titlePosition, vAxes, width) {
      var _this9 = this;

      var newOptions = function () {
        var aggregationTarget_1 = Helpers.right(_this9.options, "aggregationTarget", aggregationTarget);
        var areaOpacity_1 = Helpers.right(_this9.options, "areaOpacity", areaOpacity);
        var axisTitlesPosition_1 = Helpers.right(_this9.options, "axisTitlesPosition", axisTitlesPosition);
        var backgroundColor_1 = Helpers.right(_this9.options, "backgroundColor", backgroundColor);
        var colors_1 = Helpers.right(_this9.options, "colors", function () {
          var $var47 = colors;

          if ($var47 != null) {
            return function (source) {
              return _Array$from(source);
            }($var47);
          } else {
            return $var47;
          }
        }());
        var connectSteps_1 = Helpers.right(_this9.options, "connectSteps", connectSteps);
        var enableInteractivity_1 = Helpers.right(_this9.options, "enableInteractivity", enableInteractivity);
        var focusTarget_1 = Helpers.right(_this9.options, "focusTarget", focusTarget);
        var fontSize_1 = Helpers.right(_this9.options, "fontSize", fontSize);
        var fontName_1 = Helpers.right(_this9.options, "fontName", fontName);
        var height_1 = Helpers.right(_this9.options, "height", height);
        var interpolateNulls_1 = Helpers.right(_this9.options, "interpolateNulls", interpolateNulls);
        var isStacked_1 = Helpers.right(_this9.options, "isStacked", isStacked);
        var reverseCategories_1 = Helpers.right(_this9.options, "reverseCategories", reverseCategories);
        var selectionMode_1 = Helpers.right(_this9.options, "selectionMode", selectionMode);
        var series_1 = Helpers.right(_this9.options, "series", series);
        var theme_1 = Helpers.right(_this9.options, "theme", theme);
        var title_1 = Helpers.right(_this9.options, "title", title);
        var titlePosition_1 = Helpers.right(_this9.options, "titlePosition", titlePosition);
        var vAxes_1 = Helpers.right(_this9.options, "vAxes", vAxes);
        var width_1 = Helpers.right(_this9.options, "width", width);
        return new SteppedAreaChartOptions(aggregationTarget_1, _this9.options.animation, areaOpacity_1, axisTitlesPosition_1, backgroundColor_1, _this9.options.chartArea, colors_1, connectSteps_1, enableInteractivity_1, focusTarget_1, fontSize_1, fontName_1, _this9.options.hAxis, height_1, interpolateNulls_1, isStacked_1, _this9.options.legend, reverseCategories_1, selectionMode_1, series_1, theme_1, title_1, titlePosition_1, _this9.options.titleTextStyle, _this9.options.tooltip, vAxes_1, _this9.options.vAxis, width_1);
      }();

      return new SteppedArea(this.data, this.typeName, newOptions);
    }
  }, {
    key: "animation",
    value: function (duration, easing) {
      var o = this.options.animation;
      var newNested = new TransitionAnimation(Helpers.right(o, "duration", duration), Helpers.right(o, "easing", easing));
      var options = new SteppedAreaChartOptions(this.options.aggregationTarget, newNested, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.connectSteps, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new SteppedArea(this.data, this.typeName, options);
    }
  }, {
    key: "chartArea",
    value: function (top, left, width, height) {
      var o = this.options.chartArea;
      var newNested = new ChartArea(Helpers.right(o, "top", top), Helpers.right(o, "left", left), Helpers.right(o, "width", width), Helpers.right(o, "height", height));
      var options = new SteppedAreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, newNested, this.options.colors, this.options.connectSteps, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new SteppedArea(this.data, this.typeName, options);
    }
  }, {
    key: "hAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.hAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var48 = ticks;

          if ($var48 != null) {
            return function (source) {
              return _Array$from(source);
            }($var48);
          } else {
            return $var48;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new SteppedAreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.connectSteps, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, newNested, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new SteppedArea(this.data, this.typeName, options);
    }
  }, {
    key: "legend",
    value: function (alignment, maxLines, position, numberFormat) {
      var o = this.options.legend;

      var newNested = function () {
        var alignment_1 = Helpers.right(o, "alignment", alignment);
        var maxLines_1 = Helpers.right(o, "maxLines", maxLines);
        var position_1 = Helpers.right(o, "position", position);
        var numberFormat_1 = Helpers.right(o, "numberFormat", numberFormat);
        return new ChartLegend(alignment_1, maxLines_1, position_1, Helpers.copy(o, "textStyle"), numberFormat_1);
      }();

      var options = new SteppedAreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.connectSteps, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, newNested, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new SteppedArea(this.data, this.typeName, options);
    }
  }, {
    key: "titleTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.titleTextStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new SteppedAreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.connectSteps, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, newNested, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new SteppedArea(this.data, this.typeName, options);
    }
  }, {
    key: "tooltip",
    value: function (isHtml, showColorCode, trigger) {
      var o = this.options.tooltip;

      var newNested = function () {
        var isHtml_1 = Helpers.right(o, "isHtml", isHtml);
        var showColorCode_1 = Helpers.right(o, "showColorCode", showColorCode);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartTooltip(isHtml_1, showColorCode_1, Helpers.copy(o, "textStyle"), trigger_1);
      }();

      var options = new SteppedAreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.connectSteps, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, newNested, this.options.vAxes, this.options.vAxis, this.options.width);
      return new SteppedArea(this.data, this.typeName, options);
    }
  }, {
    key: "vAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.vAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var49 = ticks;

          if ($var49 != null) {
            return function (source) {
              return _Array$from(source);
            }($var49);
          } else {
            return $var49;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new SteppedAreaChartOptions(this.options.aggregationTarget, this.options.animation, this.options.areaOpacity, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.connectSteps, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.interpolateNulls, this.options.isStacked, this.options.legend, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, newNested, this.options.width);
      return new SteppedArea(this.data, this.typeName, options);
    }
  }]);

  return SteppedArea;
}();
setType("TheGamma.GoogleCharts.Extensions.SteppedArea", SteppedArea);
var Pie = function () {
  function Pie(data, typeName, options) {
    _classCallCheck(this, Pie);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Pie, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Pie",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: PieChartOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (backgroundColor, colors, enableInteractivity, fontSize, fontName, height, is3D, pieHole, pieSliceBorderColor, pieSliceText, pieStartAngle, reverseCategories, pieResidueSliceColor, pieResidueSliceLabel, slices, sliceVisibilityThreshold, title, width) {
      var _this10 = this;

      var newOptions = function () {
        var backgroundColor_1 = Helpers.right(_this10.options, "backgroundColor", backgroundColor);
        var colors_1 = Helpers.right(_this10.options, "colors", function () {
          var $var50 = colors;

          if ($var50 != null) {
            return function (source) {
              return _Array$from(source);
            }($var50);
          } else {
            return $var50;
          }
        }());
        var enableInteractivity_1 = Helpers.right(_this10.options, "enableInteractivity", enableInteractivity);
        var fontSize_1 = Helpers.right(_this10.options, "fontSize", fontSize);
        var fontName_1 = Helpers.right(_this10.options, "fontName", fontName);
        var height_1 = Helpers.right(_this10.options, "height", height);
        var is3D_1 = Helpers.right(_this10.options, "is3D", is3D);
        var pieHole_1 = Helpers.right(_this10.options, "pieHole", pieHole);
        var pieSliceBorderColor_1 = Helpers.right(_this10.options, "pieSliceBorderColor", pieSliceBorderColor);
        var pieSliceText_1 = Helpers.right(_this10.options, "pieSliceText", pieSliceText);
        var pieStartAngle_1 = Helpers.right(_this10.options, "pieStartAngle", pieStartAngle);
        var reverseCategories_1 = Helpers.right(_this10.options, "reverseCategories", reverseCategories);
        var pieResidueSliceColor_1 = Helpers.right(_this10.options, "pieResidueSliceColor", pieResidueSliceColor);
        var pieResidueSliceLabel_1 = Helpers.right(_this10.options, "pieResidueSliceLabel", pieResidueSliceLabel);
        var slices_1 = Helpers.right(_this10.options, "slices", slices);
        var sliceVisibilityThreshold_1 = Helpers.right(_this10.options, "sliceVisibilityThreshold", sliceVisibilityThreshold);
        var title_1 = Helpers.right(_this10.options, "title", title);
        var width_1 = Helpers.right(_this10.options, "width", width);
        return new PieChartOptions(backgroundColor_1, _this10.options.chartArea, colors_1, enableInteractivity_1, fontSize_1, fontName_1, height_1, is3D_1, _this10.options.legend, pieHole_1, pieSliceBorderColor_1, pieSliceText_1, _this10.options.pieSliceTextStyle, pieStartAngle_1, reverseCategories_1, pieResidueSliceColor_1, pieResidueSliceLabel_1, slices_1, sliceVisibilityThreshold_1, title_1, _this10.options.titleTextStyle, _this10.options.tooltip, width_1);
      }();

      return new Pie(this.data, this.typeName, newOptions);
    }
  }, {
    key: "chartArea",
    value: function (top, left, width, height) {
      var o = this.options.chartArea;
      var newNested = new ChartArea(Helpers.right(o, "top", top), Helpers.right(o, "left", left), Helpers.right(o, "width", width), Helpers.right(o, "height", height));
      var options = new PieChartOptions(this.options.backgroundColor, newNested, this.options.colors, this.options.enableInteractivity, this.options.fontSize, this.options.fontName, this.options.height, this.options.is3D, this.options.legend, this.options.pieHole, this.options.pieSliceBorderColor, this.options.pieSliceText, this.options.pieSliceTextStyle, this.options.pieStartAngle, this.options.reverseCategories, this.options.pieResidueSliceColor, this.options.pieResidueSliceLabel, this.options.slices, this.options.sliceVisibilityThreshold, this.options.title, this.options.titleTextStyle, this.options.tooltip, this.options.width);
      return new Pie(this.data, this.typeName, options);
    }
  }, {
    key: "legend",
    value: function (alignment, maxLines, position, numberFormat) {
      var o = this.options.legend;

      var newNested = function () {
        var alignment_1 = Helpers.right(o, "alignment", alignment);
        var maxLines_1 = Helpers.right(o, "maxLines", maxLines);
        var position_1 = Helpers.right(o, "position", position);
        var numberFormat_1 = Helpers.right(o, "numberFormat", numberFormat);
        return new ChartLegend(alignment_1, maxLines_1, position_1, Helpers.copy(o, "textStyle"), numberFormat_1);
      }();

      var options = new PieChartOptions(this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.fontSize, this.options.fontName, this.options.height, this.options.is3D, newNested, this.options.pieHole, this.options.pieSliceBorderColor, this.options.pieSliceText, this.options.pieSliceTextStyle, this.options.pieStartAngle, this.options.reverseCategories, this.options.pieResidueSliceColor, this.options.pieResidueSliceLabel, this.options.slices, this.options.sliceVisibilityThreshold, this.options.title, this.options.titleTextStyle, this.options.tooltip, this.options.width);
      return new Pie(this.data, this.typeName, options);
    }
  }, {
    key: "pieSliceTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.pieSliceTextStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new PieChartOptions(this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.fontSize, this.options.fontName, this.options.height, this.options.is3D, this.options.legend, this.options.pieHole, this.options.pieSliceBorderColor, this.options.pieSliceText, newNested, this.options.pieStartAngle, this.options.reverseCategories, this.options.pieResidueSliceColor, this.options.pieResidueSliceLabel, this.options.slices, this.options.sliceVisibilityThreshold, this.options.title, this.options.titleTextStyle, this.options.tooltip, this.options.width);
      return new Pie(this.data, this.typeName, options);
    }
  }, {
    key: "titleTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.titleTextStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new PieChartOptions(this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.fontSize, this.options.fontName, this.options.height, this.options.is3D, this.options.legend, this.options.pieHole, this.options.pieSliceBorderColor, this.options.pieSliceText, this.options.pieSliceTextStyle, this.options.pieStartAngle, this.options.reverseCategories, this.options.pieResidueSliceColor, this.options.pieResidueSliceLabel, this.options.slices, this.options.sliceVisibilityThreshold, this.options.title, newNested, this.options.tooltip, this.options.width);
      return new Pie(this.data, this.typeName, options);
    }
  }, {
    key: "tooltip",
    value: function (isHtml, showColorCode, trigger) {
      var o = this.options.tooltip;

      var newNested = function () {
        var isHtml_1 = Helpers.right(o, "isHtml", isHtml);
        var showColorCode_1 = Helpers.right(o, "showColorCode", showColorCode);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartTooltip(isHtml_1, showColorCode_1, Helpers.copy(o, "textStyle"), trigger_1);
      }();

      var options = new PieChartOptions(this.options.backgroundColor, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.fontSize, this.options.fontName, this.options.height, this.options.is3D, this.options.legend, this.options.pieHole, this.options.pieSliceBorderColor, this.options.pieSliceText, this.options.pieSliceTextStyle, this.options.pieStartAngle, this.options.reverseCategories, this.options.pieResidueSliceColor, this.options.pieResidueSliceLabel, this.options.slices, this.options.sliceVisibilityThreshold, this.options.title, this.options.titleTextStyle, newNested, this.options.width);
      return new Pie(this.data, this.typeName, options);
    }
  }]);

  return Pie;
}();
setType("TheGamma.GoogleCharts.Extensions.Pie", Pie);
var Bubble = function () {
  function Bubble(data, typeName, options) {
    _classCallCheck(this, Bubble);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Bubble, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Bubble",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: BubbleChartOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (axisTitlesPosition, backgroundColor, colors, enableInteractivity, fontSize, fontName, forceIFrame, height, selectionMode, series, sortBubblesBySize, theme, title, titlePosition, width) {
      var _this11 = this;

      var newOptions = function () {
        var axisTitlesPosition_1 = Helpers.right(_this11.options, "axisTitlesPosition", axisTitlesPosition);
        var backgroundColor_1 = Helpers.right(_this11.options, "backgroundColor", backgroundColor);
        var colors_1 = Helpers.right(_this11.options, "colors", function () {
          var $var51 = colors;

          if ($var51 != null) {
            return function (source) {
              return _Array$from(source);
            }($var51);
          } else {
            return $var51;
          }
        }());
        var enableInteractivity_1 = Helpers.right(_this11.options, "enableInteractivity", enableInteractivity);
        var fontSize_1 = Helpers.right(_this11.options, "fontSize", fontSize);
        var fontName_1 = Helpers.right(_this11.options, "fontName", fontName);
        var forceIFrame_1 = Helpers.right(_this11.options, "forceIFrame", forceIFrame);
        var height_1 = Helpers.right(_this11.options, "height", height);
        var selectionMode_1 = Helpers.right(_this11.options, "selectionMode", selectionMode);
        var series_1 = Helpers.right(_this11.options, "series", series);
        var sortBubblesBySize_1 = Helpers.right(_this11.options, "sortBubblesBySize", sortBubblesBySize);
        var theme_1 = Helpers.right(_this11.options, "theme", theme);
        var title_1 = Helpers.right(_this11.options, "title", title);
        var titlePosition_1 = Helpers.right(_this11.options, "titlePosition", titlePosition);
        var width_1 = Helpers.right(_this11.options, "width", width);
        return new BubbleChartOptions(_this11.options.animation, axisTitlesPosition_1, backgroundColor_1, _this11.options.bubble, _this11.options.chartArea, colors_1, _this11.options.colorAxis, enableInteractivity_1, _this11.options.explorer, fontSize_1, fontName_1, forceIFrame_1, _this11.options.hAxis, height_1, _this11.options.legend, selectionMode_1, series_1, _this11.options.sizeAxis, sortBubblesBySize_1, theme_1, title_1, titlePosition_1, _this11.options.titleTextStyle, _this11.options.tooltip, _this11.options.vAxis, width_1);
      }();

      return new Bubble(this.data, this.typeName, newOptions);
    }
  }, {
    key: "animation",
    value: function (duration, easing) {
      var o = this.options.animation;
      var newNested = new TransitionAnimation(Helpers.right(o, "duration", duration), Helpers.right(o, "easing", easing));
      var options = new BubbleChartOptions(newNested, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bubble, this.options.chartArea, this.options.colors, this.options.colorAxis, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.selectionMode, this.options.series, this.options.sizeAxis, this.options.sortBubblesBySize, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxis, this.options.width);
      return new Bubble(this.data, this.typeName, options);
    }
  }, {
    key: "bubble",
    value: function (opacity, stroke) {
      var o = this.options.bubble;
      var newNested = new ChartBubble(Helpers.right(o, "opacity", opacity), Helpers.right(o, "stroke", stroke), Helpers.copy(o, "textStyle"));
      var options = new BubbleChartOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, newNested, this.options.chartArea, this.options.colors, this.options.colorAxis, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.selectionMode, this.options.series, this.options.sizeAxis, this.options.sortBubblesBySize, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxis, this.options.width);
      return new Bubble(this.data, this.typeName, options);
    }
  }, {
    key: "chartArea",
    value: function (top, left, width, height) {
      var o = this.options.chartArea;
      var newNested = new ChartArea(Helpers.right(o, "top", top), Helpers.right(o, "left", left), Helpers.right(o, "width", width), Helpers.right(o, "height", height));
      var options = new BubbleChartOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bubble, newNested, this.options.colors, this.options.colorAxis, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.selectionMode, this.options.series, this.options.sizeAxis, this.options.sortBubblesBySize, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxis, this.options.width);
      return new Bubble(this.data, this.typeName, options);
    }
  }, {
    key: "colorAxis",
    value: function (minValue, maxValue, values, colors) {
      var o = this.options.colorAxis;
      var newNested = new ChartColorAxis(Helpers.right(o, "minValue", minValue), Helpers.right(o, "maxValue", maxValue), Helpers.right(o, "values", function () {
        var $var52 = values;

        if ($var52 != null) {
          return function (source) {
            return Float64Array.from(source);
          }($var52);
        } else {
          return $var52;
        }
      }()), Helpers.right(o, "colors", function () {
        var $var53 = colors;

        if ($var53 != null) {
          return function (source) {
            return _Array$from(source);
          }($var53);
        } else {
          return $var53;
        }
      }()), Helpers.copy(o, "legend"));
      var options = new BubbleChartOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bubble, this.options.chartArea, this.options.colors, newNested, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.selectionMode, this.options.series, this.options.sizeAxis, this.options.sortBubblesBySize, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxis, this.options.width);
      return new Bubble(this.data, this.typeName, options);
    }
  }, {
    key: "explorer",
    value: function (actions, axis, keepInBounds, maxZoomIn, maxZoomOut, zoomDelta) {
      var o = this.options.explorer;
      var newNested = new ChartExplorer(Helpers.right(o, "actions", function () {
        var $var54 = actions;

        if ($var54 != null) {
          return function (source) {
            return _Array$from(source);
          }($var54);
        } else {
          return $var54;
        }
      }()), Helpers.right(o, "axis", axis), Helpers.right(o, "keepInBounds", keepInBounds), Helpers.right(o, "maxZoomIn", maxZoomIn), Helpers.right(o, "maxZoomOut", maxZoomOut), Helpers.right(o, "zoomDelta", zoomDelta));
      var options = new BubbleChartOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bubble, this.options.chartArea, this.options.colors, this.options.colorAxis, this.options.enableInteractivity, newNested, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.selectionMode, this.options.series, this.options.sizeAxis, this.options.sortBubblesBySize, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxis, this.options.width);
      return new Bubble(this.data, this.typeName, options);
    }
  }, {
    key: "hAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.hAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var55 = ticks;

          if ($var55 != null) {
            return function (source) {
              return _Array$from(source);
            }($var55);
          } else {
            return $var55;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new BubbleChartOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bubble, this.options.chartArea, this.options.colors, this.options.colorAxis, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, newNested, this.options.height, this.options.legend, this.options.selectionMode, this.options.series, this.options.sizeAxis, this.options.sortBubblesBySize, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxis, this.options.width);
      return new Bubble(this.data, this.typeName, options);
    }
  }, {
    key: "legend",
    value: function (alignment, maxLines, position, numberFormat) {
      var o = this.options.legend;

      var newNested = function () {
        var alignment_1 = Helpers.right(o, "alignment", alignment);
        var maxLines_1 = Helpers.right(o, "maxLines", maxLines);
        var position_1 = Helpers.right(o, "position", position);
        var numberFormat_1 = Helpers.right(o, "numberFormat", numberFormat);
        return new ChartLegend(alignment_1, maxLines_1, position_1, Helpers.copy(o, "textStyle"), numberFormat_1);
      }();

      var options = new BubbleChartOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bubble, this.options.chartArea, this.options.colors, this.options.colorAxis, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, newNested, this.options.selectionMode, this.options.series, this.options.sizeAxis, this.options.sortBubblesBySize, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxis, this.options.width);
      return new Bubble(this.data, this.typeName, options);
    }
  }, {
    key: "sizeAxis",
    value: function (maxSize, maxValue, minSize, minValue) {
      var o = this.options.sizeAxis;
      var newNested = new ChartSizeAxis(Helpers.right(o, "maxSize", maxSize), Helpers.right(o, "maxValue", maxValue), Helpers.right(o, "minSize", minSize), Helpers.right(o, "minValue", minValue));
      var options = new BubbleChartOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bubble, this.options.chartArea, this.options.colors, this.options.colorAxis, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.selectionMode, this.options.series, newNested, this.options.sortBubblesBySize, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxis, this.options.width);
      return new Bubble(this.data, this.typeName, options);
    }
  }, {
    key: "titleTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.titleTextStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new BubbleChartOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bubble, this.options.chartArea, this.options.colors, this.options.colorAxis, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.selectionMode, this.options.series, this.options.sizeAxis, this.options.sortBubblesBySize, this.options.theme, this.options.title, this.options.titlePosition, newNested, this.options.tooltip, this.options.vAxis, this.options.width);
      return new Bubble(this.data, this.typeName, options);
    }
  }, {
    key: "tooltip",
    value: function (isHtml, showColorCode, trigger) {
      var o = this.options.tooltip;

      var newNested = function () {
        var isHtml_1 = Helpers.right(o, "isHtml", isHtml);
        var showColorCode_1 = Helpers.right(o, "showColorCode", showColorCode);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartTooltip(isHtml_1, showColorCode_1, Helpers.copy(o, "textStyle"), trigger_1);
      }();

      var options = new BubbleChartOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bubble, this.options.chartArea, this.options.colors, this.options.colorAxis, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.selectionMode, this.options.series, this.options.sizeAxis, this.options.sortBubblesBySize, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, newNested, this.options.vAxis, this.options.width);
      return new Bubble(this.data, this.typeName, options);
    }
  }, {
    key: "vAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.vAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var56 = ticks;

          if ($var56 != null) {
            return function (source) {
              return _Array$from(source);
            }($var56);
          } else {
            return $var56;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new BubbleChartOptions(this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bubble, this.options.chartArea, this.options.colors, this.options.colorAxis, this.options.enableInteractivity, this.options.explorer, this.options.fontSize, this.options.fontName, this.options.forceIFrame, this.options.hAxis, this.options.height, this.options.legend, this.options.selectionMode, this.options.series, this.options.sizeAxis, this.options.sortBubblesBySize, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, newNested, this.options.width);
      return new Bubble(this.data, this.typeName, options);
    }
  }]);

  return Bubble;
}();
setType("TheGamma.GoogleCharts.Extensions.Bubble", Bubble);
var TreeMap = function () {
  function TreeMap(data, typeName, options) {
    _classCallCheck(this, TreeMap);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(TreeMap, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.TreeMap",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: TreeMapOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (fontColor, fontFamily, fontSize, forceIFrame, headerColor, headerHeight, headerHighlightColor, hintOpacity, maxColor, maxDepth, maxHighlightColor, maxPostDepth, maxColorValue, midColor, midHighlightColor, minColor, minHighlightColor, minColorValue, showScale, showTooltips, title, useWeightedAverageForAggregation) {
      var _this12 = this;

      var newOptions = function () {
        var fontColor_1 = Helpers.right(_this12.options, "fontColor", fontColor);
        var fontFamily_1 = Helpers.right(_this12.options, "fontFamily", fontFamily);
        var fontSize_1 = Helpers.right(_this12.options, "fontSize", fontSize);
        var forceIFrame_1 = Helpers.right(_this12.options, "forceIFrame", forceIFrame);
        var headerColor_1 = Helpers.right(_this12.options, "headerColor", headerColor);
        var headerHeight_1 = Helpers.right(_this12.options, "headerHeight", headerHeight);
        var headerHighlightColor_1 = Helpers.right(_this12.options, "headerHighlightColor", headerHighlightColor);
        var hintOpacity_1 = Helpers.right(_this12.options, "hintOpacity", hintOpacity);
        var maxColor_1 = Helpers.right(_this12.options, "maxColor", maxColor);
        var maxDepth_1 = Helpers.right(_this12.options, "maxDepth", maxDepth);
        var maxHighlightColor_1 = Helpers.right(_this12.options, "maxHighlightColor", maxHighlightColor);
        var maxPostDepth_1 = Helpers.right(_this12.options, "maxPostDepth", maxPostDepth);
        var maxColorValue_1 = Helpers.right(_this12.options, "maxColorValue", maxColorValue);
        var midColor_1 = Helpers.right(_this12.options, "midColor", midColor);
        var midHighlightColor_1 = Helpers.right(_this12.options, "midHighlightColor", midHighlightColor);
        var minColor_1 = Helpers.right(_this12.options, "minColor", minColor);
        var minHighlightColor_1 = Helpers.right(_this12.options, "minHighlightColor", minHighlightColor);
        var minColorValue_1 = Helpers.right(_this12.options, "minColorValue", minColorValue);
        var showScale_1 = Helpers.right(_this12.options, "showScale", showScale);
        var showTooltips_1 = Helpers.right(_this12.options, "showTooltips", showTooltips);
        var title_1 = Helpers.right(_this12.options, "title", title);
        var useWeightedAverageForAggregation_1 = Helpers.right(_this12.options, "useWeightedAverageForAggregation", useWeightedAverageForAggregation);
        return new TreeMapOptions(fontColor_1, fontFamily_1, fontSize_1, forceIFrame_1, headerColor_1, headerHeight_1, headerHighlightColor_1, hintOpacity_1, maxColor_1, maxDepth_1, maxHighlightColor_1, maxPostDepth_1, maxColorValue_1, midColor_1, midHighlightColor_1, minColor_1, minHighlightColor_1, minColorValue_1, showScale_1, showTooltips_1, _this12.options.textStyle, title_1, _this12.options.titleTextStyle, useWeightedAverageForAggregation_1);
      }();

      return new TreeMap(this.data, this.typeName, newOptions);
    }
  }, {
    key: "textStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.textStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new TreeMapOptions(this.options.fontColor, this.options.fontFamily, this.options.fontSize, this.options.forceIFrame, this.options.headerColor, this.options.headerHeight, this.options.headerHighlightColor, this.options.hintOpacity, this.options.maxColor, this.options.maxDepth, this.options.maxHighlightColor, this.options.maxPostDepth, this.options.maxColorValue, this.options.midColor, this.options.midHighlightColor, this.options.minColor, this.options.minHighlightColor, this.options.minColorValue, this.options.showScale, this.options.showTooltips, newNested, this.options.title, this.options.titleTextStyle, this.options.useWeightedAverageForAggregation);
      return new TreeMap(this.data, this.typeName, options);
    }
  }, {
    key: "titleTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.titleTextStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new TreeMapOptions(this.options.fontColor, this.options.fontFamily, this.options.fontSize, this.options.forceIFrame, this.options.headerColor, this.options.headerHeight, this.options.headerHighlightColor, this.options.hintOpacity, this.options.maxColor, this.options.maxDepth, this.options.maxHighlightColor, this.options.maxPostDepth, this.options.maxColorValue, this.options.midColor, this.options.midHighlightColor, this.options.minColor, this.options.minHighlightColor, this.options.minColorValue, this.options.showScale, this.options.showTooltips, this.options.textStyle, this.options.title, newNested, this.options.useWeightedAverageForAggregation);
      return new TreeMap(this.data, this.typeName, options);
    }
  }]);

  return TreeMap;
}();
setType("TheGamma.GoogleCharts.Extensions.TreeMap", TreeMap);
var Table = function () {
  function Table(data, typeName, options) {
    _classCallCheck(this, Table);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Table, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Table",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: TableOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (allowHtml, alternatingRowStyle, firstRowNumber, height, page, pageSize, rtlTable, scrollLeftStartPosition, showRowNumber, sort, sortAscending, sortColumn, startPage, width) {
      var _this13 = this;

      var newOptions = function () {
        var allowHtml_1 = Helpers.right(_this13.options, "allowHtml", allowHtml);
        var alternatingRowStyle_1 = Helpers.right(_this13.options, "alternatingRowStyle", alternatingRowStyle);
        var firstRowNumber_1 = Helpers.right(_this13.options, "firstRowNumber", firstRowNumber);
        var height_1 = Helpers.right(_this13.options, "height", height);
        var page_1 = Helpers.right(_this13.options, "page", page);
        var pageSize_1 = Helpers.right(_this13.options, "pageSize", pageSize);
        var rtlTable_1 = Helpers.right(_this13.options, "rtlTable", rtlTable);
        var scrollLeftStartPosition_1 = Helpers.right(_this13.options, "scrollLeftStartPosition", scrollLeftStartPosition);
        var showRowNumber_1 = Helpers.right(_this13.options, "showRowNumber", showRowNumber);
        var sort_1 = Helpers.right(_this13.options, "sort", sort);
        var sortAscending_1 = Helpers.right(_this13.options, "sortAscending", sortAscending);
        var sortColumn_1 = Helpers.right(_this13.options, "sortColumn", sortColumn);
        var startPage_1 = Helpers.right(_this13.options, "startPage", startPage);
        var width_1 = Helpers.right(_this13.options, "width", width);
        return new TableOptions(allowHtml_1, alternatingRowStyle_1, _this13.options.cssClassName, firstRowNumber_1, height_1, page_1, pageSize_1, rtlTable_1, scrollLeftStartPosition_1, showRowNumber_1, sort_1, sortAscending_1, sortColumn_1, startPage_1, width_1);
      }();

      return new Table(this.data, this.typeName, newOptions);
    }
  }, {
    key: "cssClassName",
    value: function (headerRow, tableRow, oddTableRow, selectedTableRow, hoverTableRow, headerCell, tableCell, rowNumberCell) {
      var o = this.options.cssClassName;
      var newNested = new CssClassNames(Helpers.right(o, "headerRow", headerRow), Helpers.right(o, "tableRow", tableRow), Helpers.right(o, "oddTableRow", oddTableRow), Helpers.right(o, "selectedTableRow", selectedTableRow), Helpers.right(o, "hoverTableRow", hoverTableRow), Helpers.right(o, "headerCell", headerCell), Helpers.right(o, "tableCell", tableCell), Helpers.right(o, "rowNumberCell", rowNumberCell));
      var options = new TableOptions(this.options.allowHtml, this.options.alternatingRowStyle, newNested, this.options.firstRowNumber, this.options.height, this.options.page, this.options.pageSize, this.options.rtlTable, this.options.scrollLeftStartPosition, this.options.showRowNumber, this.options.sort, this.options.sortAscending, this.options.sortColumn, this.options.startPage, this.options.width);
      return new Table(this.data, this.typeName, options);
    }
  }]);

  return Table;
}();
setType("TheGamma.GoogleCharts.Extensions.Table", Table);
var Timeline = function () {
  function Timeline(data, typeName, options) {
    _classCallCheck(this, Timeline);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Timeline, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Timeline",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: TimelineOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (avoidOverlappingGridLines, backgroundColor, colors, enableInteractivity, forceIFrame, height, width) {
      var _this14 = this;

      var newOptions = function () {
        var avoidOverlappingGridLines_1 = Helpers.right(_this14.options, "avoidOverlappingGridLines", avoidOverlappingGridLines);
        var backgroundColor_1 = Helpers.right(_this14.options, "backgroundColor", backgroundColor);
        var colors_1 = Helpers.right(_this14.options, "colors", function () {
          var $var57 = colors;

          if ($var57 != null) {
            return function (source) {
              return _Array$from(source);
            }($var57);
          } else {
            return $var57;
          }
        }());
        var enableInteractivity_1 = Helpers.right(_this14.options, "enableInteractivity", enableInteractivity);
        var forceIFrame_1 = Helpers.right(_this14.options, "forceIFrame", forceIFrame);
        var height_1 = Helpers.right(_this14.options, "height", height);
        var width_1 = Helpers.right(_this14.options, "width", width);
        return new TimelineOptions(avoidOverlappingGridLines_1, backgroundColor_1, colors_1, enableInteractivity_1, forceIFrame_1, height_1, _this14.options.timeline, width_1);
      }();

      return new Timeline(this.data, this.typeName, newOptions);
    }
  }, {
    key: "timeline",
    value: function (colorByRowLabel, groupByRowLabel, showRowLabels, singleColor) {
      var o = this.options.timeline;

      var newNested = function () {
        var colorByRowLabel_1 = Helpers.right(o, "colorByRowLabel", colorByRowLabel);
        var groupByRowLabel_1 = Helpers.right(o, "groupByRowLabel", groupByRowLabel);
        var showRowLabels_1 = Helpers.right(o, "showRowLabels", showRowLabels);
        var singleColor_1 = Helpers.right(o, "singleColor", singleColor);
        return new TimelineTimeline(Helpers.copy(o, "barLabelStyle"), colorByRowLabel_1, groupByRowLabel_1, Helpers.copy(o, "rowLabelStyle"), showRowLabels_1, singleColor_1);
      }();

      var options = new TimelineOptions(this.options.avoidOverlappingGridLines, this.options.backgroundColor, this.options.colors, this.options.enableInteractivity, this.options.forceIFrame, this.options.height, newNested, this.options.width);
      return new Timeline(this.data, this.typeName, options);
    }
  }]);

  return Timeline;
}();
setType("TheGamma.GoogleCharts.Extensions.Timeline", Timeline);
var Candlestick = function () {
  function Candlestick(data, typeName, options) {
    _classCallCheck(this, Candlestick);

    this.data = data;
    this.typeName = typeName;
    this.options = options;
  }

  _createClass(Candlestick, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.Candlestick",
        interfaces: ["FSharpRecord", "TheGamma.GoogleCharts.Chart"],
        properties: {
          data: ChartData,
          typeName: "string",
          options: CandlestickChartOptions
        }
      };
    }
  }, {
    key: "show",
    value: function (outputId) {
      Helpers.showChart(this, outputId);
    }
  }, {
    key: "set",
    value: function (aggregationTarget, axisTitlesPosition, backgroundColor, colors, enableInteractivity, focusTarget, fontSize, fontName, height, orientation, reverseCategories, selectionMode, series, theme, title, titlePosition, vAxes, width) {
      var _this15 = this;

      var newOptions = function () {
        var aggregationTarget_1 = Helpers.right(_this15.options, "aggregationTarget", aggregationTarget);
        var axisTitlesPosition_1 = Helpers.right(_this15.options, "axisTitlesPosition", axisTitlesPosition);
        var backgroundColor_1 = Helpers.right(_this15.options, "backgroundColor", backgroundColor);
        var colors_1 = Helpers.right(_this15.options, "colors", function () {
          var $var58 = colors;

          if ($var58 != null) {
            return function (source) {
              return _Array$from(source);
            }($var58);
          } else {
            return $var58;
          }
        }());
        var enableInteractivity_1 = Helpers.right(_this15.options, "enableInteractivity", enableInteractivity);
        var focusTarget_1 = Helpers.right(_this15.options, "focusTarget", focusTarget);
        var fontSize_1 = Helpers.right(_this15.options, "fontSize", fontSize);
        var fontName_1 = Helpers.right(_this15.options, "fontName", fontName);
        var height_1 = Helpers.right(_this15.options, "height", height);
        var orientation_1 = Helpers.right(_this15.options, "orientation", orientation);
        var reverseCategories_1 = Helpers.right(_this15.options, "reverseCategories", reverseCategories);
        var selectionMode_1 = Helpers.right(_this15.options, "selectionMode", selectionMode);
        var series_1 = Helpers.right(_this15.options, "series", series);
        var theme_1 = Helpers.right(_this15.options, "theme", theme);
        var title_1 = Helpers.right(_this15.options, "title", title);
        var titlePosition_1 = Helpers.right(_this15.options, "titlePosition", titlePosition);
        var vAxes_1 = Helpers.right(_this15.options, "vAxes", vAxes);
        var width_1 = Helpers.right(_this15.options, "width", width);
        return new CandlestickChartOptions(aggregationTarget_1, _this15.options.animation, axisTitlesPosition_1, backgroundColor_1, _this15.options.bar, _this15.options.candlestick, _this15.options.chartArea, colors_1, enableInteractivity_1, focusTarget_1, fontSize_1, fontName_1, _this15.options.hAxis, height_1, _this15.options.legend, orientation_1, reverseCategories_1, selectionMode_1, series_1, theme_1, title_1, titlePosition_1, _this15.options.titleTextStyle, _this15.options.tooltip, vAxes_1, _this15.options.vAxis, width_1);
      }();

      return new Candlestick(this.data, this.typeName, newOptions);
    }
  }, {
    key: "animation",
    value: function (duration, easing) {
      var o = this.options.animation;
      var newNested = new TransitionAnimation(Helpers.right(o, "duration", duration), Helpers.right(o, "easing", easing));
      var options = new CandlestickChartOptions(this.options.aggregationTarget, newNested, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.candlestick, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Candlestick(this.data, this.typeName, options);
    }
  }, {
    key: "bar",
    value: function (groupWidth) {
      var o = this.options.bar;
      var newNested = new GroupWidth(Helpers.right(o, "groupWidth", groupWidth));
      var options = new CandlestickChartOptions(this.options.aggregationTarget, this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, newNested, this.options.candlestick, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Candlestick(this.data, this.typeName, options);
    }
  }, {
    key: "candlestick",
    value: function (hollowIsRising) {
      var o = this.options.candlestick;
      var newNested = new CandlestickCandlestick(Helpers.right(o, "hollowIsRising", hollowIsRising), Helpers.copy(o, "fallingColor"), Helpers.copy(o, "risingColor"));
      var options = new CandlestickChartOptions(this.options.aggregationTarget, this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, newNested, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Candlestick(this.data, this.typeName, options);
    }
  }, {
    key: "chartArea",
    value: function (top, left, width, height) {
      var o = this.options.chartArea;
      var newNested = new ChartArea(Helpers.right(o, "top", top), Helpers.right(o, "left", left), Helpers.right(o, "width", width), Helpers.right(o, "height", height));
      var options = new CandlestickChartOptions(this.options.aggregationTarget, this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.candlestick, newNested, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Candlestick(this.data, this.typeName, options);
    }
  }, {
    key: "hAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.hAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var59 = ticks;

          if ($var59 != null) {
            return function (source) {
              return _Array$from(source);
            }($var59);
          } else {
            return $var59;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new CandlestickChartOptions(this.options.aggregationTarget, this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.candlestick, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, newNested, this.options.height, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Candlestick(this.data, this.typeName, options);
    }
  }, {
    key: "legend",
    value: function (alignment, maxLines, position, numberFormat) {
      var o = this.options.legend;

      var newNested = function () {
        var alignment_1 = Helpers.right(o, "alignment", alignment);
        var maxLines_1 = Helpers.right(o, "maxLines", maxLines);
        var position_1 = Helpers.right(o, "position", position);
        var numberFormat_1 = Helpers.right(o, "numberFormat", numberFormat);
        return new ChartLegend(alignment_1, maxLines_1, position_1, Helpers.copy(o, "textStyle"), numberFormat_1);
      }();

      var options = new CandlestickChartOptions(this.options.aggregationTarget, this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.candlestick, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, newNested, this.options.orientation, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Candlestick(this.data, this.typeName, options);
    }
  }, {
    key: "titleTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      var o = this.options.titleTextStyle;
      var newNested = new ChartTextStyle(Helpers.right(o, "fontName", fontName), Helpers.right(o, "fontSize", fontSize), Helpers.right(o, "bold", bold), Helpers.right(o, "italic", italic), Helpers.right(o, "color", color), Helpers.right(o, "auraColor", auraColor), Helpers.right(o, "opacity", opacity));
      var options = new CandlestickChartOptions(this.options.aggregationTarget, this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.candlestick, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, newNested, this.options.tooltip, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Candlestick(this.data, this.typeName, options);
    }
  }, {
    key: "tooltip",
    value: function (isHtml, showColorCode, trigger) {
      var o = this.options.tooltip;

      var newNested = function () {
        var isHtml_1 = Helpers.right(o, "isHtml", isHtml);
        var showColorCode_1 = Helpers.right(o, "showColorCode", showColorCode);
        var trigger_1 = Helpers.right(o, "trigger", trigger);
        return new ChartTooltip(isHtml_1, showColorCode_1, Helpers.copy(o, "textStyle"), trigger_1);
      }();

      var options = new CandlestickChartOptions(this.options.aggregationTarget, this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.candlestick, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, newNested, this.options.vAxes, this.options.vAxis, this.options.width);
      return new Candlestick(this.data, this.typeName, options);
    }
  }, {
    key: "vAxis",
    value: function (baseline, baselineColor, direction, format, logScale, textPosition, ticks, title, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode) {
      var o = this.options.vAxis;

      var newNested = function () {
        var baseline_1 = Helpers.right(o, "baseline", baseline);
        var baselineColor_1 = Helpers.right(o, "baselineColor", baselineColor);
        var direction_1 = Helpers.right(o, "direction", direction);
        var format_1 = Helpers.right(o, "format", format);
        var logScale_1 = Helpers.right(o, "logScale", logScale);
        var textPosition_1 = Helpers.right(o, "textPosition", textPosition);
        var ticks_1 = Helpers.right(o, "ticks", function () {
          var $var60 = ticks;

          if ($var60 != null) {
            return function (source) {
              return _Array$from(source);
            }($var60);
          } else {
            return $var60;
          }
        }());
        var title_1 = Helpers.right(o, "title", title);
        var allowContainerBoundaryTextCufoff_1 = Helpers.right(o, "allowContainerBoundaryTextCufoff", allowContainerBoundaryTextCufoff);
        var slantedText_1 = Helpers.right(o, "slantedText", slantedText);
        var slantedTextAngle_1 = Helpers.right(o, "slantedTextAngle", slantedTextAngle);
        var maxAlternation_1 = Helpers.right(o, "maxAlternation", maxAlternation);
        var maxTextLines_1 = Helpers.right(o, "maxTextLines", maxTextLines);
        var minTextSpacing_1 = Helpers.right(o, "minTextSpacing", minTextSpacing);
        var showTextEvery_1 = Helpers.right(o, "showTextEvery", showTextEvery);
        var maxValue_1 = Helpers.right(o, "maxValue", maxValue);
        var minValue_1 = Helpers.right(o, "minValue", minValue);
        var viewWindowMode_1 = Helpers.right(o, "viewWindowMode", viewWindowMode);
        return new ChartAxis(baseline_1, baselineColor_1, direction_1, format_1, Helpers.copy(o, "gridlines"), Helpers.copy(o, "minorGridlines"), logScale_1, textPosition_1, Helpers.copy(o, "textStyle"), ticks_1, title_1, Helpers.copy(o, "titleTextStyle"), allowContainerBoundaryTextCufoff_1, slantedText_1, slantedTextAngle_1, maxAlternation_1, maxTextLines_1, minTextSpacing_1, showTextEvery_1, maxValue_1, minValue_1, viewWindowMode_1, Helpers.copy(o, "viewWindow"));
      }();

      var options = new CandlestickChartOptions(this.options.aggregationTarget, this.options.animation, this.options.axisTitlesPosition, this.options.backgroundColor, this.options.bar, this.options.candlestick, this.options.chartArea, this.options.colors, this.options.enableInteractivity, this.options.focusTarget, this.options.fontSize, this.options.fontName, this.options.hAxis, this.options.height, this.options.legend, this.options.orientation, this.options.reverseCategories, this.options.selectionMode, this.options.series, this.options.theme, this.options.title, this.options.titlePosition, this.options.titleTextStyle, this.options.tooltip, this.options.vAxes, newNested, this.options.width);
      return new Candlestick(this.data, this.typeName, options);
    }
  }]);

  return Candlestick;
}();
setType("TheGamma.GoogleCharts.Extensions.Candlestick", Candlestick);

function GeoChartOptions_get_empty_Static() {
  return new GeoChartOptions(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
}

function ScatterChartOptions_get_empty_Static() {
  return new ScatterChartOptions(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
}

function ColumnChartOptions_get_empty_Static() {
  return new ColumnChartOptions(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
}

function LineChartOptions_get_empty_Static() {
  return new LineChartOptions(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
}

function BarChartOptions_get_empty_Static() {
  return new BarChartOptions(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
}

function AreaChartOptions_get_empty_Static() {
  return new AreaChartOptions(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
}

function PieChartOptions_get_empty_Static() {
  return new PieChartOptions(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
}

var options$1 = function () {
  function options() {
    _classCallCheck(this, options);
  }

  _createClass(options, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.Extensions.options",
        properties: {}
      };
    }
  }], [{
    key: "chartSizeAxis",
    value: function (maxSize, maxValue, minSize, minValue) {
      return new ChartSizeAxis(Helpers.orDefault(maxSize), Helpers.orDefault(maxValue), Helpers.orDefault(minSize), Helpers.orDefault(minValue));
    }
  }, {
    key: "chartTextStyle",
    value: function (fontName, fontSize, bold, italic, color, auraColor, opacity) {
      return new ChartTextStyle(Helpers.orDefault(fontName), Helpers.orDefault(fontSize), Helpers.orDefault(bold), Helpers.orDefault(italic), Helpers.orDefault(color), Helpers.orDefault(auraColor), Helpers.orDefault(opacity));
    }
  }, {
    key: "chartTooltip",
    value: function (isHtml, showColorCode, textStyle, trigger) {
      return new ChartTooltip(Helpers.orDefault(isHtml), Helpers.orDefault(showColorCode), Helpers.orDefault(textStyle), Helpers.orDefault(trigger));
    }
  }, {
    key: "chartLegend",
    value: function (alignment, maxLines, position, textStyle, numberFormat) {
      return new ChartLegend(Helpers.orDefault(alignment), Helpers.orDefault(maxLines), Helpers.orDefault(position), Helpers.orDefault(textStyle), Helpers.orDefault(numberFormat));
    }
  }, {
    key: "chartColorAxis",
    value: function (minValue, maxValue, values, colors, legend) {
      return new ChartColorAxis(Helpers.orDefault(minValue), Helpers.orDefault(maxValue), Helpers.orDefault(function () {
        var $var61 = values;

        if ($var61 != null) {
          return function (source) {
            return Float64Array.from(source);
          }($var61);
        } else {
          return $var61;
        }
      }()), Helpers.orDefault(function () {
        var $var62 = colors;

        if ($var62 != null) {
          return function (source) {
            return _Array$from(source);
          }($var62);
        } else {
          return $var62;
        }
      }()), Helpers.orDefault(legend));
    }
  }, {
    key: "geoChartMagnifyingGlass",
    value: function (enable, zoomFactor) {
      return new GeoChartMagnifyingGlass(Helpers.orDefault(enable), Helpers.orDefault(zoomFactor));
    }
  }, {
    key: "chartBoxStyleGradient",
    value: function (color1, color2, x1, y1, x2, y2, useObjectBoundingBoxUnits) {
      return new ChartBoxStyleGradient(Helpers.orDefault(color1), Helpers.orDefault(color2), Helpers.orDefault(x1), Helpers.orDefault(y1), Helpers.orDefault(x2), Helpers.orDefault(y2), Helpers.orDefault(useObjectBoundingBoxUnits));
    }
  }, {
    key: "chartBoxStyle",
    value: function (stroke, strokeWidth, rx, ry, gradient) {
      return new ChartBoxStyle(Helpers.orDefault(stroke), Helpers.orDefault(strokeWidth), Helpers.orDefault(rx), Helpers.orDefault(ry), Helpers.orDefault(gradient));
    }
  }, {
    key: "chartAnnotations",
    value: function (boxStyle, textStyle) {
      return new ChartAnnotations(Helpers.orDefault(boxStyle), Helpers.orDefault(textStyle));
    }
  }, {
    key: "chartCrosshairFocused",
    value: function (color, opacity) {
      return new ChartCrosshairFocused(Helpers.orDefault(color), Helpers.orDefault(opacity));
    }
  }, {
    key: "chartCrosshairSelected",
    value: function (color, opacity) {
      return new ChartCrosshairSelected(Helpers.orDefault(color), Helpers.orDefault(opacity));
    }
  }, {
    key: "chartCrosshair",
    value: function (color, focused, opacity, orientation, selected, trigger) {
      return new ChartCrosshair(Helpers.orDefault(color), Helpers.orDefault(focused), Helpers.orDefault(opacity), Helpers.orDefault(orientation), Helpers.orDefault(selected), Helpers.orDefault(trigger));
    }
  }, {
    key: "chartExplorer",
    value: function (actions, axis, keepInBounds, maxZoomIn, maxZoomOut, zoomDelta) {
      return new ChartExplorer(Helpers.orDefault(function () {
        var $var63 = actions;

        if ($var63 != null) {
          return function (source) {
            return _Array$from(source);
          }($var63);
        } else {
          return $var63;
        }
      }()), Helpers.orDefault(axis), Helpers.orDefault(keepInBounds), Helpers.orDefault(maxZoomIn), Helpers.orDefault(maxZoomOut), Helpers.orDefault(zoomDelta));
    }
  }, {
    key: "chartStroke",
    value: function (stroke, strokeWidth, fill) {
      return new ChartStroke(Helpers.orDefault(stroke), Helpers.orDefault(strokeWidth), Helpers.orDefault(fill));
    }
  }, {
    key: "chartArea",
    value: function (top, left, width, height) {
      return new ChartArea(Helpers.orDefault(top), Helpers.orDefault(left), Helpers.orDefault(width), Helpers.orDefault(height));
    }
  }, {
    key: "transitionAnimation",
    value: function (duration, easing) {
      return new TransitionAnimation(Helpers.orDefault(duration), Helpers.orDefault(easing));
    }
  }, {
    key: "chartGridlines",
    value: function (color, count) {
      return new ChartGridlines(Helpers.orDefault(color), Helpers.orDefault(count));
    }
  }, {
    key: "chartViewWindow",
    value: function (max, min) {
      return new ChartViewWindow(Helpers.orDefault(max), Helpers.orDefault(min));
    }
  }, {
    key: "chartAxis",
    value: function (baseline, baselineColor, direction, format, gridlines, minorGridlines, logScale, textPosition, textStyle, ticks, title, titleTextStyle, allowContainerBoundaryTextCufoff, slantedText, slantedTextAngle, maxAlternation, maxTextLines, minTextSpacing, showTextEvery, maxValue, minValue, viewWindowMode, viewWindow) {
      return new ChartAxis(Helpers.orDefault(baseline), Helpers.orDefault(baselineColor), Helpers.orDefault(direction), Helpers.orDefault(format), Helpers.orDefault(gridlines), Helpers.orDefault(minorGridlines), Helpers.orDefault(logScale), Helpers.orDefault(textPosition), Helpers.orDefault(textStyle), Helpers.orDefault(function () {
        var $var64 = ticks;

        if ($var64 != null) {
          return function (source) {
            return _Array$from(source);
          }($var64);
        } else {
          return $var64;
        }
      }()), Helpers.orDefault(title), Helpers.orDefault(titleTextStyle), Helpers.orDefault(allowContainerBoundaryTextCufoff), Helpers.orDefault(slantedText), Helpers.orDefault(slantedTextAngle), Helpers.orDefault(maxAlternation), Helpers.orDefault(maxTextLines), Helpers.orDefault(minTextSpacing), Helpers.orDefault(showTextEvery), Helpers.orDefault(maxValue), Helpers.orDefault(minValue), Helpers.orDefault(viewWindowMode), Helpers.orDefault(viewWindow));
    }
  }, {
    key: "chartBoundingBox",
    value: function (left, top, width, height) {
      return new ChartBoundingBox(Helpers.orDefault(left), Helpers.orDefault(top), Helpers.orDefault(width), Helpers.orDefault(height));
    }
  }, {
    key: "groupWidth",
    value: function (_groupWidth) {
      return new GroupWidth(Helpers.orDefault(_groupWidth));
    }
  }, {
    key: "trendline",
    value: function (color, lineWidth, labelInLegend, opacity, pointSize, pointsVisible, showR2, type, visibleInLegend) {
      return new Trendline(Helpers.orDefault(color), Helpers.orDefault(lineWidth), Helpers.orDefault(labelInLegend), Helpers.orDefault(opacity), Helpers.orDefault(pointSize), Helpers.orDefault(pointsVisible), Helpers.orDefault(showR2), Helpers.orDefault(type), Helpers.orDefault(visibleInLegend));
    }
  }, {
    key: "histogramHistogram",
    value: function (bucketSize, hideBucketItems, lastBucketPercentile) {
      return new HistogramHistogram(Helpers.orDefault(bucketSize), Helpers.orDefault(hideBucketItems), Helpers.orDefault(lastBucketPercentile));
    }
  }, {
    key: "chartBubble",
    value: function (opacity, stroke, textStyle) {
      return new ChartBubble(Helpers.orDefault(opacity), Helpers.orDefault(stroke), Helpers.orDefault(textStyle));
    }
  }, {
    key: "cssClassNames",
    value: function (headerRow, tableRow, oddTableRow, selectedTableRow, hoverTableRow, headerCell, tableCell, rowNumberCell) {
      return new CssClassNames(Helpers.orDefault(headerRow), Helpers.orDefault(tableRow), Helpers.orDefault(oddTableRow), Helpers.orDefault(selectedTableRow), Helpers.orDefault(hoverTableRow), Helpers.orDefault(headerCell), Helpers.orDefault(tableCell), Helpers.orDefault(rowNumberCell));
    }
  }, {
    key: "labelStyle",
    value: function (color, fontName, fontSize) {
      return new LabelStyle(Helpers.orDefault(color), Helpers.orDefault(fontName), Helpers.orDefault(fontSize));
    }
  }, {
    key: "timelineTimeline",
    value: function (barLabelStyle, colorByRowLabel, groupByRowLabel, rowLabelStyle, showRowLabels, singleColor) {
      return new TimelineTimeline(Helpers.orDefault(barLabelStyle), Helpers.orDefault(colorByRowLabel), Helpers.orDefault(groupByRowLabel), Helpers.orDefault(rowLabelStyle), Helpers.orDefault(showRowLabels), Helpers.orDefault(singleColor));
    }
  }, {
    key: "candlestickCandlestick",
    value: function (hollowIsRising, fallingColor, risingColor) {
      return new CandlestickCandlestick(Helpers.orDefault(hollowIsRising), Helpers.orDefault(fallingColor), Helpers.orDefault(risingColor));
    }
  }]);

  return options;
}();

setType("TheGamma.GoogleCharts.Extensions.options", options$1);

var chart = function () {
  function chart() {
    _classCallCheck(this, chart);
  }

  _createClass(chart, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.GoogleCharts.chart",
        properties: {}
      };
    }
  }], [{
    key: "scatter",
    value: function (xval, yval) {
      return new Scatter(ChartDataOperations.twoValues(xval, yval), "ScatterChart", ScatterChartOptions_get_empty_Static());
    }
  }, {
    key: "geo",
    value: function (data) {
      return new Geo(ChartDataOperations.oneKeyValue("string", data), "GeoChart", GeoChartOptions_get_empty_Static());
    }
  }, {
    key: "pie",
    value: function (data) {
      return new Pie(ChartDataOperations.oneKeyValue("string", data), "PieChart", PieChartOptions_get_empty_Static());
    }
  }, {
    key: "bar",
    value: function (data) {
      return new Bar(ChartDataOperations.oneKeyValue("string", data), "BarChart", BarChartOptions_get_empty_Static());
    }
  }, {
    key: "column",
    value: function (data) {
      return new Column(ChartDataOperations.oneKeyValue("string", data), "ColumnChart", ColumnChartOptions_get_empty_Static());
    }
  }, {
    key: "columns",
    value: function (data, colors) {
      return new Line(ChartDataOperations.oneKeyAppendValues("string", data, colors), "ColumnChart", LineChartOptions_get_empty_Static());
    }
  }, {
    key: "line",
    value: function (data) {
      return new Line(ChartDataOperations.oneKeyValue("number", data), "LineChart", LineChartOptions_get_empty_Static());
    }
  }, {
    key: "lines",
    value: function (data) {
      return new Line(ChartDataOperations.oneKeyNValues("number", data), "LineChart", LineChartOptions_get_empty_Static());
    }
  }, {
    key: "area",
    value: function (data) {
      return new Area(ChartDataOperations.oneKeyValue("number", data), "AreaChart", AreaChartOptions_get_empty_Static());
    }
  }, {
    key: "areas",
    value: function (data, names) {
      var i = {
        contents: 0
      };
      var data_1 = names == null ? data : data.map(function (s) {
        void i.contents++;
        return s.setProperties(null, null, names[i.contents - 1]);
      });
      return new Area(ChartDataOperations.oneKeyNValues("number", data_1), "AreaChart", AreaChartOptions_get_empty_Static());
    }
  }, {
    key: "show",
    value: function (chart_1) {
      return function (outputId) {
        Helpers.showChart(chart_1, outputId);
      };
    }
  }]);

  return chart;
}();
setType("TheGamma.GoogleCharts.chart", chart);

var nativeIsArray = Array.isArray;
var toString$4 = Object.prototype.toString;

var index$4 = nativeIsArray || isArray$5;

function isArray$5(obj) {
    return toString$4.call(obj) === "[object Array]"
}

var version$2 = "2";

var version$1 = version$2;

VirtualPatch.NONE = 0;
VirtualPatch.VTEXT = 1;
VirtualPatch.VNODE = 2;
VirtualPatch.WIDGET = 3;
VirtualPatch.PROPS = 4;
VirtualPatch.ORDER = 5;
VirtualPatch.INSERT = 6;
VirtualPatch.REMOVE = 7;
VirtualPatch.THUNK = 8;

var vpatch = VirtualPatch;

function VirtualPatch(type, vNode, patch) {
    this.type = Number(type);
    this.vNode = vNode;
    this.patch = patch;
}

VirtualPatch.prototype.version = version$1;
VirtualPatch.prototype.type = "VirtualPatch";

var version$4 = version$2;

var isVnode = isVirtualNode;

function isVirtualNode(x) {
    return x && x.type === "VirtualNode" && x.version === version$4
}

var version$5 = version$2;

var isVtext = isVirtualText;

function isVirtualText(x) {
    return x && x.type === "VirtualText" && x.version === version$5
}

var isWidget_1 = isWidget$1;

function isWidget$1(w) {
    return w && w.type === "Widget"
}

var isThunk_1 = isThunk$1;

function isThunk$1(t) {
    return t && t.type === "Thunk"
}

var isVNode$1 = isVnode;
var isVText$1 = isVtext;
var isWidget$2 = isWidget_1;
var isThunk$2 = isThunk_1;

var handleThunk_1 = handleThunk$1;

function handleThunk$1(a, b) {
    var renderedA = a;
    var renderedB = b;

    if (isThunk$2(b)) {
        renderedB = renderThunk(b, a);
    }

    if (isThunk$2(a)) {
        renderedA = renderThunk(a, null);
    }

    return {
        a: renderedA,
        b: renderedB
    }
}

function renderThunk(thunk, previous) {
    var renderedThunk = thunk.vnode;

    if (!renderedThunk) {
        renderedThunk = thunk.vnode = thunk.render(previous);
    }

    if (!(isVNode$1(renderedThunk) ||
            isVText$1(renderedThunk) ||
            isWidget$2(renderedThunk))) {
        throw new Error("thunk did not return a valid node");
    }

    return renderedThunk
}

var index$6 = function isObject(x) {
	return typeof x === "object" && x !== null;
};

var isVhook = isHook$1;

function isHook$1(hook) {
    return hook &&
      (typeof hook.hook === "function" && !hook.hasOwnProperty("hook") ||
       typeof hook.unhook === "function" && !hook.hasOwnProperty("unhook"))
}

var isObject$6 = index$6;
var isHook = isVhook;

var diffProps_1 = diffProps$1;

function diffProps$1(a, b) {
    var diff;

    for (var aKey in a) {
        if (!(aKey in b)) {
            diff = diff || {};
            diff[aKey] = undefined;
        }

        var aValue = a[aKey];
        var bValue = b[aKey];

        if (aValue === bValue) {
            continue
        } else if (isObject$6(aValue) && isObject$6(bValue)) {
            if (getPrototype(bValue) !== getPrototype(aValue)) {
                diff = diff || {};
                diff[aKey] = bValue;
            } else if (isHook(bValue)) {
                 diff = diff || {};
                 diff[aKey] = bValue;
            } else {
                var objectDiff = diffProps$1(aValue, bValue);
                if (objectDiff) {
                    diff = diff || {};
                    diff[aKey] = objectDiff;
                }
            }
        } else {
            diff = diff || {};
            diff[aKey] = bValue;
        }
    }

    for (var bKey in b) {
        if (!(bKey in a)) {
            diff = diff || {};
            diff[bKey] = b[bKey];
        }
    }

    return diff
}

function getPrototype(value) {
  if (Object.getPrototypeOf) {
    return Object.getPrototypeOf(value)
  } else if (value.__proto__) {
    return value.__proto__
  } else if (value.constructor) {
    return value.constructor.prototype
  }
}

var isArray$4 = index$4;

var VPatch = vpatch;
var isVNode = isVnode;
var isVText = isVtext;
var isWidget = isWidget_1;
var isThunk = isThunk_1;
var handleThunk = handleThunk_1;

var diffProps = diffProps_1;

var diff_1$2 = diff$2;

function diff$2(a, b) {
    var patch = { a: a };
    walk(a, b, patch, 0);
    return patch
}

function walk(a, b, patch, index) {
    if (a === b) {
        return
    }

    var apply = patch[index];
    var applyClear = false;

    if (isThunk(a) || isThunk(b)) {
        thunks(a, b, patch, index);
    } else if (b == null) {

        // If a is a widget we will add a remove patch for it
        // Otherwise any child widgets/hooks must be destroyed.
        // This prevents adding two remove patches for a widget.
        if (!isWidget(a)) {
            clearState(a, patch, index);
            apply = patch[index];
        }

        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b));
    } else if (isVNode(b)) {
        if (isVNode(a)) {
            if (a.tagName === b.tagName &&
                a.namespace === b.namespace &&
                a.key === b.key) {
                var propsPatch = diffProps(a.properties, b.properties);
                if (propsPatch) {
                    apply = appendPatch(apply,
                        new VPatch(VPatch.PROPS, a, propsPatch));
                }
                apply = diffChildren(a, b, patch, apply, index);
            } else {
                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b));
                applyClear = true;
            }
        } else {
            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b));
            applyClear = true;
        }
    } else if (isVText(b)) {
        if (!isVText(a)) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b));
            applyClear = true;
        } else if (a.text !== b.text) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b));
        }
    } else if (isWidget(b)) {
        if (!isWidget(a)) {
            applyClear = true;
        }

        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b));
    }

    if (apply) {
        patch[index] = apply;
    }

    if (applyClear) {
        clearState(a, patch, index);
    }
}

function diffChildren(a, b, patch, apply, index) {
    var aChildren = a.children;
    var orderedSet = reorder(aChildren, b.children);
    var bChildren = orderedSet.children;

    var aLen = aChildren.length;
    var bLen = bChildren.length;
    var len = aLen > bLen ? aLen : bLen;

    for (var i = 0; i < len; i++) {
        var leftNode = aChildren[i];
        var rightNode = bChildren[i];
        index += 1;

        if (!leftNode) {
            if (rightNode) {
                // Excess nodes in b need to be added
                apply = appendPatch(apply,
                    new VPatch(VPatch.INSERT, null, rightNode));
            }
        } else {
            walk(leftNode, rightNode, patch, index);
        }

        if (isVNode(leftNode) && leftNode.count) {
            index += leftNode.count;
        }
    }

    if (orderedSet.moves) {
        // Reorder nodes last
        apply = appendPatch(apply, new VPatch(
            VPatch.ORDER,
            a,
            orderedSet.moves
        ));
    }

    return apply
}

function clearState(vNode, patch, index) {
    // TODO: Make this a single walk, not two
    unhook(vNode, patch, index);
    destroyWidgets(vNode, patch, index);
}

// Patch records for all destroyed widgets must be added because we need
// a DOM node reference for the destroy function
function destroyWidgets(vNode, patch, index) {
    if (isWidget(vNode)) {
        if (typeof vNode.destroy === "function") {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(VPatch.REMOVE, vNode, null)
            );
        }
    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {
        var children = vNode.children;
        var len = children.length;
        for (var i = 0; i < len; i++) {
            var child = children[i];
            index += 1;

            destroyWidgets(child, patch, index);

            if (isVNode(child) && child.count) {
                index += child.count;
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index);
    }
}

// Create a sub-patch for thunks
function thunks(a, b, patch, index) {
    var nodes = handleThunk(a, b);
    var thunkPatch = diff$2(nodes.a, nodes.b);
    if (hasPatches(thunkPatch)) {
        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch);
    }
}

function hasPatches(patch) {
    for (var index in patch) {
        if (index !== "a") {
            return true
        }
    }

    return false
}

// Execute hooks when two nodes are identical
function unhook(vNode, patch, index) {
    if (isVNode(vNode)) {
        if (vNode.hooks) {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(
                    VPatch.PROPS,
                    vNode,
                    undefinedKeys(vNode.hooks)
                )
            );
        }

        if (vNode.descendantHooks || vNode.hasThunks) {
            var children = vNode.children;
            var len = children.length;
            for (var i = 0; i < len; i++) {
                var child = children[i];
                index += 1;

                unhook(child, patch, index);

                if (isVNode(child) && child.count) {
                    index += child.count;
                }
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index);
    }
}

function undefinedKeys(obj) {
    var result = {};

    for (var key in obj) {
        result[key] = undefined;
    }

    return result
}

// List diff, naive left to right reordering
function reorder(aChildren, bChildren) {
    // O(M) time, O(M) memory
    var bChildIndex = keyIndex(bChildren);
    var bKeys = bChildIndex.keys;
    var bFree = bChildIndex.free;

    if (bFree.length === bChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(N) time, O(N) memory
    var aChildIndex = keyIndex(aChildren);
    var aKeys = aChildIndex.keys;
    var aFree = aChildIndex.free;

    if (aFree.length === aChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(MAX(N, M)) memory
    var newChildren = [];

    var freeIndex = 0;
    var freeCount = bFree.length;
    var deletedItems = 0;

    // Iterate through a and match a node in b
    // O(N) time,
    for (var i = 0 ; i < aChildren.length; i++) {
        var aItem = aChildren[i];
        var itemIndex;

        if (aItem.key) {
            if (bKeys.hasOwnProperty(aItem.key)) {
                // Match up the old keys
                itemIndex = bKeys[aItem.key];
                newChildren.push(bChildren[itemIndex]);

            } else {
                // Remove old keyed items
                itemIndex = i - deletedItems++;
                newChildren.push(null);
            }
        } else {
            // Match the item in a with the next free item in b
            if (freeIndex < freeCount) {
                itemIndex = bFree[freeIndex++];
                newChildren.push(bChildren[itemIndex]);
            } else {
                // There are no free items in b to match with
                // the free items in a, so the extra free nodes
                // are deleted.
                itemIndex = i - deletedItems++;
                newChildren.push(null);
            }
        }
    }

    var lastFreeIndex = freeIndex >= bFree.length ?
        bChildren.length :
        bFree[freeIndex];

    // Iterate through b and append any new keys
    // O(M) time
    for (var j = 0; j < bChildren.length; j++) {
        var newItem = bChildren[j];

        if (newItem.key) {
            if (!aKeys.hasOwnProperty(newItem.key)) {
                // Add any new keyed items
                // We are adding new items to the end and then sorting them
                // in place. In future we should insert new items in place.
                newChildren.push(newItem);
            }
        } else if (j >= lastFreeIndex) {
            // Add any leftover non-keyed items
            newChildren.push(newItem);
        }
    }

    var simulate = newChildren.slice();
    var simulateIndex = 0;
    var removes = [];
    var inserts = [];
    var simulateItem;

    for (var k = 0; k < bChildren.length;) {
        var wantedItem = bChildren[k];
        simulateItem = simulate[simulateIndex];

        // remove items
        while (simulateItem === null && simulate.length) {
            removes.push(remove$3(simulate, simulateIndex, null));
            simulateItem = simulate[simulateIndex];
        }

        if (!simulateItem || simulateItem.key !== wantedItem.key) {
            // if we need a key in this position...
            if (wantedItem.key) {
                if (simulateItem && simulateItem.key) {
                    // if an insert doesn't put this key in place, it needs to move
                    if (bKeys[simulateItem.key] !== k + 1) {
                        removes.push(remove$3(simulate, simulateIndex, simulateItem.key));
                        simulateItem = simulate[simulateIndex];
                        // if the remove didn't put the wanted item in place, we need to insert it
                        if (!simulateItem || simulateItem.key !== wantedItem.key) {
                            inserts.push({key: wantedItem.key, to: k});
                        }
                        // items are matching, so skip ahead
                        else {
                            simulateIndex++;
                        }
                    }
                    else {
                        inserts.push({key: wantedItem.key, to: k});
                    }
                }
                else {
                    inserts.push({key: wantedItem.key, to: k});
                }
                k++;
            }
            // a key in simulate has no matching wanted key, remove it
            else if (simulateItem && simulateItem.key) {
                removes.push(remove$3(simulate, simulateIndex, simulateItem.key));
            }
        }
        else {
            simulateIndex++;
            k++;
        }
    }

    // remove all the remaining nodes from simulate
    while(simulateIndex < simulate.length) {
        simulateItem = simulate[simulateIndex];
        removes.push(remove$3(simulate, simulateIndex, simulateItem && simulateItem.key));
    }

    // If the only moves we have are deletes then we can just
    // let the delete patch remove these items.
    if (removes.length === deletedItems && !inserts.length) {
        return {
            children: newChildren,
            moves: null
        }
    }

    return {
        children: newChildren,
        moves: {
            removes: removes,
            inserts: inserts
        }
    }
}

function remove$3(arr, index, key) {
    arr.splice(index, 1);

    return {
        from: index,
        key: key
    }
}

function keyIndex(children) {
    var keys = {};
    var free = [];
    var length = children.length;

    for (var i = 0; i < length; i++) {
        var child = children[i];

        if (child.key) {
            keys[child.key] = i;
        } else {
            free.push(i);
        }
    }

    return {
        keys: keys,     // A hash of key name to index
        free: free      // An array of unkeyed item indices
    }
}

function appendPatch(apply, patch) {
    if (apply) {
        if (isArray$4(apply)) {
            apply.push(patch);
        } else {
            apply = [apply, patch];
        }

        return apply
    } else {
        return patch
    }
}

var diff$1 = diff_1$2;

var diff_1 = diff$1;

var slice$1 = Array.prototype.slice;

var index$10 = iterativelyWalk;

function iterativelyWalk(nodes, cb) {
    if (!('length' in nodes)) {
        nodes = [nodes];
    }
    
    nodes = slice$1.call(nodes);

    while(nodes.length) {
        var node = nodes.shift(),
            ret = cb(node);

        if (ret) {
            return ret
        }

        if (node.childNodes && node.childNodes.length) {
            nodes = slice$1.call(node.childNodes).concat(nodes);
        }
    }
}

var domComment = Comment$1;

function Comment$1(data, owner) {
    if (!(this instanceof Comment$1)) {
        return new Comment$1(data, owner)
    }

    this.data = data;
    this.nodeValue = data;
    this.length = data.length;
    this.ownerDocument = owner || null;
}

Comment$1.prototype.nodeType = 8;
Comment$1.prototype.nodeName = "#comment";

Comment$1.prototype.toString = function _Comment_toString() {
    return "[object Comment]"
};

var domText = DOMText$1;

function DOMText$1(value, owner) {
    if (!(this instanceof DOMText$1)) {
        return new DOMText$1(value)
    }

    this.data = value || "";
    this.length = this.data.length;
    this.ownerDocument = owner || null;
}

DOMText$1.prototype.type = "DOMTextNode";
DOMText$1.prototype.nodeType = 3;
DOMText$1.prototype.nodeName = "#text";

DOMText$1.prototype.toString = function _Text_toString() {
    return this.data
};

DOMText$1.prototype.replaceData = function replaceData(index, length, value) {
    var current = this.data;
    var left = current.substring(0, index);
    var right = current.substring(index + length, current.length);
    this.data = left + value + right;
    this.length = this.data.length;
};

var dispatchEvent_1 = dispatchEvent$2;

function dispatchEvent$2(ev) {
    var elem = this;
    var type = ev.type;

    if (!ev.target) {
        ev.target = elem;
    }

    if (!elem.listeners) {
        elem.listeners = {};
    }

    var listeners = elem.listeners[type];

    if (listeners) {
        return listeners.forEach(function (listener) {
            ev.currentTarget = elem;
            if (typeof listener === 'function') {
                listener(ev);
            } else {
                listener.handleEvent(ev);
            }
        })
    }

    if (elem.parentNode) {
        elem.parentNode.dispatchEvent(ev);
    }
}

var addEventListener_1 = addEventListener$2;

function addEventListener$2(type, listener) {
    var elem = this;

    if (!elem.listeners) {
        elem.listeners = {};
    }

    if (!elem.listeners[type]) {
        elem.listeners[type] = [];
    }

    if (elem.listeners[type].indexOf(listener) === -1) {
        elem.listeners[type].push(listener);
    }
}

var removeEventListener_1 = removeEventListener$2;

function removeEventListener$2(type, listener) {
    var elem = this;

    if (!elem.listeners) {
        return
    }

    if (!elem.listeners[type]) {
        return
    }

    var list = elem.listeners[type];
    var index = list.indexOf(listener);
    if (index !== -1) {
        list.splice(index, 1);
    }
}

var serialize = serializeNode$1;

var voidElements = ["area","base","br","col","embed","hr","img","input","keygen","link","menuitem","meta","param","source","track","wbr"];

function serializeNode$1(node) {
    switch (node.nodeType) {
        case 3:
            return escapeText(node.data)
        case 8:
            return "<!--" + node.data + "-->"
        default:
            return serializeElement(node)
    }
}

function serializeElement(elem) {
    var strings = [];

    var tagname = elem.tagName;

    if (elem.namespaceURI === "http://www.w3.org/1999/xhtml") {
        tagname = tagname.toLowerCase();
    }

    strings.push("<" + tagname + properties(elem) + datasetify(elem));

    if (voidElements.indexOf(tagname) > -1) {
        strings.push(" />");
    } else {
        strings.push(">");

        if (elem.childNodes.length) {
            strings.push.apply(strings, elem.childNodes.map(serializeNode$1));
        } else if (elem.textContent || elem.innerText) {
            strings.push(escapeText(elem.textContent || elem.innerText));
        } else if (elem.innerHTML) {
            strings.push(elem.innerHTML);
        }

        strings.push("</" + tagname + ">");
    }

    return strings.join("")
}

function isProperty(elem, key) {
    var type = typeof elem[key];

    if (key === "style" && Object.keys(elem.style).length > 0) {
      return true
    }

    return elem.hasOwnProperty(key) &&
        (type === "string" || type === "boolean" || type === "number") &&
        key !== "nodeName" && key !== "className" && key !== "tagName" &&
        key !== "textContent" && key !== "innerText" && key !== "namespaceURI" &&  key !== "innerHTML"
}

function stylify(styles) {
    if (typeof styles === 'string') return styles
    var attr = "";
    Object.keys(styles).forEach(function (key) {
        var value = styles[key];
        key = key.replace(/[A-Z]/g, function(c) {
            return "-" + c.toLowerCase();
        });
        attr += key + ":" + value + ";";
    });
    return attr
}

function datasetify(elem) {
    var ds = elem.dataset;
    var props = [];

    for (var key in ds) {
        props.push({ name: "data-" + key, value: ds[key] });
    }

    return props.length ? stringify$1(props) : ""
}

function stringify$1(list) {
    var attributes = [];
    list.forEach(function (tuple) {
        var name = tuple.name;
        var value = tuple.value;

        if (name === "style") {
            value = stylify(value);
        }

        attributes.push(name + "=" + "\"" + escapeAttributeValue(value) + "\"");
    });

    return attributes.length ? " " + attributes.join(" ") : ""
}

function properties(elem) {
    var props = [];
    for (var key in elem) {
        if (isProperty(elem, key)) {
            props.push({ name: key, value: elem[key] });
        }
    }

    for (var ns in elem._attributes) {
      for (var attribute in elem._attributes[ns]) {
        var prop = elem._attributes[ns][attribute];
        var name = (prop.prefix ? prop.prefix + ":" : "") + attribute;
        props.push({ name: name, value: prop.value });
      }
    }

    if (elem.className) {
        props.push({ name: "class", value: elem.className });
    }

    return props.length ? stringify$1(props) : ""
}

function escapeText(s) {
    var str = '';

    if (typeof(s) === 'string') { 
        str = s; 
    } else if (s) {
        str = s.toString();
    }

    return str
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
}

function escapeAttributeValue(str) {
    return escapeText(str).replace(/"/g, "&quot;")
}

var domWalk$1 = index$10;
var dispatchEvent$1 = dispatchEvent_1;
var addEventListener$1 = addEventListener_1;
var removeEventListener$1 = removeEventListener_1;
var serializeNode = serialize;

var htmlns = "http://www.w3.org/1999/xhtml";

var domElement = DOMElement$1;

function DOMElement$1(tagName, owner, namespace) {
    if (!(this instanceof DOMElement$1)) {
        return new DOMElement$1(tagName)
    }

    var ns = namespace === undefined ? htmlns : (namespace || null);

    this.tagName = ns === htmlns ? String(tagName).toUpperCase() : tagName;
    this.nodeName = this.tagName;
    this.className = "";
    this.dataset = {};
    this.childNodes = [];
    this.parentNode = null;
    this.style = {};
    this.ownerDocument = owner || null;
    this.namespaceURI = ns;
    this._attributes = {};

    if (this.tagName === 'INPUT') {
      this.type = 'text';
    }
}

DOMElement$1.prototype.type = "DOMElement";
DOMElement$1.prototype.nodeType = 1;

DOMElement$1.prototype.appendChild = function _Element_appendChild(child) {
    if (child.parentNode) {
        child.parentNode.removeChild(child);
    }

    this.childNodes.push(child);
    child.parentNode = this;

    return child
};

DOMElement$1.prototype.replaceChild =
    function _Element_replaceChild(elem, needle) {
        // TODO: Throw NotFoundError if needle.parentNode !== this

        if (elem.parentNode) {
            elem.parentNode.removeChild(elem);
        }

        var index = this.childNodes.indexOf(needle);

        needle.parentNode = null;
        this.childNodes[index] = elem;
        elem.parentNode = this;

        return needle
    };

DOMElement$1.prototype.removeChild = function _Element_removeChild(elem) {
    // TODO: Throw NotFoundError if elem.parentNode !== this

    var index = this.childNodes.indexOf(elem);
    this.childNodes.splice(index, 1);

    elem.parentNode = null;
    return elem
};

DOMElement$1.prototype.insertBefore =
    function _Element_insertBefore(elem, needle) {
        // TODO: Throw NotFoundError if referenceElement is a dom node
        // and parentNode !== this

        if (elem.parentNode) {
            elem.parentNode.removeChild(elem);
        }

        var index = needle === null || needle === undefined ?
            -1 :
            this.childNodes.indexOf(needle);

        if (index > -1) {
            this.childNodes.splice(index, 0, elem);
        } else {
            this.childNodes.push(elem);
        }

        elem.parentNode = this;
        return elem
    };

DOMElement$1.prototype.setAttributeNS =
    function _Element_setAttributeNS(namespace, name, value) {
        var prefix = null;
        var localName = name;
        var colonPosition = name.indexOf(":");
        if (colonPosition > -1) {
            prefix = name.substr(0, colonPosition);
            localName = name.substr(colonPosition + 1);
        }
        if (this.tagName === 'INPUT' && name === 'type') {
          this.type = value;
        }
        else {
          var attributes = this._attributes[namespace] || (this._attributes[namespace] = {});
          attributes[localName] = {value: value, prefix: prefix};
        }
    };

DOMElement$1.prototype.getAttributeNS =
    function _Element_getAttributeNS(namespace, name) {
        var attributes = this._attributes[namespace];
        var value = attributes && attributes[name] && attributes[name].value;
        if (this.tagName === 'INPUT' && name === 'type') {
          return this.type;
        }
        if (typeof value !== "string") {
            return null
        }
        return value
    };

DOMElement$1.prototype.removeAttributeNS =
    function _Element_removeAttributeNS(namespace, name) {
        var attributes = this._attributes[namespace];
        if (attributes) {
            delete attributes[name];
        }
    };

DOMElement$1.prototype.hasAttributeNS =
    function _Element_hasAttributeNS(namespace, name) {
        var attributes = this._attributes[namespace];
        return !!attributes && name in attributes;
    };

DOMElement$1.prototype.setAttribute = function _Element_setAttribute(name, value) {
    return this.setAttributeNS(null, name, value)
};

DOMElement$1.prototype.getAttribute = function _Element_getAttribute(name) {
    return this.getAttributeNS(null, name)
};

DOMElement$1.prototype.removeAttribute = function _Element_removeAttribute(name) {
    return this.removeAttributeNS(null, name)
};

DOMElement$1.prototype.hasAttribute = function _Element_hasAttribute(name) {
    return this.hasAttributeNS(null, name)
};

DOMElement$1.prototype.removeEventListener = removeEventListener$1;
DOMElement$1.prototype.addEventListener = addEventListener$1;
DOMElement$1.prototype.dispatchEvent = dispatchEvent$1;

// Un-implemented
DOMElement$1.prototype.focus = function _Element_focus() {
    return void 0
};

DOMElement$1.prototype.toString = function _Element_toString() {
    return serializeNode(this)
};

DOMElement$1.prototype.getElementsByClassName = function _Element_getElementsByClassName(classNames) {
    var classes = classNames.split(" ");
    var elems = [];

    domWalk$1(this, function (node) {
        if (node.nodeType === 1) {
            var nodeClassName = node.className || "";
            var nodeClasses = nodeClassName.split(" ");

            if (classes.every(function (item) {
                return nodeClasses.indexOf(item) !== -1
            })) {
                elems.push(node);
            }
        }
    });

    return elems
};

DOMElement$1.prototype.getElementsByTagName = function _Element_getElementsByTagName(tagName) {
    tagName = tagName.toLowerCase();
    var elems = [];

    domWalk$1(this.childNodes, function (node) {
        if (node.nodeType === 1 && (tagName === '*' || node.tagName.toLowerCase() === tagName)) {
            elems.push(node);
        }
    });

    return elems
};

DOMElement$1.prototype.contains = function _Element_contains(element) {
    return domWalk$1(this, function (node) {
        return element === node
    }) || false
};

var DOMElement$2 = domElement;

var domFragment = DocumentFragment$1;

function DocumentFragment$1(owner) {
    if (!(this instanceof DocumentFragment$1)) {
        return new DocumentFragment$1()
    }

    this.childNodes = [];
    this.parentNode = null;
    this.ownerDocument = owner || null;
}

DocumentFragment$1.prototype.type = "DocumentFragment";
DocumentFragment$1.prototype.nodeType = 11;
DocumentFragment$1.prototype.nodeName = "#document-fragment";

DocumentFragment$1.prototype.appendChild  = DOMElement$2.prototype.appendChild;
DocumentFragment$1.prototype.replaceChild = DOMElement$2.prototype.replaceChild;
DocumentFragment$1.prototype.removeChild  = DOMElement$2.prototype.removeChild;

DocumentFragment$1.prototype.toString =
    function _DocumentFragment_toString() {
        return this.childNodes.map(function (node) {
            return String(node)
        }).join("")
    };

var event$1 = Event$1;

function Event$1(family) {}

Event$1.prototype.initEvent = function _Event_initEvent(type, bubbles, cancelable) {
    this.type = type;
    this.bubbles = bubbles;
    this.cancelable = cancelable;
};

Event$1.prototype.preventDefault = function _Event_preventDefault() {
    
};

var domWalk = index$10;

var Comment = domComment;
var DOMText = domText;
var DOMElement = domElement;
var DocumentFragment = domFragment;
var Event = event$1;
var dispatchEvent = dispatchEvent_1;
var addEventListener = addEventListener_1;
var removeEventListener = removeEventListener_1;

var document$3 = Document$1;

function Document$1() {
    if (!(this instanceof Document$1)) {
        return new Document$1();
    }

    this.head = this.createElement("head");
    this.body = this.createElement("body");
    this.documentElement = this.createElement("html");
    this.documentElement.appendChild(this.head);
    this.documentElement.appendChild(this.body);
    this.childNodes = [this.documentElement];
    this.nodeType = 9;
}

var proto$1 = Document$1.prototype;
proto$1.createTextNode = function createTextNode(value) {
    return new DOMText(value, this)
};

proto$1.createElementNS = function createElementNS(namespace, tagName) {
    var ns = namespace === null ? null : String(namespace);
    return new DOMElement(tagName, this, ns)
};

proto$1.createElement = function createElement(tagName) {
    return new DOMElement(tagName, this)
};

proto$1.createDocumentFragment = function createDocumentFragment() {
    return new DocumentFragment(this)
};

proto$1.createEvent = function createEvent(family) {
    return new Event(family)
};

proto$1.createComment = function createComment(data) {
    return new Comment(data, this)
};

proto$1.getElementById = function getElementById(id) {
    id = String(id);

    var result = domWalk(this.childNodes, function (node) {
        if (String(node.id) === id) {
            return node
        }
    });

    return result || null
};

proto$1.getElementsByClassName = DOMElement.prototype.getElementsByClassName;
proto$1.getElementsByTagName = DOMElement.prototype.getElementsByTagName;
proto$1.contains = DOMElement.prototype.contains;

proto$1.removeEventListener = removeEventListener;
proto$1.addEventListener = addEventListener;
proto$1.dispatchEvent = dispatchEvent;

var Document = document$3;

var index$8 = new Document();

var document_1 = createCommonjsModule(function (module) {
var topLevel = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal :
    typeof window !== 'undefined' ? window : {};
var minDoc = index$8;

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}
});

var isObject$7 = index$6;
var isHook$2 = isVhook;

var applyProperties_1 = applyProperties$1;

function applyProperties$1(node, props, previous) {
    for (var propName in props) {
        var propValue = props[propName];

        if (propValue === undefined) {
            removeProperty(node, propName, propValue, previous);
        } else if (isHook$2(propValue)) {
            removeProperty(node, propName, propValue, previous);
            if (propValue.hook) {
                propValue.hook(node,
                    propName,
                    previous ? previous[propName] : undefined);
            }
        } else {
            if (isObject$7(propValue)) {
                patchObject(node, props, previous, propName, propValue);
            } else {
                node[propName] = propValue;
            }
        }
    }
}

function removeProperty(node, propName, propValue, previous) {
    if (previous) {
        var previousValue = previous[propName];

        if (!isHook$2(previousValue)) {
            if (propName === "attributes") {
                for (var attrName in previousValue) {
                    node.removeAttribute(attrName);
                }
            } else if (propName === "style") {
                for (var i in previousValue) {
                    node.style[i] = "";
                }
            } else if (typeof previousValue === "string") {
                node[propName] = "";
            } else {
                node[propName] = null;
            }
        } else if (previousValue.unhook) {
            previousValue.unhook(node, propName, propValue);
        }
    }
}

function patchObject(node, props, previous, propName, propValue) {
    var previousValue = previous ? previous[propName] : undefined;

    // Set attributes
    if (propName === "attributes") {
        for (var attrName in propValue) {
            var attrValue = propValue[attrName];

            if (attrValue === undefined) {
                node.removeAttribute(attrName);
            } else {
                node.setAttribute(attrName, attrValue);
            }
        }

        return
    }

    if(previousValue && isObject$7(previousValue) &&
        getPrototype$1(previousValue) !== getPrototype$1(propValue)) {
        node[propName] = propValue;
        return
    }

    if (!isObject$7(node[propName])) {
        node[propName] = {};
    }

    var replacer = propName === "style" ? "" : undefined;

    for (var k in propValue) {
        var value = propValue[k];
        node[propName][k] = (value === undefined) ? replacer : value;
    }
}

function getPrototype$1(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

var document$5 = document_1;

var applyProperties = applyProperties_1;

var isVNode$2 = isVnode;
var isVText$2 = isVtext;
var isWidget$3 = isWidget_1;
var handleThunk$2 = handleThunk_1;

var createElement_1 = createElement$1;

function createElement$1(vnode, opts) {
    var doc = opts ? opts.document || document$5 : document$5;
    var warn = opts ? opts.warn : null;

    vnode = handleThunk$2(vnode).a;

    if (isWidget$3(vnode)) {
        return vnode.init()
    } else if (isVText$2(vnode)) {
        return doc.createTextNode(vnode.text)
    } else if (!isVNode$2(vnode)) {
        if (warn) {
            warn("Item is not a valid virtual dom node", vnode);
        }
        return null
    }

    var node = (vnode.namespace === null) ?
        doc.createElement(vnode.tagName) :
        doc.createElementNS(vnode.namespace, vnode.tagName);

    var props = vnode.properties;
    applyProperties(node, props);

    var children = vnode.children;

    for (var i = 0; i < children.length; i++) {
        var childNode = createElement$1(children[i], opts);
        if (childNode) {
            node.appendChild(childNode);
        }
    }

    return node
}

// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
// We don't want to read all of the DOM nodes in the tree so we use
// the in-order tree indexing to eliminate recursion down certain branches.
// We only recurse into a DOM node if we know that it contains a child of
// interest.

var noChild = {};

var domIndex_1 = domIndex$1;

function domIndex$1(rootNode, tree, indices, nodes) {
    if (!indices || indices.length === 0) {
        return {}
    } else {
        indices.sort(ascending);
        return recurse(rootNode, tree, indices, nodes, 0)
    }
}

function recurse(rootNode, tree, indices, nodes, rootIndex) {
    nodes = nodes || {};


    if (rootNode) {
        if (indexInRange(indices, rootIndex, rootIndex)) {
            nodes[rootIndex] = rootNode;
        }

        var vChildren = tree.children;

        if (vChildren) {

            var childNodes = rootNode.childNodes;

            for (var i = 0; i < tree.children.length; i++) {
                rootIndex += 1;

                var vChild = vChildren[i] || noChild;
                var nextIndex = rootIndex + (vChild.count || 0);

                // skip recursion down the tree if there are no nodes down here
                if (indexInRange(indices, rootIndex, nextIndex)) {
                    recurse(childNodes[i], vChild, indices, nodes, rootIndex);
                }

                rootIndex = nextIndex;
            }
        }
    }

    return nodes
}

// Binary search for an index in the interval [left, right]
function indexInRange(indices, left, right) {
    if (indices.length === 0) {
        return false
    }

    var minIndex = 0;
    var maxIndex = indices.length - 1;
    var currentIndex;
    var currentItem;

    while (minIndex <= maxIndex) {
        currentIndex = ((maxIndex + minIndex) / 2) >> 0;
        currentItem = indices[currentIndex];

        if (minIndex === maxIndex) {
            return currentItem >= left && currentItem <= right
        } else if (currentItem < left) {
            minIndex = currentIndex + 1;
        } else  if (currentItem > right) {
            maxIndex = currentIndex - 1;
        } else {
            return true
        }
    }

    return false;
}

function ascending(a, b) {
    return a > b ? 1 : -1
}

var isWidget$5 = isWidget_1;

var updateWidget_1 = updateWidget$1;

function updateWidget$1(a, b) {
    if (isWidget$5(a) && isWidget$5(b)) {
        if ("name" in a && "name" in b) {
            return a.id === b.id
        } else {
            return a.init === b.init
        }
    }

    return false
}

var applyProperties$2 = applyProperties_1;

var isWidget$4 = isWidget_1;
var VPatch$1 = vpatch;

var updateWidget = updateWidget_1;

var patchOp$1 = applyPatch$1;

function applyPatch$1(vpatch$$1, domNode, renderOptions) {
    var type = vpatch$$1.type;
    var vNode = vpatch$$1.vNode;
    var patch = vpatch$$1.patch;

    switch (type) {
        case VPatch$1.REMOVE:
            return removeNode(domNode, vNode)
        case VPatch$1.INSERT:
            return insertNode(domNode, patch, renderOptions)
        case VPatch$1.VTEXT:
            return stringPatch(domNode, vNode, patch, renderOptions)
        case VPatch$1.WIDGET:
            return widgetPatch(domNode, vNode, patch, renderOptions)
        case VPatch$1.VNODE:
            return vNodePatch(domNode, vNode, patch, renderOptions)
        case VPatch$1.ORDER:
            reorderChildren(domNode, patch);
            return domNode
        case VPatch$1.PROPS:
            applyProperties$2(domNode, patch, vNode.properties);
            return domNode
        case VPatch$1.THUNK:
            return replaceRoot(domNode,
                renderOptions.patch(domNode, patch, renderOptions))
        default:
            return domNode
    }
}

function removeNode(domNode, vNode) {
    var parentNode = domNode.parentNode;

    if (parentNode) {
        parentNode.removeChild(domNode);
    }

    destroyWidget(domNode, vNode);

    return null
}

function insertNode(parentNode, vNode, renderOptions) {
    var newNode = renderOptions.render(vNode, renderOptions);

    if (parentNode) {
        parentNode.appendChild(newNode);
    }

    return parentNode
}

function stringPatch(domNode, leftVNode, vText, renderOptions) {
    var newNode;

    if (domNode.nodeType === 3) {
        domNode.replaceData(0, domNode.length, vText.text);
        newNode = domNode;
    } else {
        var parentNode = domNode.parentNode;
        newNode = renderOptions.render(vText, renderOptions);

        if (parentNode && newNode !== domNode) {
            parentNode.replaceChild(newNode, domNode);
        }
    }

    return newNode
}

function widgetPatch(domNode, leftVNode, widget, renderOptions) {
    var updating = updateWidget(leftVNode, widget);
    var newNode;

    if (updating) {
        newNode = widget.update(leftVNode, domNode) || domNode;
    } else {
        newNode = renderOptions.render(widget, renderOptions);
    }

    var parentNode = domNode.parentNode;

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode);
    }

    if (!updating) {
        destroyWidget(domNode, leftVNode);
    }

    return newNode
}

function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
    var parentNode = domNode.parentNode;
    var newNode = renderOptions.render(vNode, renderOptions);

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode);
    }

    return newNode
}

function destroyWidget(domNode, w) {
    if (typeof w.destroy === "function" && isWidget$4(w)) {
        w.destroy(domNode);
    }
}

function reorderChildren(domNode, moves) {
    var childNodes = domNode.childNodes;
    var keyMap = {};
    var node;
    var remove;
    var insert;

    for (var i = 0; i < moves.removes.length; i++) {
        remove = moves.removes[i];
        node = childNodes[remove.from];
        if (remove.key) {
            keyMap[remove.key] = node;
        }
        domNode.removeChild(node);
    }

    var length = childNodes.length;
    for (var j = 0; j < moves.inserts.length; j++) {
        insert = moves.inserts[j];
        node = keyMap[insert.key];
        // this is the weirdest bug i've ever seen in webkit
        domNode.insertBefore(node, insert.to >= length++ ? null : childNodes[insert.to]);
    }
}

function replaceRoot(oldRoot, newRoot) {
    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
        oldRoot.parentNode.replaceChild(newRoot, oldRoot);
    }

    return newRoot;
}

var document$2 = document_1;
var isArray$6 = index$4;

var render$1 = createElement_1;
var domIndex = domIndex_1;
var patchOp = patchOp$1;
var patch_1$2 = patch$2;

function patch$2(rootNode, patches, renderOptions) {
    renderOptions = renderOptions || {};
    renderOptions.patch = renderOptions.patch && renderOptions.patch !== patch$2
        ? renderOptions.patch
        : patchRecursive;
    renderOptions.render = renderOptions.render || render$1;

    return renderOptions.patch(rootNode, patches, renderOptions)
}

function patchRecursive(rootNode, patches, renderOptions) {
    var indices = patchIndices(patches);

    if (indices.length === 0) {
        return rootNode
    }

    var index = domIndex(rootNode, patches.a, indices);
    var ownerDocument = rootNode.ownerDocument;

    if (!renderOptions.document && ownerDocument !== document$2) {
        renderOptions.document = ownerDocument;
    }

    for (var i = 0; i < indices.length; i++) {
        var nodeIndex = indices[i];
        rootNode = applyPatch(rootNode,
            index[nodeIndex],
            patches[nodeIndex],
            renderOptions);
    }

    return rootNode
}

function applyPatch(rootNode, domNode, patchList, renderOptions) {
    if (!domNode) {
        return rootNode
    }

    var newNode;

    if (isArray$6(patchList)) {
        for (var i = 0; i < patchList.length; i++) {
            newNode = patchOp(patchList[i], domNode, renderOptions);

            if (domNode === rootNode) {
                rootNode = newNode;
            }
        }
    } else {
        newNode = patchOp(patchList, domNode, renderOptions);

        if (domNode === rootNode) {
            rootNode = newNode;
        }
    }

    return rootNode
}

function patchIndices(patches) {
    var indices = [];

    for (var key in patches) {
        if (key !== "a") {
            indices.push(Number(key));
        }
    }

    return indices
}

var patch$1 = patch_1$2;

var patch_1 = patch$1;

var version$6 = version$2;
var isVNode$4 = isVnode;
var isWidget$7 = isWidget_1;
var isThunk$3 = isThunk_1;
var isVHook = isVhook;

var vnode = VirtualNode;

var noProperties = {};
var noChildren = [];

function VirtualNode(tagName, properties, children, key, namespace) {
    this.tagName = tagName;
    this.properties = properties || noProperties;
    this.children = children || noChildren;
    this.key = key != null ? String(key) : undefined;
    this.namespace = (typeof namespace === "string") ? namespace : null;

    var count = (children && children.length) || 0;
    var descendants = 0;
    var hasWidgets = false;
    var hasThunks = false;
    var descendantHooks = false;
    var hooks;

    for (var propName in properties) {
        if (properties.hasOwnProperty(propName)) {
            var property = properties[propName];
            if (isVHook(property) && property.unhook) {
                if (!hooks) {
                    hooks = {};
                }

                hooks[propName] = property;
            }
        }
    }

    for (var i = 0; i < count; i++) {
        var child = children[i];
        if (isVNode$4(child)) {
            descendants += child.count || 0;

            if (!hasWidgets && child.hasWidgets) {
                hasWidgets = true;
            }

            if (!hasThunks && child.hasThunks) {
                hasThunks = true;
            }

            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
                descendantHooks = true;
            }
        } else if (!hasWidgets && isWidget$7(child)) {
            if (typeof child.destroy === "function") {
                hasWidgets = true;
            }
        } else if (!hasThunks && isThunk$3(child)) {
            hasThunks = true;
        }
    }

    this.count = count + descendants;
    this.hasWidgets = hasWidgets;
    this.hasThunks = hasThunks;
    this.hooks = hooks;
    this.descendantHooks = descendantHooks;
}

VirtualNode.prototype.version = version$6;
VirtualNode.prototype.type = "VirtualNode";

var version$7 = version$2;

var vtext = VirtualText;

function VirtualText(text) {
    this.text = String(text);
}

VirtualText.prototype.version = version$7;
VirtualText.prototype.type = "VirtualText";

/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
var index$14 = (function split(undef) {

  var nativeSplit = String.prototype.split,
    compliantExecNpcg = /()??/.exec("")[1] === undef,
    // NPCG: nonparticipating capturing group
    self;

  self = function(str, separator, limit) {
    // If `separator` is not a regex, use `nativeSplit`
    if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
      return nativeSplit.call(str, separator, limit);
    }
    var output = [],
      flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.extended ? "x" : "") + // Proposed for ES6
      (separator.sticky ? "y" : ""),
      // Firefox 3+
      lastLastIndex = 0,
      // Make `global` and avoid `lastIndex` issues by working with a copy
      separator = new RegExp(separator.source, flags + "g"),
      separator2, match, lastIndex, lastLength;
    str += ""; // Type-convert
    if (!compliantExecNpcg) {
      // Doesn't need flags gy, but they don't hurt
      separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
    }
    /* Values for `limit`, per the spec:
     * If undefined: 4294967295 // Math.pow(2, 32) - 1
     * If 0, Infinity, or NaN: 0
     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
     * If negative number: 4294967296 - Math.floor(Math.abs(limit))
     * If other: Type-convert, then use the above rules
     */
    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1
    limit >>> 0; // ToUint32(limit)
    while (match = separator.exec(str)) {
      // `separator.lastIndex` is not reliable cross-browser
      lastIndex = match.index + match[0].length;
      if (lastIndex > lastLastIndex) {
        output.push(str.slice(lastLastIndex, match.index));
        // Fix browsers whose `exec` methods don't consistently return `undefined` for
        // nonparticipating capturing groups
        if (!compliantExecNpcg && match.length > 1) {
          match[0].replace(separator2, function() {
            for (var i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undef) {
                match[i] = undef;
              }
            }
          });
        }
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, match.slice(1));
        }
        lastLength = match[0].length;
        lastLastIndex = lastIndex;
        if (output.length >= limit) {
          break;
        }
      }
      if (separator.lastIndex === match.index) {
        separator.lastIndex++; // Avoid an infinite loop
      }
    }
    if (lastLastIndex === str.length) {
      if (lastLength || !separator.test("")) {
        output.push("");
      }
    } else {
      output.push(str.slice(lastLastIndex));
    }
    return output.length > limit ? output.slice(0, limit) : output;
  };

  return self;
})();

var split$3 = index$14;

var classIdSplit = /([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/;
var notClassId = /^\.|#/;

var parseTag_1 = parseTag$1;

function parseTag$1(tag, props) {
    if (!tag) {
        return 'DIV';
    }

    var noId = !(props.hasOwnProperty('id'));

    var tagParts = split$3(tag, classIdSplit);
    var tagName = null;

    if (notClassId.test(tagParts[1])) {
        tagName = 'DIV';
    }

    var classes, part, type, i;

    for (i = 0; i < tagParts.length; i++) {
        part = tagParts[i];

        if (!part) {
            continue;
        }

        type = part.charAt(0);

        if (!tagName) {
            tagName = part;
        } else if (type === '.') {
            classes = classes || [];
            classes.push(part.substring(1, part.length));
        } else if (type === '#' && noId) {
            props.id = part.substring(1, part.length);
        }
    }

    if (classes) {
        if (props.className) {
            classes.push(props.className);
        }

        props.className = classes.join(' ');
    }

    return props.namespace ? tagName : tagName.toUpperCase();
}

var softSetHook$1 = SoftSetHook;

function SoftSetHook(value) {
    if (!(this instanceof SoftSetHook)) {
        return new SoftSetHook(value);
    }

    this.value = value;
}

SoftSetHook.prototype.hook = function (node, propertyName) {
    if (node[propertyName] !== this.value) {
        node[propertyName] = this.value;
    }
};

/*global window, global*/

var root = typeof window !== 'undefined' ?
    window : typeof commonjsGlobal !== 'undefined' ?
    commonjsGlobal : {};

var index$18 = Individual$1;

function Individual$1(key, value) {
    if (key in root) {
        return root[key];
    }

    root[key] = value;

    return value;
}

var Individual = index$18;

var oneVersion = OneVersion;

function OneVersion(moduleName, version, defaultValue) {
    var key = '__INDIVIDUAL_ONE_VERSION_' + moduleName;
    var enforceKey = key + '_ENFORCE_SINGLETON';

    var versionValue = Individual(enforceKey, version);

    if (versionValue !== version) {
        throw new Error('Can only have one copy of ' +
            moduleName + '.\n' +
            'You already have version ' + versionValue +
            ' installed.\n' +
            'This means you cannot install version ' + version);
    }

    return Individual(key, defaultValue);
}

var OneVersionConstraint = oneVersion;

var MY_VERSION = '7';
OneVersionConstraint('ev-store', MY_VERSION);

var hashKey = '__EV_STORE_KEY@' + MY_VERSION;

var index$16 = EvStore$1;

function EvStore$1(elem) {
    var hash = elem[hashKey];

    if (!hash) {
        hash = elem[hashKey] = {};
    }

    return hash;
}

var EvStore = index$16;

var evHook$1 = EvHook;

function EvHook(value) {
    if (!(this instanceof EvHook)) {
        return new EvHook(value);
    }

    this.value = value;
}

EvHook.prototype.hook = function (node, propertyName) {
    var es = EvStore(node);
    var propName = propertyName.substr(3);

    es[propName] = this.value;
};

EvHook.prototype.unhook = function(node, propertyName) {
    var es = EvStore(node);
    var propName = propertyName.substr(3);

    es[propName] = undefined;
};

var isArray$7 = index$4;

var VNode$1 = vnode;
var VText$1 = vtext;
var isVNode$3 = isVnode;
var isVText$3 = isVtext;
var isWidget$6 = isWidget_1;
var isHook$3 = isVhook;
var isVThunk = isThunk_1;

var parseTag = parseTag_1;
var softSetHook = softSetHook$1;
var evHook = evHook$1;

var index$12 = h$3;

function h$3(tagName, properties, children) {
    var childNodes = [];
    var tag, props, key, namespace;

    if (!children && isChildren(properties)) {
        children = properties;
        props = {};
    }

    props = props || properties || {};
    tag = parseTag(tagName, props);

    // support keys
    if (props.hasOwnProperty('key')) {
        key = props.key;
        props.key = undefined;
    }

    // support namespace
    if (props.hasOwnProperty('namespace')) {
        namespace = props.namespace;
        props.namespace = undefined;
    }

    // fix cursor bug
    if (tag === 'INPUT' &&
        !namespace &&
        props.hasOwnProperty('value') &&
        props.value !== undefined &&
        !isHook$3(props.value)
    ) {
        props.value = softSetHook(props.value);
    }

    transformProperties(props);

    if (children !== undefined && children !== null) {
        addChild(children, childNodes, tag, props);
    }


    return new VNode$1(tag, props, childNodes, key, namespace);
}

function addChild(c, childNodes, tag, props) {
    if (typeof c === 'string') {
        childNodes.push(new VText$1(c));
    } else if (typeof c === 'number') {
        childNodes.push(new VText$1(String(c)));
    } else if (isChild(c)) {
        childNodes.push(c);
    } else if (isArray$7(c)) {
        for (var i = 0; i < c.length; i++) {
            addChild(c[i], childNodes, tag, props);
        }
    } else if (c === null || c === undefined) {
        return;
    } else {
        throw UnexpectedVirtualElement({
            foreignObject: c,
            parentVnode: {
                tagName: tag,
                properties: props
            }
        });
    }
}

function transformProperties(props) {
    for (var propName in props) {
        if (props.hasOwnProperty(propName)) {
            var value = props[propName];

            if (isHook$3(value)) {
                continue;
            }

            if (propName.substr(0, 3) === 'ev-') {
                // add ev-foo support
                props[propName] = evHook(value);
            }
        }
    }
}

function isChild(x) {
    return isVNode$3(x) || isVText$3(x) || isWidget$6(x) || isVThunk(x);
}

function isChildren(x) {
    return typeof x === 'string' || isArray$7(x) || isChild(x);
}

function UnexpectedVirtualElement(data) {
    var err = new Error();

    err.type = 'virtual-hyperscript.unexpected.virtual-element';
    err.message = 'Unexpected virtual child passed to h().\n' +
        'Expected a VNode / Vthunk / VWidget / string but:\n' +
        'got:\n' +
        errorString(data.foreignObject) +
        '.\n' +
        'The parent vnode is:\n' +
        errorString(data.parentVnode);
        '\n' +
        'Suggested fix: change your `h(..., [ ... ])` callsite.';
    err.foreignObject = data.foreignObject;
    err.parentVnode = data.parentVnode;

    return err;
}

function errorString(obj) {
    try {
        return JSON.stringify(obj, null, '    ');
    } catch (e) {
        return String(obj);
    }
}

var h$2 = index$12;

var h_1 = h$2;

var createElement$2 = createElement_1;

var createElement_1$2 = createElement$2;

var diff = diff_1;
var patch = patch_1;
var h$1 = h_1;
var create$8 = createElement_1$2;
var VNode = vnode;
var VText = vtext;

var index$2 = {
    diff: diff,
    patch: patch,
    h: h$1,
    create: create$8,
    VNode: VNode,
    VText: VText
};

var h$1 = index$2.h;
var create$8 = index$2.create;
var diff = index$2.diff;
var patch = index$2.patch;

var _createClass$9 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$10(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Observer = function () {
    function Observer(onNext, onError, onCompleted) {
        _classCallCheck$10(this, Observer);

        this.OnNext = onNext;
        this.OnError = onError || function (e) {};
        this.OnCompleted = onCompleted || function () {};
    }

    _createClass$9(Observer, [{
        key: _Symbol.reflection,
        value: function value() {
            return { interfaces: ["System.IObserver"] };
        }
    }]);

    return Observer;
}();

var Observable = function () {
    function Observable(subscribe) {
        _classCallCheck$10(this, Observable);

        this.Subscribe = subscribe;
    }

    _createClass$9(Observable, [{
        key: _Symbol.reflection,
        value: function value() {
            return { interfaces: ["System.IObservable"] };
        }
    }]);

    return Observable;
}();


function add$6(callback, source) {
    source.Subscribe(new Observer(callback));
}

var _createClass$8 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$9(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Event$2 = function () {
    function Event(_subscriber, delegates) {
        _classCallCheck$9(this, Event);

        this._subscriber = _subscriber;
        this.delegates = delegates || new Array();
    }

    _createClass$8(Event, [{
        key: "Add",
        value: function Add(f) {
            this._addHandler(f);
        }
        // IEvent<T> methods

    }, {
        key: "Trigger",
        value: function Trigger(value) {
            iterate$1(function (f) {
                return f(value);
            }, this.delegates);
        }
        // IDelegateEvent<T> methods

    }, {
        key: "_addHandler",
        value: function _addHandler(f) {
            this.delegates.push(f);
        }
    }, {
        key: "_removeHandler",
        value: function _removeHandler(f) {
            var index = this.delegates.findIndex(function (el) {
                return "" + el == "" + f;
            }); // Special dedication to Chet Husk.
            if (index > -1) this.delegates.splice(index, 1);
        }
    }, {
        key: "AddHandler",
        value: function AddHandler(handler) {
            this._addHandler(function (x) {
                return handler(undefined, x);
            });
        }
    }, {
        key: "RemoveHandler",
        value: function RemoveHandler(handler) {
            this._removeHandler(function (x) {
                return handler(undefined, x);
            });
        }
        // IObservable<T> methods

    }, {
        key: "_subscribeFromObserver",
        value: function _subscribeFromObserver(observer) {
            var _this = this;

            if (this._subscriber) return this._subscriber(observer);
            var callback = observer.OnNext;
            this._addHandler(callback);
            return createDisposable(function () {
                return _this._removeHandler(callback);
            });
        }
    }, {
        key: "_subscribeFromCallback",
        value: function _subscribeFromCallback(callback) {
            var _this2 = this;

            this._addHandler(callback);
            return createDisposable(function () {
                return _this2._removeHandler(callback);
            });
        }
    }, {
        key: "Subscribe",
        value: function Subscribe(arg) {
            return typeof arg == "function" ? this._subscribeFromCallback(arg) : this._subscribeFromObserver(arg);
        }
    }, {
        key: "Publish",
        get: function get() {
            return this;
        }
    }]);

    return Event;
}();

var DomAttribute = function () {
  function DomAttribute(caseName, fields) {
    _classCallCheck(this, DomAttribute);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(DomAttribute, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Html.DomAttribute",
        interfaces: ["FSharpUnion"],
        cases: {
          Attribute: ["string"],
          Event: ["function"],
          Property: [Any]
        }
      };
    }
  }]);

  return DomAttribute;
}();
setType("TheGamma.Html.DomAttribute", DomAttribute);
var DomNode = function () {
  function DomNode(caseName, fields) {
    _classCallCheck(this, DomNode);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(DomNode, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Html.DomNode",
        interfaces: ["FSharpUnion"],
        cases: {
          Delayed: ["string", DomNode, "function"],
          Element: ["string", FArray(Tuple(["string", DomAttribute])), FArray(DomNode), Option("function")],
          Part: ["function"],
          Text: ["string"]
        }
      };
    }
  }]);

  return DomNode;
}();
setType("TheGamma.Html.DomNode", DomNode);
function createTree(tag, args, children) {
  var attrs = [];
  var props = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(args), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var forLoopVar = _step.value;
      var matchValue = [forLoopVar[0], forLoopVar[1]];

      if (matchValue[1].Case === "Property") {
        var o = matchValue[1].Fields[0];
        props.push([matchValue[0], o]);
      } else {
        if (matchValue[1].Case === "Event") {
          (function () {
            var f = matchValue[1].Fields[0];
            props.push(["on" + matchValue[0], function (o) {
              f(o["target"])(event);
            }]);
          })();
        } else {
          var v = matchValue[1].Fields[0];
          attrs.push([matchValue[0], v]);
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var attrs_1 = createObj(attrs);
  var props_1 = createObj(append$1(ofArray([["attributes", attrs_1]]), props));
  var elem = h$1(tag, props_1, children);
  return elem;
}
var counter = 0;
function renderVirtual(node) {
  return node.Case === "Element" ? node.Fields[3] == null ? function () {
    var attrs = node.Fields[1];
    var children = node.Fields[2];
    var tag = node.Fields[0];
    return createTree(tag, attrs, children.map(function (node_1) {
      return renderVirtual(node_1);
    }));
  }() : function () {
    throw new Error("renderVirtual: Does not support elements with after-render handlers");
  }() : node.Case === "Delayed" ? function () {
    var body = node.Fields[1];
    var func = node.Fields[2];
    var symbol = node.Fields[0];
    {
      var _ret2 = function () {
        counter = counter + 1;
        var id = fsFormat("delayed_%d")(function (x) {
          return x;
        })(counter);

        var waitForAdded = function waitForAdded(n) {
          return function (el) {
            if (el.parentElement != null) {
              el.dataset.renderedSymbol = symbol;
              el.id = id;
              func(id);
            } else {
              if (n > 0) {
                window.setTimeout(function () {
                  waitForAdded(n - 1)(el);
                }, 1);
              } else {
                Log.error("html", "Delayed element was not created in time");
              }
            }
          };
        };

        var Hook = function Hook() {};

        Hook.prototype.hook = function (node_1, propertyName, previousValue) {
          if (node_1.dataset.renderedSymbol !== symbol) {
            waitForAdded(10)(node_1);
          }
        };

        var h$$1 = new Hook();
        return {
          v: createTree("div", ofArray([["renderhk", new DomAttribute("Property", [h$$1])]]), [renderVirtual(body)])
        };
      }();

      if ((typeof _ret2 === "undefined" ? "undefined" : _typeof$2(_ret2)) === "object") return _ret2.v;
    }
  }() : node.Case === "Part" ? function () {
    throw new Error("renderVirtual: Does not support parts");
  }() : function () {
    var s = node.Fields[0];
    return s;
  }();
}
function render(node) {
  return node.Case === "Delayed" ? function () {
    counter = counter + 1;
    var el = document.createElement("div");
    el.id = fsFormat("delayed_%d")(function (x) {
      return x;
    })(counter);
    return [el, function () {
      node.Fields[2](el.id);
    }];
  }() : node.Case === "Part" ? function () {
    var el = document.createElement("div");
    return [el, function () {
      node.Fields[0](el);
    }];
  }() : node.Case === "Element" ? function () {
    var el = document.createElement(node.Fields[0]);
    var rc = node.Fields[2].map(function (node_1) {
      return render(node_1);
    });

    for (var idx = 0; idx <= rc.length - 1; idx++) {
      var forLoopVar = rc[idx];
      el.appendChild(forLoopVar[0]);
    }

    var _loop = function _loop(_idx) {
      var forLoopVar = node.Fields[1][_idx];

      if (forLoopVar[1].Case === "Attribute") {
        el.setAttribute(forLoopVar[0], forLoopVar[1].Fields[0]);
      } else {
        if (forLoopVar[1].Case === "Event") {
          el.addEventListener(forLoopVar[0], function (delegateArg0) {
            forLoopVar[1].Fields[0](el)(delegateArg0);
          });
        } else {
          el[forLoopVar[0]] = forLoopVar[1].Fields[0];
        }
      }
    };

    for (var _idx = 0; _idx <= node.Fields[1].length - 1; _idx++) {
      _loop(_idx);
    }

    var onRender = function onRender() {
      for (var _idx2 = 0; _idx2 <= rc.length - 1; _idx2++) {
        var _forLoopVar = rc[_idx2];

        _forLoopVar[1]();
      }

      iterate$1(function (f) {
        f(el);
      }, function () {
        var $var6 = node.Fields[3];

        if ($var6 != null) {
          return [$var6];
        } else {
          return [];
        }
      }());
    };

    return [el, onRender];
  }() : [document.createTextNode(node.Fields[0]), function () {}];
}
function renderTo(node, dom) {
  while (node.lastChild != null) {
    node.removeChild(node.lastChild);
  }

  var patternInput = render(dom);
  node.appendChild(patternInput[0]);
  patternInput[1]();
}
function text(s) {
  return new DomNode("Text", [s]);
}
function op_EqualsGreater(k, v) {
  return [k, new DomAttribute("Attribute", [v])];
}
function op_EqualsBangGreater(k, f) {
  return [k, new DomAttribute("Event", [f])];
}
var El = function () {
  _createClass(El, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Html.El",
        properties: {}
      };
    }
  }]);

  function El() {
    _classCallCheck(this, El);
  }

  _createClass(El, [{
    key: "delayed",
    value: function (sym, body, f) {
      return new DomNode("Delayed", [sym, body, f]);
    }
  }, {
    key: "part",
    value: function (initial, fold$$1) {
      var evt = new Event$2();
      var state = initial;
      var container = null;
      var renderer = null;

      var render_1 = function render_1() {
        var matchValue = [container, renderer];

        var _target1 = function _target1() {};

        if (matchValue[0] != null) {
          if (matchValue[1] != null) {
            (function () {
              var el = matchValue[0];
              var r = matchValue[1];

              (function (dom) {
                renderTo(el, dom);
              })(r(state));
            })();
          } else {
            _target1();
          }
        } else {
          _target1();
        }
      };

      add$6(function (e) {
        state = fold$$1(state)(e);
        render_1();
      }, evt.Publish);
      return [function (arg00) {
        evt.Trigger(arg00);
      }, function (r) {
        renderer = r;
        return new DomNode("Part", [function (el) {
          container = el;
          render_1();
        }]);
      }];
    }
  }], [{
    key: "op_Dynamic",
    value: function (_arg1, n) {
      return function (a) {
        return function (b) {
          var patternInput = n !== "chosen" ? [n, null] : ["select", function (el) {
            jQuery(el).chosen();
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = _getIterator(a), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var forLoopVar = _step2.value;

                if (forLoopVar[1].Case === "Event") {
                  jQuery(el).on(forLoopVar[0], function () {
                    forLoopVar[1].Fields[0](el)(event);
                  });
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }];
          return new DomNode("Element", [patternInput[0], _Array$from(a), _Array$from(b), patternInput[1]]);
        };
      };
    }
  }]);

  return El;
}();
setType("TheGamma.Html.El", El);
var h$$1 = new El();

var html = function () {
  function html() {
    _classCallCheck(this, html);
  }

  _createClass(html, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.html",
        properties: {}
      };
    }
  }], [{
    key: "img",
    value: function (url) {
      return function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("img")(ofArray([op_EqualsGreater("src", url)]))(new List$2());
    }
  }]);

  return html;
}();
setType("TheGamma.html", html);
var table = function () {
  function table(data, showKey, hiddenColumns, addedColumns) {
    _classCallCheck(this, table);

    this.data = data;
    this.showKey = showKey;
    this.hiddenColumns = hiddenColumns;
    this.addedColumns = addedColumns;
  }

  _createClass(table, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.table",
        interfaces: ["FSharpRecord"],
        properties: {
          data: makeGeneric(series, {
            k: GenericParam("k"),
            v: GenericParam("v")
          }),
          showKey: Option("boolean"),
          hiddenColumns: makeGeneric(FSet, {
            T: "string"
          }),
          addedColumns: makeGeneric(List$2, {
            T: Tuple(["string", "function"])
          })
        }
      };
    }
  }, {
    key: "set",
    value: function (title, showKey) {
      var data = this.data.set(this.data.data, null, null, title != null ? title : this.data.seriesName);
      return new table(data, showKey == null ? this.showKey : showKey, this.hiddenColumns, this.addedColumns);
    }
  }, {
    key: "hideColumns",
    value: function (names) {
      var hiddenColumns = create$3(names, new GenericComparer(function (x, y) {
        return x < y ? -1 : x > y ? 1 : 0;
      }));

      return new table(this.data, this.showKey, hiddenColumns, this.addedColumns);
    }
  }, {
    key: "addColumn",
    value: function (name, f) {
      var addedColumns = new List$2([name, f], this.addedColumns);
      return new table(this.data, this.showKey, this.hiddenColumns, addedColumns);
    }
  }, {
    key: "render",
    value: function () {
      var _this = this;

      var row = function row(showKey) {
        return function (el) {
          return function (k) {
            return function (things) {
              return function (arg0) {
                return function (arg1) {
                  return El.op_Dynamic(arg0, arg1);
                };
              }(h$$1)("tr")(new List$2())(toList(delay(function () {
                return append$1(showKey ? singleton$1(function (arg0) {
                  return function (arg1) {
                    return El.op_Dynamic(arg0, arg1);
                  };
                }(h$$1)(el)(new List$2())(ofArray([text(k)]))) : empty(), delay(function () {
                  return map$5(function (t) {
                    return function (arg0) {
                      return function (arg1) {
                        return El.op_Dynamic(arg0, arg1);
                      };
                    }(h$$1)(el)(new List$2())(ofArray([t]));
                  }, things);
                }));
              })));
            };
          };
        };
      };

      var makeTable = function makeTable(showKey) {
        return function (k) {
          return function (header) {
            return function (body) {
              return function (arg0) {
                return function (arg1) {
                  return El.op_Dynamic(arg0, arg1);
                };
              }(h$$1)("table")(ofArray([op_EqualsGreater("class", "table table-striped")]))(toList(delay(function () {
                return append$1(!isNullOrWhiteSpace(_this.data.seriesName) ? singleton$1(function (arg0) {
                  return function (arg1) {
                    return El.op_Dynamic(arg0, arg1);
                  };
                }(h$$1)("caption")(new List$2())(ofArray([text(_this.data.seriesName)]))) : empty(), delay(function () {
                  return append$1(singleton$1(function (arg0) {
                    return function (arg1) {
                      return El.op_Dynamic(arg0, arg1);
                    };
                  }(h$$1)("thead")(new List$2())(ofArray([row(showKey)("th")(k)(header)]))), delay(function () {
                    return singleton$1(function (arg0) {
                      return function (arg1) {
                        return El.op_Dynamic(arg0, arg1);
                      };
                    }(h$$1)("tbody")(new List$2())(body));
                  }));
                }));
              })));
            };
          };
        };
      };

      var formatAdded = function formatAdded(o) {
        var isSeries = toList(delay(function () {
          return map$5(function (kv) {
            return kv.key;
          }, function (o) {
            return _Object$keys(o).map(function (k) {
              return {
                "key": k,
                "value": o[k]
              };
            });
          }(o));
        })).Equals(ofArray(["data", "keyName", "valueName", "seriesName"]));

        if (isSeries) {
          var result = null;
          o.data.Then(function (r) {
            result = r;
          });
          return function (arg0) {
            return function (arg1) {
              return El.op_Dynamic(arg0, arg1);
            };
          }(h$$1)("span")(new List$2())(ofArray(result.map(function (tuple) {
            return tuple[1];
          })));
        } else {
          return text(toString$2(o));
        }
      };

      return function (builder_) {
        return builder_.Delay(function () {
          return builder_.TryWith(builder_.Delay(function () {
            return builder_.Bind(Async_AwaitFuture_Static(_this.data.data), function (_arg25) {
              var filteredProperties = function filteredProperties(o) {
                return function (o) {
                  return _Object$keys(o).map(function (k) {
                    return {
                      "key": k,
                      "value": o[k]
                    };
                  });
                }(o).filter(function (kv) {
                  return !_this.hiddenColumns.has(kv.key);
                });
              };

              var patternInput = head(_arg25);
              var headers = toList(delay(function () {
                return append$1(_typeof$2(patternInput[1]) == 'object' ? map$5(function (kv) {
                  return text(kv.key);
                }, filteredProperties(patternInput[1])) : singleton$1(text(_this.data.valueName)), delay(function () {
                  return collect$1(function (matchValue) {
                    return singleton$1(text(matchValue[0]));
                  }, _this.addedColumns);
                }));
              }));
              var showKey = _this.showKey != null ? _this.showKey : !(_typeof$2(patternInput[1]) == 'object');
              return builder_.Return(function (arg00) {
                var clo1 = makeTable(arg00);
                return function (arg10) {
                  var clo2 = clo1(arg10);
                  return function (arg20) {
                    var clo3 = clo2(arg20);
                    return function (arg30) {
                      return clo3(arg30);
                    };
                  };
                };
              }(showKey)(_this.data.keyName)(headers)(toList(delay(function () {
                return collect$1(function (matchValue) {
                  return singleton$1(function () {
                    var formattedVals = toList(delay(function () {
                      return append$1(_typeof$2(matchValue[1]) == 'object' ? map$5(function (kv) {
                        return text(kv.value);
                      }, filteredProperties(matchValue[1])) : !(typeof matchValue[1] == 'number') ? singleton$1(text(toString$2(matchValue[1]))) : isNaN(matchValue[1]) ? singleton$1(text("")) : singleton$1(text(matchValue[1])), delay(function () {
                        return collect$1(function (matchValue_1) {
                          return singleton$1(formatAdded(matchValue_1[1](matchValue[1])));
                        }, _this.addedColumns);
                      }));
                    }));
                    return function (arg00) {
                      var clo1 = row(arg00);
                      return function (arg10) {
                        var clo2 = clo1(arg10);
                        return function (arg20) {
                          var clo3 = clo2(arg20);
                          return function (arg30) {
                            return clo3(arg30);
                          };
                        };
                      };
                    }(showKey)("td")(matchValue[0])(formattedVals);
                  }());
                }, _arg25);
              }))));
            });
          }), function (_arg26) {
            Log.exn("live", "Getting data for table failed: %O", _arg26);
            return builder_.Return(function () {
              throw _arg26;
            }());
          });
        });
      }(singleton$2);
    }
  }, {
    key: "show",
    value: function (outputId) {
      var _this2 = this;

      (function (arg00) {
        startImmediate(arg00);
      })(function (builder_) {
        return builder_.Delay(function () {
          return builder_.Bind(_this2.render(), function (_arg27) {
            renderTo(document.getElementById(outputId), _arg27);
            return builder_.Zero();
          });
        });
      }(singleton$2));
    }
  }], [{
    key: "create",
    value: function (data) {
      var hiddenColumns = create$3(null, new GenericComparer(function (x, y) {
        return x < y ? -1 : x > y ? 1 : 0;
      }));

      var addedColumns = new List$2();
      return new table(data, null, hiddenColumns, addedColumns);
    }
  }]);

  return table;
}();
setType("TheGamma.table", table);
var empty$1 = function () {
  _createClass(empty$$1, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.empty",
        properties: {}
      };
    }
  }]);

  function empty$$1() {
    _classCallCheck(this, empty$$1);
  }

  _createClass(empty$$1, [{
    key: "show",
    value: function (outputId) {
      renderTo(document.getElementById(outputId), function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("div")(ofArray([op_EqualsGreater("class", "loading")]))(ofArray([function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("p")(new List$2())(ofArray([text("No output produced.")]))])));
    }
  }], [{
    key: "create",
    value: function () {
      return new empty$$1();
    }
  }]);

  return empty$$1;
}();
setType("TheGamma.empty", empty$1);

var core$4  = _core;
var $JSON$1 = core$4.JSON || (core$4.JSON = {stringify: JSON.stringify});
var stringify$3 = function stringify$3(it){ // eslint-disable-line no-unused-vars
  return $JSON$1.stringify.apply($JSON$1, arguments);
};

var stringify$2 = createCommonjsModule(function (module) {
module.exports = { "default": stringify$3, __esModule: true };
});

var _JSON$stringify = unwrapExports(stringify$2);

var _stringWs = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

var $export$9 = _export;
var defined$4 = _defined;
var fails$2   = _fails;
var spaces  = _stringWs;
var space   = '[' + spaces + ']';
var non     = '\u200b\u0085';
var ltrim   = RegExp('^' + space + space + '*');
var rtrim   = RegExp(space + space + '*$');

var exporter = function(KEY, exec, ALIAS){
  var exp   = {};
  var FORCE = fails$2(function(){
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim$1) : spaces[KEY];
  if(ALIAS)exp[ALIAS] = fn;
  $export$9($export$9.P + $export$9.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim$1 = exporter.trim = function(string, TYPE){
  string = String(defined$4(string));
  if(TYPE & 1)string = string.replace(ltrim, '');
  if(TYPE & 2)string = string.replace(rtrim, '');
  return string;
};

var _stringTrim = exporter;

var $parseInt$1 = _global.parseInt;
var $trim     = _stringTrim.trim;
var ws        = _stringWs;
var hex       = /^[\-+]?0[xX]/;

var _parseInt$3 = $parseInt$1(ws + '08') !== 8 || $parseInt$1(ws + '0x16') !== 22 ? function parseInt(str, radix){
  var string = $trim(String(str), 3);
  return $parseInt$1(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt$1;

var $export$8   = _export;
var $parseInt = _parseInt$3;
// 20.1.2.13 Number.parseInt(string, radix)
$export$8($export$8.S + $export$8.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});

var _parseInt$1 = parseInt;

var _parseInt = createCommonjsModule(function (module) {
module.exports = { "default": _parseInt$1, __esModule: true };
});

var _Number$parseInt = unwrapExports(_parseInt);

var GeographyConfig = function () {
  function GeographyConfig(popupOnHover, highlightOnHover) {
    _classCallCheck(this, GeographyConfig);

    this.popupOnHover = popupOnHover;
    this.highlightOnHover = highlightOnHover;
  }

  _createClass(GeographyConfig, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Maps.GeographyConfig",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          popupOnHover: "boolean",
          highlightOnHover: "boolean"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return GeographyConfig;
}();
setType("TheGamma.Maps.GeographyConfig", GeographyConfig);
var DatamapConfig = function () {
  function DatamapConfig(element, scope, geographyConfig, fills, data) {
    _classCallCheck(this, DatamapConfig);

    this.element = element;
    this.scope = scope;
    this.geographyConfig = geographyConfig;
    this.fills = fills;
    this.data = data;
  }

  _createClass(DatamapConfig, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Maps.DatamapConfig",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          element: Interface("Fable.Import.Browser.HTMLElement"),
          scope: "string",
          geographyConfig: GeographyConfig,
          fills: Any,
          data: Any
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }]);

  return DatamapConfig;
}();
setType("TheGamma.Maps.DatamapConfig", DatamapConfig);
var BubblesConfig = function () {
  function BubblesConfig(popupTemplate, key) {
    _classCallCheck(this, BubblesConfig);

    this.popupTemplate = popupTemplate;
    this.key = key;
  }

  _createClass(BubblesConfig, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Maps.BubblesConfig",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          popupTemplate: "function",
          key: "function"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }]);

  return BubblesConfig;
}();
setType("TheGamma.Maps.BubblesConfig", BubblesConfig);
var GeoGlobals = function (__exports) {
  var Locations = __exports.Locations = function () {
    function Locations(country, coordinates) {
      _classCallCheck(this, Locations);

      this.country = country;
      this.coordinates = coordinates;
    }

    _createClass(Locations, [{
      key: _Symbol.reflection,
      value: function () {
        return {
          type: "TheGamma.Maps.GeoGlobals.Locations",
          interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
          properties: {
            country: "string",
            coordinates: FArray("number")
          }
        };
      }
    }, {
      key: "Equals",
      value: function (other) {
        return equalsRecords(this, other);
      }
    }, {
      key: "CompareTo",
      value: function (other) {
        return compareRecords(this, other);
      }
    }]);

    return Locations;
  }();

  setType("TheGamma.Maps.GeoGlobals.Locations", Locations);

  var locations = __exports.locations = function (arg00) {
    return function (arg10) {
      return Async_CreateNamedFuture_Static(arg00, arg10);
    };
  }("locations")(function (builder_) {
    return builder_.Delay(function () {
      return builder_.Bind(Http.Request("GET", "/data/locations.json"), function (_arg1) {
        var lookup = create$4(JSON.parse(_arg1).map(function (l) {
          return [l.country, l.coordinates];
        }), new GenericComparer(function (x, y) {
          return x < y ? -1 : x > y ? 1 : 0;
        }));
        return builder_.Return(lookup);
      });
    });
  }(singleton$2));

  return __exports;
}({});
var geo = function () {
  function geo() {
    _classCallCheck(this, geo);
  }

  _createClass(geo, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Maps.geo",
        properties: {}
      };
    }
  }], [{
    key: "lookup",
    value: function (country) {
      return function (builder_) {
        return builder_.Delay(function () {
          return builder_.Bind(Async_AwaitFuture_Static(GeoGlobals.locations), function (_arg1) {
            return builder_.Return(tryFind$1(country, _arg1) != null ? tryFind$1(country, _arg1) : new Float64Array([0, 0]));
          });
        });
      }(singleton$2);
    }
  }]);

  return geo;
}();
setType("TheGamma.Maps.geo", geo);
var math = function () {
  function math() {
    _classCallCheck(this, math);
  }

  _createClass(math, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Maps.math",
        properties: {}
      };
    }
  }], [{
    key: "sqrt",
    value: function (f) {
      return Math.sqrt(f);
    }
  }, {
    key: "pow",
    value: function (f, k) {
      return Math.pow(f, k);
    }
  }, {
    key: "log",
    value: function (f, b) {
      return b != null ? Math.log(f, b) : Math.log(f);
    }
  }, {
    key: "min",
    value: function (f1, f2) {
      return f1 < f2 ? f1 : f2;
    }
  }, {
    key: "max",
    value: function (f1, f2) {
      return f1 > f2 ? f1 : f2;
    }
  }, {
    key: "add",
    value: function (f1, f2) {
      return f1 + f2;
    }
  }, {
    key: "times",
    value: function (f1, f2) {
      return f1 * f2;
    }
  }, {
    key: "sub",
    value: function (f1, f2) {
      return f1 - f2;
    }
  }, {
    key: "div",
    value: function (f1, f2) {
      return f1 / f2;
    }
  }]);

  return math;
}();
setType("TheGamma.Maps.math", math);
var timeline = function () {
  function timeline(data, colors, titleTemplate, defaultFill, delay$$1, overflowDelay, infoSelector, locSelector, sizeSelector, detailsSelector, timeSelector) {
    _classCallCheck(this, timeline);

    this.data = data;
    this.colors = colors;
    this.titleTemplate = titleTemplate;
    this.defaultFill = defaultFill;
    this.delay = delay$$1;
    this.overflowDelay = overflowDelay;
    this.infoSelector = infoSelector;
    this.locSelector = locSelector;
    this.sizeSelector = sizeSelector;
    this.detailsSelector = detailsSelector;
    this.timeSelector = timeSelector;
  }

  _createClass(timeline, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Maps.timeline",
        interfaces: ["FSharpRecord"],
        properties: {
          data: makeGeneric(series, {
            k: GenericParam("k"),
            v: GenericParam("v")
          }),
          colors: FArray("string"),
          titleTemplate: "string",
          defaultFill: "string",
          delay: "number",
          overflowDelay: "number",
          infoSelector: "function",
          locSelector: "function",
          sizeSelector: "function",
          detailsSelector: Option("function"),
          timeSelector: "function"
        }
      };
    }
  }, {
    key: "set",
    value: function (fill, colors, title, delay$$1, overflowDelay, details) {
      var colors_1 = colors != null ? colors : this.colors;
      var defaultFill = fill != null ? fill : this.defaultFill;
      var titleTemplate = title != null ? title : this.titleTemplate;
      var delay_1 = delay$$1 != null ? delay$$1 : this.delay;
      var detailsSelector = details != null ? details : this.detailsSelector;
      var overflowDelay_1 = overflowDelay != null ? overflowDelay : this.overflowDelay;
      return new timeline(this.data, colors_1, titleTemplate, defaultFill, delay_1, overflowDelay_1, this.infoSelector, this.locSelector, this.sizeSelector, detailsSelector, this.timeSelector);
    }
  }, {
    key: "using",
    value: function (coordinates, time, size, info) {
      return new timeline(this.data, this.colors, this.titleTemplate, this.defaultFill, this.delay, this.overflowDelay, info, coordinates, size, this.detailsSelector, time);
    }
  }, {
    key: "show",
    value: function (outputId) {
      var _this = this;

      var id = "map" + function () {
        var copyOfStruct = function () {
          var copyOfStruct = now();
          return ticks$$1(copyOfStruct);
        }();

        return String(copyOfStruct);
      }();

      renderTo(document.getElementById(outputId), function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("div")(ofArray([op_EqualsGreater("class", "map")]))(ofArray([function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("div")(ofArray([op_EqualsGreater("id", id + "_title")]))(ofArray([text("")])), function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("div")(ofArray([op_EqualsGreater("id", id), op_EqualsGreater("class", "mapcontainer")]))(new List$2()), function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("div")(new List$2())(ofArray([function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("div")(ofArray([op_EqualsGreater("class", "buttons")]))(ofArray([function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("a")(ofArray([op_EqualsGreater("id", id + "_btn")]))(ofArray([function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("i")(ofArray([op_EqualsGreater("class", "fa fa-pause")]))(new List$2())]))])), function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("input")(ofArray([op_EqualsGreater("id", id + "_player"), op_EqualsGreater("type", "range")]))(new List$2())]))])));

      var fills = _Array$from(mapIndexed$1(function (i, c) {
        return [fsFormat("item%d")(function (x) {
          return x;
        })(i), c];
      }, this.colors));

      var map$$1 = new Datamap(new DatamapConfig(document.getElementById(id), "world", new GeographyConfig(false, false), createObj(new List$2(["defaultFill", this.defaultFill], ofArray(fills))), {}));

      var objects = function objects(data) {
        return function (infos) {
          return function (time) {
            var res = [];

            for (var i = 0; i <= data.length - 1; i++) {
              var patternInput = data[i];

              if (equals(patternInput[3], time)) {
                (function (arg00) {
                  res.push(arg00);
                })(createObj(append$$1(_this.detailsSelector != null ? ofArray([["details", join("", map$5(function (value) {
                  return toString$2(value);
                }, _this.detailsSelector(patternInput[2])))]]) : new List$2(), ofArray([["radius", _this.sizeSelector(patternInput[2])], ["borderWidth", "1px"], ["fillKey", fsFormat("item%d")(function (x) {
                  return x;
                })(patternInput[0] % fills.length)], ["info", tryFind$1(fsFormat("%O, %O")(function (x) {
                  return x;
                })(patternInput[1][0])(patternInput[1][1]), infos) != null ? tryFind$1(fsFormat("%O, %O")(function (x) {
                  return x;
                })(patternInput[1][0])(patternInput[1][1]), infos) : ""], ["latitude", patternInput[1][0]], ["longitude", patternInput[1][1]]]))));
              }
            }

            return _Array$from(res);
          };
        };
      };

      (function (arg00) {
        startImmediate(arg00);
      })(function (builder_) {
        return builder_.Delay(function () {
          return builder_.Bind(Async_AwaitFuture_Static(_this.data.data), function (_arg25) {
            var locs = new Array(_arg25.length).fill();
            return builder_.Combine(builder_.For(range(0, _arg25.length - 1), function (_arg26) {
              return builder_.Bind(_this.locSelector(_arg25[_arg26][1]), function (_arg27) {
                locs[_arg26] = _arg27;
                return builder_.Zero();
              });
            }), builder_.Delay(function () {
              var colorLookup = create$4(mapIndexed$1(function (i, l) {
                return [ofArray(l), i];
              }, distinct(locs)), new GenericComparer(function (x, y) {
                return x.CompareTo(y);
              }));

              var data = _Array$from(map2(function (tupledArg, locs_1) {
                return [colorLookup.get(ofArray(locs_1)), locs_1, tupledArg[1], _this.timeSelector(tupledArg[1])];
              }, _arg25, locs));

              var infosLookup = create$4(map$5(function (tupledArg) {
                return [tupledArg[0], join("<br />", distinct(map$5(function (tupledArg_1) {
                  return _this.infoSelector(tupledArg_1[2]);
                }, tupledArg[1])))];
              }, groupBy$1(function (tupledArg) {
                return fsFormat("%O, %O")(function (x) {
                  return x;
                })(tupledArg[1][0])(tupledArg[1][1]);
              }, data)), new GenericComparer(function (x, y) {
                return x < y ? -1 : x > y ? 1 : 0;
              }));
              var times = Int32Array.from(sortWith(function (x, y) {
                return compare(x, y);
              }, distinct(Int32Array.from(map$5(function (tupledArg) {
                return tupledArg[3];
              }, data)))));
              var patternInput = [reduce(function (x, y) {
                return Math.min(x, y);
              }, times), reduce(function (x, y) {
                return Math.max(x, y);
              }, times)];
              var player = document.getElementById(id + "_player");
              var btn = document.getElementById(id + "_btn");
              return builder_.Combine(times.length === 1 ? function () {
                player.style.display = "none";
                btn.style.display = "none";
                return builder_.Zero();
              }() : builder_.Zero(), builder_.Delay(function () {
                player.min = String(0);
                player.value = String(0);
                player.max = String(times.length - 1);

                var render$$1 = function render$$1() {
                  var y = times[_Number$parseInt(player.value)];

                  var o = objects(data)(infosLookup)(y);
                  renderTo(document.getElementById(id + "_title"), function (arg0) {
                    return function (arg1) {
                      return El.op_Dynamic(arg0, arg1);
                    };
                  }(h$$1)("h2")(new List$2())(ofArray([text(replace$$1(_this.titleTemplate, "%title", String(y)))])));

                  var config = function () {
                    var key = function key(data_1) {
                      return _JSON$stringify([data_1["latitude"], data_1["longitude"]]);
                    };

                    return new BubblesConfig(function (geo_1, data_1) {
                      return _this.detailsSelector != null ? fsFormat("<div style='pointer-events:none' class='hoverinfo'><strong>%s</strong><br /> %s </div>")(function (x) {
                        return x;
                      })(data_1["info"])(data_1["details"]) : fsFormat("<div style='pointer-events:none' class='hoverinfo'>%s</div>")(function (x) {
                        return x;
                      })(data_1["info"]);
                    }, key);
                  }();

                  map$$1.bubbles(o, config);
                };

                var autoPlay = true;

                var startPlay = function startPlay() {
                  (function (arg00) {
                    startImmediate(arg00);
                  })(function (builder__1) {
                    return builder__1.Delay(function () {
                      return builder__1.While(function () {
                        return autoPlay;
                      }, builder__1.Delay(function () {
                        var value = _Number$parseInt(player.value);

                        render$$1();
                        player.value = String(value + 1 === times.length ? 0 : value + 1);
                        return builder__1.Bind(sleep(value + 1 === times.length ? _this.overflowDelay : _this.delay), function () {
                          return builder__1.Return();
                        });
                      }));
                    });
                  }(singleton$2));
                };

                player.onchange = function (e) {
                  autoPlay = false;

                  (function (dom) {
                    renderTo(btn, dom);
                  })(function (arg0) {
                    return function (arg1) {
                      return El.op_Dynamic(arg0, arg1);
                    };
                  }(h$$1)("i")(ofArray([op_EqualsGreater("class", "fa fa-play")]))(new List$2()));

                  return render$$1();
                };

                player.oninput = player.onchange;

                btn.onclick = function (e) {
                  autoPlay = !autoPlay;

                  (function (dom) {
                    renderTo(btn, dom);
                  })(function (arg0) {
                    return function (arg1) {
                      return El.op_Dynamic(arg0, arg1);
                    };
                  }(h$$1)("i")(ofArray([op_EqualsGreater("class", autoPlay ? "fa fa-pause" : "fa fa-play")]))(new List$2()));

                  if (autoPlay) {
                    startPlay();
                  }

                  return null;
                };

                startPlay();
                return builder_.Zero();
              }));
            }));
          });
        });
      }(singleton$2));
    }
  }], [{
    key: "create",
    value: function (data) {
      var colors = ["red"];
      var defaultFill = "blue";
      var delay$$1 = 750;
      var detailsSelector = null;
      var overflowDelay = 2000;
      var titleTemplate = "%title";

      var infoSelector = function infoSelector(_arg1) {
        return "";
      };

      var timeSelector = function timeSelector(_arg2) {
        return 0;
      };

      var sizeSelector = function sizeSelector(_arg3) {
        return 10;
      };

      return new timeline(data, colors, titleTemplate, defaultFill, delay$$1, overflowDelay, infoSelector, function (_arg4) {
        throw new Error("!");
      }, sizeSelector, detailsSelector, timeSelector);
    }
  }]);

  return timeline;
}();
setType("TheGamma.Maps.timeline", timeline);

var TypeContext = function () {
    function TypeContext(equivalentVars) {
        _classCallCheck(this, TypeContext);

        this.EquivalentVars = equivalentVars;
    }

    _createClass(TypeContext, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.Types.TypeContext",
                interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
                properties: {
                    EquivalentVars: makeGeneric(List$2, {
                        T: Tuple(["string", "string"])
                    })
                }
            };
        }
    }, {
        key: "Equals",
        value: function (other) {
            return equalsRecords(this, other);
        }
    }, {
        key: "CompareTo",
        value: function (other) {
            return compareRecords(this, other);
        }
    }]);

    return TypeContext;
}();
setType("TheGamma.Types.TypeContext", TypeContext);
function listsEqual(l1, l2, f) {
    var matchValue = [l1, l2];

    var _target2 = function _target2() {
        return false;
    };

    if (matchValue[0].tail != null) {
        if (matchValue[1].tail != null) {
            if (function () {
                var ys = matchValue[1].tail;
                var y = matchValue[1].head;
                var xs = matchValue[0].tail;
                var x = matchValue[0].head;
                return f(x)(y);
            }()) {
                var x = matchValue[0].head;
                var xs = matchValue[0].tail;
                var y = matchValue[1].head;
                var ys = matchValue[1].tail;
                return listsEqual(xs, ys, f);
            } else {
                return _target2();
            }
        } else {
            return _target2();
        }
    } else {
        if (matchValue[1].tail == null) {
            return true;
        } else {
            return _target2();
        }
    }
}
function arraysEqual(l1, l2, f) {
    var loop = function loop(i) {
        return (i === l1.length ? i === l2.length : false) ? true : (i < l1.length ? i < l2.length : false) ? f(l1[i])(l2[i]) ? loop(i + 1) : false : false;
    };

    return loop(0);
}
function memberNamesEqual(m1, m2) {
    var matchValue = [m1, m2];

    var _target0 = function _target0(n1, n2) {
        return n1 === n2;
    };

    var _target1 = function _target1() {
        return false;
    };

    if (matchValue[0].Case === "Method") {
        if (matchValue[1].Case === "Method") {
            return _target0(matchValue[0].Fields[0], matchValue[1].Fields[0]);
        } else {
            return _target1();
        }
    } else {
        if (matchValue[1].Case === "Property") {
            return _target0(matchValue[0].Fields[0], matchValue[1].Fields[0]);
        } else {
            return _target1();
        }
    }
}

function _BoundTypeVariables_(t) {
    return t.Case === "Forall" ? [t.Fields[0], t] : [new List$2(), t];
}

function membersEqual(ctx, m1, m2) {
    var matchValue = [m1, m2];

    var _target2 = function _target2() {
        return false;
    };

    if (matchValue[0].Case === "Method") {
        var activePatternResult4691 = _BoundTypeVariables_(matchValue[0].Fields[2]);

        if (matchValue[1].Case === "Method") {
            var activePatternResult4692 = _BoundTypeVariables_(matchValue[1].Fields[2]);

            var a1 = matchValue[0].Fields[1];
            var a2 = matchValue[1].Fields[1];
            var n1 = matchValue[0].Fields[0];
            var n2 = matchValue[1].Fields[0];
            var r1 = activePatternResult4691[1];
            var r2 = activePatternResult4692[1];
            var v1 = activePatternResult4691[0];
            var v2 = activePatternResult4692[0];
            {
                var _ret = function () {
                    var ctx_1 = new TypeContext(append$$1(toList(zip(v1, v2)), ctx.EquivalentVars));

                    if (n1 === n2 ? typesEqualAux(ctx_1, r1, r2) : false) {
                        return {
                            v: listsEqual(a1, a2, function (tupledArg) {
                                return function (tupledArg_1) {
                                    return (tupledArg[0] === tupledArg_1[0] ? tupledArg[1] === tupledArg_1[1] : false) ? typesEqualAux(ctx_1, tupledArg[2], tupledArg_1[2]) : false;
                                };
                            })
                        };
                    } else {
                        return {
                            v: false
                        };
                    }
                }();

                if ((typeof _ret === "undefined" ? "undefined" : _typeof$2(_ret)) === "object") return _ret.v;
            }
        } else {
            return _target2();
        }
    } else {
        if (matchValue[1].Case === "Property") {
            var _n = matchValue[0].Fields[0];
            var _n2 = matchValue[1].Fields[0];
            var t1 = matchValue[0].Fields[1];
            var t2 = matchValue[1].Fields[1];

            if (_n === _n2) {
                return typesEqualAux(ctx, t1, t2);
            } else {
                return false;
            }
        } else {
            return _target2();
        }
    }
}
function typesEqualAux(ctx, t1, t2) {
    var matchValue = [t1, t2];

    var _target0 = function _target0() {
        return true;
    };

    var _target8 = function _target8() {
        var _target1 = function _target1() {
            return false;
        };

        if (matchValue[0].Case === "App") {
            if (matchValue[1].Case === "App") {
                if (function () {
                    var ts2 = matchValue[1].Fields[1];
                    var ts1 = matchValue[0].Fields[1];
                    var t2_1 = matchValue[1].Fields[0];
                    var t1_1 = matchValue[0].Fields[0];
                    return ts1.length === ts2.length;
                }()) {
                    var t1_1 = matchValue[0].Fields[0];
                    var t2_1 = matchValue[1].Fields[0];
                    var ts1 = matchValue[0].Fields[1];
                    var ts2 = matchValue[1].Fields[1];
                    return forAll$1(function (tupledArg) {
                        return typesEqualAux(ctx, tupledArg[0], tupledArg[1]);
                    }, new List$2([t1_1, t2_1], toList(zip(ts1, ts2))));
                } else {
                    return _target1();
                }
            } else {
                return _target1();
            }
        } else {
            return _target1();
        }
    };

    if (matchValue[0].Case === "Any") {
        return _target0();
    } else {
        if (matchValue[0].Case === "Parameter") {
            if (matchValue[1].Case === "Any") {
                return _target0();
            } else {
                if (matchValue[1].Case === "Parameter") {
                    var _ret2 = function () {
                        var p1 = matchValue[0].Fields[0];
                        var p2 = matchValue[1].Fields[0];
                        return {
                            v: exists$1(function (tupledArg) {
                                return tupledArg[0] === p1 ? tupledArg[1] === p2 : false;
                            }, ctx.EquivalentVars)
                        };
                    }();

                    if ((typeof _ret2 === "undefined" ? "undefined" : _typeof$2(_ret2)) === "object") return _ret2.v;
                } else {
                    return _target8();
                }
            }
        } else {
            if (matchValue[0].Case === "Delayed") {
                if (matchValue[1].Case === "Any") {
                    return _target0();
                } else {
                    if (matchValue[1].Case === "Delayed") {
                        var g1 = matchValue[0].Fields[0];
                        var g2 = matchValue[1].Fields[0];
                        return g1 === g2;
                    } else {
                        return _target8();
                    }
                }
            } else {
                if (matchValue[0].Case === "List") {
                    if (matchValue[1].Case === "Any") {
                        return _target0();
                    } else {
                        if (matchValue[1].Case === "List") {
                            var t1_1 = matchValue[0].Fields[0];
                            var t2_1 = matchValue[1].Fields[0];
                            return typesEqualAux(ctx, t1_1, t2_1);
                        } else {
                            return _target8();
                        }
                    }
                } else {
                    if (matchValue[0].Case === "Function") {
                        if (matchValue[1].Case === "Any") {
                            return _target0();
                        } else {
                            if (matchValue[1].Case === "Function") {
                                var a1 = matchValue[0].Fields[0];
                                var a2 = matchValue[1].Fields[0];
                                var r1 = matchValue[0].Fields[1];
                                var r2 = matchValue[1].Fields[1];
                                return listsEqual(new List$2(r1, a1), new List$2(r2, a2), function (t1_1) {
                                    return function (t2_1) {
                                        return typesEqualAux(ctx, t1_1, t2_1);
                                    };
                                });
                            } else {
                                return _target8();
                            }
                        }
                    } else {
                        if (matchValue[0].Case === "Object") {
                            if (matchValue[1].Case === "Any") {
                                return _target0();
                            } else {
                                if (matchValue[1].Case === "Object") {
                                    var o1 = matchValue[0].Fields[0];
                                    var o2 = matchValue[1].Fields[0];
                                    return arraysEqual(o1.Members, o2.Members, function (m1) {
                                        return function (m2) {
                                            return membersEqual(ctx, m1, m2);
                                        };
                                    });
                                } else {
                                    return _target8();
                                }
                            }
                        } else {
                            if (matchValue[0].Case === "Primitive") {
                                if (matchValue[1].Case === "Any") {
                                    return _target0();
                                } else {
                                    if (matchValue[1].Case === "Primitive") {
                                        var n1 = matchValue[0].Fields[0];
                                        var n2 = matchValue[1].Fields[0];
                                        return n1.Equals(n2);
                                    } else {
                                        return _target8();
                                    }
                                }
                            } else {
                                if (matchValue[0].Case === "Forall") {
                                    if (matchValue[1].Case === "Any") {
                                        return _target0();
                                    } else {
                                        if (matchValue[1].Case === "Forall") {
                                            if (function () {
                                                var v2 = matchValue[1].Fields[0];
                                                var v1 = matchValue[0].Fields[0];
                                                var t2_1 = matchValue[1].Fields[1];
                                                var t1_1 = matchValue[0].Fields[1];
                                                return v1.length === v2.length;
                                            }()) {
                                                var _t1_ = matchValue[0].Fields[1];
                                                var _t2_ = matchValue[1].Fields[1];
                                                var v1 = matchValue[0].Fields[0];
                                                var v2 = matchValue[1].Fields[0];
                                                {
                                                    var ctx_1 = new TypeContext(append$$1(toList(zip(v1, v2)), ctx.EquivalentVars));
                                                    return typesEqualAux(ctx_1, _t1_, _t2_);
                                                }
                                            } else {
                                                return _target8();
                                            }
                                        } else {
                                            return _target8();
                                        }
                                    }
                                } else {
                                    if (matchValue[1].Case === "Any") {
                                        return _target0();
                                    } else {
                                        return _target8();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
var typesEqual = function () {
    var ctx = new TypeContext(new List$2());
    return function (t1) {
        return function (t2) {
            return typesEqualAux(ctx, t1, t2);
        };
    };
}();
function substituteMembers(assigns, members) {
    return members.map(function (_arg1) {
        return _arg1.Case === "Property" ? new Member("Property", [_arg1.Fields[0], substituteTypes(assigns, _arg1.Fields[1]), _arg1.Fields[2], _arg1.Fields[3]]) : function () {
            var activePatternResult4704 = _BoundTypeVariables_(_arg1.Fields[2]);

            var assigns_1 = function () {
                var folder = function folder(assigns_1) {
                    return function (_var) {
                        return remove$1(_var, assigns_1);
                    };
                };

                return function (list) {
                    return fold$1(function ($var88, $var89) {
                        return folder($var88)($var89);
                    }, assigns, list);
                };
            }()(activePatternResult4704[0]);

            var ars = map$4(function (tupledArg) {
                return [tupledArg[0], tupledArg[1], substituteTypes(assigns_1, tupledArg[2])];
            }, _arg1.Fields[1]);
            return new Member("Method", [_arg1.Fields[0], ars, substituteTypes(assigns_1, activePatternResult4704[1]), _arg1.Fields[3], _arg1.Fields[4]]);
        }();
    });
}
function substituteTypes(assigns, t) {
    var _target1 = function _target1() {
        var _target0 = function _target0() {
            return t;
        };

        if (t.Case === "Any") {
            return _target0();
        } else {
            if (t.Case === "Primitive") {
                return _target0();
            } else {
                if (t.Case === "Function") {
                    return new Type("Function", [map$4(function (t_1) {
                        return substituteTypes(assigns, t_1);
                    }, t.Fields[0]), substituteTypes(assigns, t.Fields[1])]);
                } else {
                    if (t.Case === "List") {
                        return new Type("List", [substituteTypes(assigns, t.Fields[0])]);
                    } else {
                        if (t.Case === "Object") {
                            return new Type("Object", [new ObjectType(substituteMembers(assigns, t.Fields[0].Members))]);
                        } else {
                            if (t.Case === "Delayed") {
                                var _f;

                                var f = (_f = {}, _defineProperty(_f, _Symbol.reflection, {
                                    "interfaces": ["TheGamma.Common.Future"]
                                }), _defineProperty(_f, "Then", function (g) {
                                    t.Fields[1].Then(function (t_1) {
                                        g(substituteTypes(assigns, t_1));
                                    });
                                }), _f);
                                return new Type("Delayed", [t.Fields[0], f]);
                            } else {
                                if (t.Case === "App") {
                                    return new Type("App", [substituteTypes(assigns, t.Fields[0]), map$4(function (t_1) {
                                        return substituteTypes(assigns, t_1);
                                    }, t.Fields[1])]);
                                } else {
                                    if (t.Case === "Forall") {
                                        var assigns_1 = function () {
                                            var folder = function folder(assigns_1) {
                                                return function (_var) {
                                                    return remove$1(_var, assigns_1);
                                                };
                                            };

                                            return function (list) {
                                                return fold$1(function ($var90, $var91) {
                                                    return folder($var90)($var91);
                                                }, assigns, list);
                                            };
                                        }()(t.Fields[0]);

                                        return new Type("Forall", [t.Fields[0], substituteTypes(assigns_1, t.Fields[1])]);
                                    } else {
                                        return _target0();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };

    if (t.Case === "Parameter") {
        if (assigns.has(t.Fields[0])) {
            var s = t.Fields[0];
            return assigns.get(s);
        } else {
            return _target1();
        }
    } else {
        return _target1();
    }
}
var UnifictionContext = function () {
    function UnifictionContext(freeVars, assignments, equivalentVars, errors) {
        _classCallCheck(this, UnifictionContext);

        this.FreeVars = freeVars;
        this.Assignments = assignments;
        this.EquivalentVars = equivalentVars;
        this.Errors = errors;
    }

    _createClass(UnifictionContext, [{
        key: _Symbol.reflection,
        value: function () {
            return {
                type: "TheGamma.Types.UnifictionContext",
                interfaces: ["FSharpRecord"],
                properties: {
                    FreeVars: makeGeneric(FSet, {
                        T: "string"
                    }),
                    Assignments: makeGeneric(List$2, {
                        T: Tuple(["string", Type])
                    }),
                    EquivalentVars: makeGeneric(List$2, {
                        T: Tuple(["string", "string"])
                    }),
                    Errors: makeGeneric(List$2, {
                        T: Tuple([Type, Type])
                    })
                }
            };
        }
    }]);

    return UnifictionContext;
}();
setType("TheGamma.Types.UnifictionContext", UnifictionContext);
function unifyTypesAux(ctx, ts1, ts2) {
    var matchValue = [ts1, ts2];

    var _target1 = function _target1() {
        var _target2 = function _target2() {
            var _target2 = function _target2() {
                var _target1 = function _target1() {
                    var _target1 = function _target1() {
                        var _target2 = function _target2() {
                            throw new Error("unifyTypesAux: The lists of types had mismatching lengths");
                        };

                        if (matchValue[0].tail == null) {
                            if (matchValue[1].tail == null) {
                                return ctx;
                            } else {
                                return _target2();
                            }
                        } else {
                            if (matchValue[1].tail != null) {
                                var _ret3 = function () {
                                    var t1 = matchValue[0].head;
                                    var t2 = matchValue[1].head;
                                    var ts1_1 = matchValue[0].tail;
                                    var ts2_1 = matchValue[1].tail;
                                    return {
                                        v: unifyTypesAux(function () {
                                            var Errors = new List$2([t1, t2], ctx.Errors);
                                            return new UnifictionContext(ctx.FreeVars, ctx.Assignments, ctx.EquivalentVars, Errors);
                                        }(), ts1_1, ts2_1)
                                    };
                                }();

                                if ((typeof _ret3 === "undefined" ? "undefined" : _typeof$2(_ret3)) === "object") return _ret3.v;
                            } else {
                                return _target2();
                            }
                        }
                    };

                    if (matchValue[0].tail != null) {
                        if (matchValue[1].tail != null) {
                            if (function () {
                                var ts2_1 = matchValue[1].tail;
                                var ts1_1 = matchValue[0].tail;
                                var t2 = matchValue[1].head;
                                var t1 = matchValue[0].head;
                                return typesEqualAux(new TypeContext(ctx.EquivalentVars), t1, t2);
                            }()) {
                                var t1 = matchValue[0].head;
                                var t2 = matchValue[1].head;
                                var ts1_1 = matchValue[0].tail;
                                var ts2_1 = matchValue[1].tail;
                                return unifyTypesAux(ctx, ts1_1, ts2_1);
                            } else {
                                return _target1();
                            }
                        } else {
                            return _target1();
                        }
                    } else {
                        return _target1();
                    }
                };

                if (matchValue[0].tail != null) {
                    if (matchValue[0].head.Case === "App") {
                        if (matchValue[1].tail != null) {
                            if (matchValue[1].head.Case === "App") {
                                if (function () {
                                    var tb2 = matchValue[1].tail;
                                    var tb1 = matchValue[0].tail;
                                    var ta2 = matchValue[1].head.Fields[1];
                                    var ta1 = matchValue[0].head.Fields[1];
                                    var t2 = matchValue[1].head.Fields[0];
                                    var t1 = matchValue[0].head.Fields[0];
                                    return ta1.length === ta2.length;
                                }()) {
                                    var t1 = matchValue[0].head.Fields[0];
                                    var t2 = matchValue[1].head.Fields[0];
                                    var ta1 = matchValue[0].head.Fields[1];
                                    var ta2 = matchValue[1].head.Fields[1];
                                    var tb1 = matchValue[0].tail;
                                    var tb2 = matchValue[1].tail;
                                    return unifyTypesAux(ctx, new List$2(t1, append$$1(ta1, tb1)), new List$2(t2, append$$1(ta2, tb2)));
                                } else {
                                    return _target1();
                                }
                            } else {
                                return _target1();
                            }
                        } else {
                            return _target1();
                        }
                    } else {
                        return _target1();
                    }
                } else {
                    return _target1();
                }
            };

            if (matchValue[0].tail != null) {
                if (matchValue[0].head.Case === "List") {
                    if (matchValue[1].tail != null) {
                        if (matchValue[1].head.Case === "List") {
                            var t1 = matchValue[0].head.Fields[0];
                            var t2 = matchValue[1].head.Fields[0];
                            var ts1_1 = matchValue[0].tail;
                            var ts2_1 = matchValue[1].tail;
                            return unifyTypesAux(ctx, new List$2(t1, ts1_1), new List$2(t2, ts2_1));
                        } else {
                            return _target2();
                        }
                    } else {
                        return _target2();
                    }
                } else {
                    if (matchValue[0].head.Case === "Forall") {
                        if (matchValue[1].tail != null) {
                            if (matchValue[1].head.Case === "Forall") {
                                if (function () {
                                    var v2 = matchValue[1].head.Fields[0];
                                    var v1 = matchValue[0].head.Fields[0];
                                    var ts2_1 = matchValue[1].tail;
                                    var ts1_1 = matchValue[0].tail;
                                    var t2 = matchValue[1].head.Fields[1];
                                    var t1 = matchValue[0].head.Fields[1];
                                    return v1.length === v2.length;
                                }()) {
                                    var _ret4 = function () {
                                        var t1 = matchValue[0].head.Fields[1];
                                        var t2 = matchValue[1].head.Fields[1];
                                        var ts1_1 = matchValue[0].tail;
                                        var ts2_1 = matchValue[1].tail;
                                        var v1 = matchValue[0].head.Fields[0];
                                        var v2 = matchValue[1].head.Fields[0];
                                        {
                                            var ctx_1 = function () {
                                                var EquivalentVars = append$$1(toList(zip(v1, v2)), ctx.EquivalentVars);
                                                return new UnifictionContext(ctx.FreeVars, ctx.Assignments, EquivalentVars, ctx.Errors);
                                            }();

                                            return {
                                                v: unifyTypesAux(ctx_1, new List$2(t1, ts1_1), new List$2(t2, ts2_1))
                                            };
                                        }
                                    }();

                                    if ((typeof _ret4 === "undefined" ? "undefined" : _typeof$2(_ret4)) === "object") return _ret4.v;
                                } else {
                                    return _target2();
                                }
                            } else {
                                return _target2();
                            }
                        } else {
                            return _target2();
                        }
                    } else {
                        return _target2();
                    }
                }
            } else {
                return _target2();
            }
        };

        if (matchValue[0].tail != null) {
            if (matchValue[0].head.Case === "Function") {
                if (matchValue[1].tail != null) {
                    if (matchValue[1].head.Case === "Function") {
                        var tis1 = matchValue[0].head.Fields[0];
                        var tis2 = matchValue[1].head.Fields[0];
                        var to1 = matchValue[0].head.Fields[1];
                        var to2 = matchValue[1].head.Fields[1];
                        var ts1_1 = matchValue[0].tail;
                        var ts2_1 = matchValue[1].tail;
                        return unifyTypesAux(ctx, append$$1(new List$2(to1, tis1), ts1_1), append$$1(new List$2(to2, tis2), ts2_1));
                    } else {
                        return _target2();
                    }
                } else {
                    return _target2();
                }
            } else {
                if (matchValue[0].head.Case === "Object") {
                    if (matchValue[1].tail != null) {
                        if (matchValue[1].head.Case === "Object") {
                            if (function () {
                                var ts2_1 = matchValue[1].tail;
                                var ts1_1 = matchValue[0].tail;
                                var m2 = matchValue[1].head.Fields[0].Members;
                                var m1 = matchValue[0].head.Fields[0].Members;
                                return arraysEqual(m1, m2, function (m1_1) {
                                    return function (m2_1) {
                                        return memberNamesEqual(m1_1, m2_1);
                                    };
                                });
                            }()) {
                                var m1 = matchValue[0].head.Fields[0].Members;
                                var m2 = matchValue[1].head.Fields[0].Members;
                                var _ts1_ = matchValue[0].tail;
                                var _ts2_ = matchValue[1].tail;
                                return unifyTypesAux(ctx, _ts1_, _ts2_);
                            } else {
                                return _target2();
                            }
                        } else {
                            return _target2();
                        }
                    } else {
                        return _target2();
                    }
                } else {
                    return _target2();
                }
            }
        } else {
            return _target2();
        }
    };

    if (matchValue[0].tail != null) {
        if (matchValue[0].head.Case === "Parameter") {
            if (matchValue[1].tail != null) {
                if (function () {
                    var ts2_1 = matchValue[1].tail;
                    var ts1_1 = matchValue[0].tail;
                    var t = matchValue[1].head;
                    var n = matchValue[0].head.Fields[0];

                    if (ctx.FreeVars.has(n)) {
                        if (t.Case === "Parameter") {
                            return false;
                        } else {
                            return true;
                        }
                    } else {
                        return false;
                    }
                }()) {
                    var _ret5 = function () {
                        var n = matchValue[0].head.Fields[0];
                        var t = matchValue[1].head;
                        var ts1_1 = matchValue[0].tail;
                        var ts2_1 = matchValue[1].tail;
                        return {
                            v: unifyTypesAux(function () {
                                var Assignments = new List$2([n, t], ctx.Assignments);
                                return new UnifictionContext(ctx.FreeVars, Assignments, ctx.EquivalentVars, ctx.Errors);
                            }(), ts1_1, ts2_1)
                        };
                    }();

                    if ((typeof _ret5 === "undefined" ? "undefined" : _typeof$2(_ret5)) === "object") return _ret5.v;
                } else {
                    return _target1();
                }
            } else {
                return _target1();
            }
        } else {
            return _target1();
        }
    } else {
        return _target1();
    }
}
function unifyTypes(free, ts1, ts2) {
    var ctx = new UnifictionContext(create$3(free, new GenericComparer(function (x, y) {
        return x < y ? -1 : x > y ? 1 : 0;
    })), new List$2(), new List$2(), new List$2());
    var ctx_1 = unifyTypesAux(ctx, ofArray([ts1]), ofArray([ts2]));
    return [ctx_1.Assignments, ctx_1.Errors];
}
function reduceType(t) {
    var _target1 = function _target1() {
        return t;
    };

    if (t.Case === "App") {
        if (t.Fields[0].Case === "Forall") {
            var args = t.Fields[1];
            var t_1 = t.Fields[0].Fields[1];
            var vars = t.Fields[0].Fields[0];
            {
                if (vars.length !== args.length) {
                    throw new Error("reduceType: Invalid type application");
                }

                var t_2 = substituteTypes(create$4(toList(zip(vars, args)), new GenericComparer(function (x, y) {
                    return x < y ? -1 : x > y ? 1 : 0;
                })), t_1);
                return reduceType(t_2);
            }
        } else {
            return _target1();
        }
    } else {
        return _target1();
    }
}

var _createClass$10 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$11(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var Lazy = function () {
    function Lazy(factory) {
        _classCallCheck$11(this, Lazy);

        this.factory = factory;
        this.isValueCreated = false;
    }

    _createClass$10(Lazy, [{
        key: "value",
        get: function get() {
            if (!this.isValueCreated) {
                this.createdValue = this.factory();
                this.isValueCreated = true;
            }
            return this.createdValue;
        }
    }]);

    return Lazy;
}();

function node(rng, node_1) {
  var Entity$$1 = null;
  var WhiteBefore = new List$2();
  var WhiteAfter = new List$2();
  return new _Node(WhiteBefore, WhiteAfter, rng, node_1, Entity$$1);
}
function needsEscaping(s) {
  return (s[0] >= "0" ? s[0] <= "9" : false) ? true : s.split("").some(function (c) {
    return !(((c >= "a" ? c <= "z" : false) ? true : c >= "A" ? c <= "Z" : false) ? true : c >= "0" ? c <= "9" : false);
  });
}
function escapeIdent(s) {
  return needsEscaping(s) ? "'" + s + "'" : s;
}
function unionRanges(r1, r2) {
  return new _Range(r1.Start < r2.Start ? r1.Start : r2.Start, r1.End > r2.End ? r1.End : r2.End);
}
function strictSubRange(first, second) {
  return (first.Start > second.Start ? first.End <= second.End : false) ? true : first.Start >= second.Start ? first.End < second.End : false;
}
function formatToken(_arg1) {
  var _target30 = function _target30() {
    throw new Error("Unsupported token");
  };

  if (_arg1.Case === "RParen") {
    return ")";
  } else {
    if (_arg1.Case === "Equals") {
      return "=";
    } else {
      if (_arg1.Case === "Dot") {
        return ".";
      } else {
        if (_arg1.Case === "Comma") {
          return ",";
        } else {
          if (_arg1.Case === "Let") {
            return "let";
          } else {
            if (_arg1.Case === "LSquare") {
              return "[";
            } else {
              if (_arg1.Case === "RSquare") {
                return "]";
              } else {
                if (_arg1.Case === "Fun") {
                  return "fun";
                } else {
                  if (_arg1.Case === "Arrow") {
                    return "->";
                  } else {
                    if (_arg1.Case === "Operator") {
                      if (_arg1.Fields[0].Case === "GreaterThan") {
                        return ">";
                      } else {
                        if (_arg1.Fields[0].Case === "GreaterThanOrEqual") {
                          return ">=";
                        } else {
                          if (_arg1.Fields[0].Case === "LessThan") {
                            return "<";
                          } else {
                            if (_arg1.Fields[0].Case === "LessThanOrEqual") {
                              return "<=";
                            } else {
                              if (_arg1.Fields[0].Case === "Minus") {
                                return "-";
                              } else {
                                if (_arg1.Fields[0].Case === "Multiply") {
                                  return "*";
                                } else {
                                  if (_arg1.Fields[0].Case === "Plus") {
                                    return "+";
                                  } else {
                                    if (_arg1.Fields[0].Case === "Power") {
                                      return "^";
                                    } else {
                                      if (_arg1.Fields[0].Case === "Equals") {
                                        return "=";
                                      } else {
                                        return "/";
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (_arg1.Case === "Boolean") {
                        if (_arg1.Fields[0]) {
                          return "true";
                        } else {
                          return "false";
                        }
                      } else {
                        if (_arg1.Case === "Number") {
                          var s = _arg1.Fields[0];
                          return s;
                        } else {
                          if (_arg1.Case === "String") {
                            var _s = _arg1.Fields[0];
                            return "\"" + replace$$1(replace$$1(replace$$1(_s, "\\", "\\\\"), "\n", "\\n"), "\"", "\\\"") + "\"";
                          } else {
                            if (_arg1.Case === "Ident") {
                              var i = _arg1.Fields[0];
                              return i;
                            } else {
                              if (_arg1.Case === "QIdent") {
                                var q = _arg1.Fields[0];
                                return "'" + q + "'";
                              } else {
                                if (_arg1.Case === "White") {
                                  var w = _arg1.Fields[0];
                                  return w;
                                } else {
                                  if (_arg1.Case === "Newline") {
                                    return "\n";
                                  } else {
                                    if (_arg1.Case === "Error") {
                                      var c = _arg1.Fields[0];
                                      return c;
                                    } else {
                                      if (_arg1.Case === "EndOfFile") {
                                        return "";
                                      } else {
                                        if (_arg1.Case === "By") {
                                          return _target30();
                                        } else {
                                          if (_arg1.Case === "To") {
                                            return _target30();
                                          } else {
                                            return "(";
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function formatTokenInfo(_arg1) {
  var _target31 = function _target31() {
    throw new Error("Unsupported token");
  };

  if (_arg1.Case === "RParen") {
    return "right parenthesis `)`";
  } else {
    if (_arg1.Case === "Equals") {
      return "equals sign `=`";
    } else {
      if (_arg1.Case === "Dot") {
        return "dot character `.`";
      } else {
        if (_arg1.Case === "Comma") {
          return "comma character `,`";
        } else {
          if (_arg1.Case === "Let") {
            return "`let` keyword";
          } else {
            if (_arg1.Case === "LSquare") {
              return "left square bracket `[`";
            } else {
              if (_arg1.Case === "RSquare") {
                return "right square bracket `]`";
              } else {
                if (_arg1.Case === "Fun") {
                  return "`fun` keyword";
                } else {
                  if (_arg1.Case === "Arrow") {
                    return "arrow sign `->`";
                  } else {
                    if (_arg1.Case === "Operator") {
                      if (_arg1.Fields[0].Case === "Divide") {
                        return "division sign `/`";
                      } else {
                        if (_arg1.Fields[0].Case === "GreaterThan") {
                          return "greater than sign `>`";
                        } else {
                          if (_arg1.Fields[0].Case === "GreaterThanOrEqual") {
                            return "greater than or equals sign `>=`";
                          } else {
                            if (_arg1.Fields[0].Case === "LessThan") {
                              return "less than sign `<`";
                            } else {
                              if (_arg1.Fields[0].Case === "LessThanOrEqual") {
                                return "less than or equals sign `<=`";
                              } else {
                                if (_arg1.Fields[0].Case === "Minus") {
                                  return "minus sign `-`";
                                } else {
                                  if (_arg1.Fields[0].Case === "Multiply") {
                                    return "multiplication sign `*`";
                                  } else {
                                    if (_arg1.Fields[0].Case === "Plus") {
                                      return "plus sign `+`";
                                    } else {
                                      if (_arg1.Fields[0].Case === "Power") {
                                        return "exponentiation sign `^`";
                                      } else {
                                        return "equals operator `=`";
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (_arg1.Case === "Boolean") {
                        if (_arg1.Fields[0]) {
                          return "logical `true` value";
                        } else {
                          return "logical `false` value";
                        }
                      } else {
                        if (_arg1.Case === "Number") {
                          var s = _arg1.Fields[0];
                          return fsFormat("numerical value `%s`")(function (x) {
                            return x;
                          })(s);
                        } else {
                          if (_arg1.Case === "String") {
                            var _s2 = _arg1.Fields[0];
                            return fsFormat("string value `%s`")(function (x) {
                              return x;
                            })(replace$$1(_s2, "`", "'"));
                          } else {
                            if (_arg1.Case === "Ident") {
                              var i = _arg1.Fields[0];
                              return fsFormat("identifer `%s`")(function (x) {
                                return x;
                              })(i);
                            } else {
                              if (_arg1.Case === "QIdent") {
                                var q = _arg1.Fields[0];
                                return fsFormat("quoted identifer `'%s'`")(function (x) {
                                  return x;
                                })(q);
                              } else {
                                if (_arg1.Case === "White") {
                                  var w = _arg1.Fields[0];
                                  return "whitespace";
                                } else {
                                  if (_arg1.Case === "Newline") {
                                    return "end of line";
                                  } else {
                                    if (_arg1.Case === "Error") {
                                      if (_arg1.Fields[0] === "`") {
                                        return "back-tick character";
                                      } else {
                                        var c = _arg1.Fields[0];
                                        return fsFormat("other character `%s`")(function (x) {
                                          return x;
                                        })(c);
                                      }
                                    } else {
                                      if (_arg1.Case === "EndOfFile") {
                                        return "end of file";
                                      } else {
                                        if (_arg1.Case === "By") {
                                          return _target31();
                                        } else {
                                          if (_arg1.Case === "To") {
                                            return _target31();
                                          } else {
                                            return "left parenthesis `(`";
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

var FormattingContext = function () {
  function FormattingContext(strings) {
    _classCallCheck(this, FormattingContext);

    this.Strings = strings;
  }

  _createClass(FormattingContext, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Ast.FormattingContext",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          Strings: FArray("string")
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "Add",
    value: function (tok) {
      this.Strings.push(formatToken(tok));
    }
  }]);

  return FormattingContext;
}();
setType("TheGamma.Ast.FormattingContext", FormattingContext);
function formatNode(ctx, f, node_1) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(node_1.WhiteBefore), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var t = _step.value;
      ctx.Add(t.Token);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  f(ctx)(node_1.Node);
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getIterator(node_1.WhiteAfter), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _t = _step2.value;
      ctx.Add(_t.Token);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}
function formatName(ctx, name) {
  if (name.Name === "") {} else {
    if (needsEscaping(name.Name)) {
      ctx.Add(new TokenKind("QIdent", [name.Name]));
    } else {
      ctx.Add(new TokenKind("Ident", [name.Name]));
    }
  }
}
function formatArgument(ctx, arg) {
  if (arg.Name != null) {
    formatNode(ctx, function (ctx_1) {
      return function (name) {
        formatName(ctx_1, name);
      };
    }, arg.Name);
    ctx.Add(new TokenKind("Equals", []));
  }

  formatNode(ctx, function (ctx_1) {
    return function (expr) {
      formatExpression(ctx_1, expr);
    };
  }, arg.Value);
}
function formatExpression(ctx, expr) {
  if (expr.Case === "Property") {
    formatNode(ctx, function (ctx_1) {
      return function (expr_1) {
        formatExpression(ctx_1, expr_1);
      };
    }, expr.Fields[0]);
    ctx.Add(new TokenKind("Dot", []));
    formatNode(ctx, function (ctx_1) {
      return function (name) {
        formatName(ctx_1, name);
      };
    }, expr.Fields[1]);
  } else {
    if (expr.Case === "Call") {
      if (expr.Fields[0] != null) {
        formatNode(ctx, function (ctx_1) {
          return function (expr_1) {
            formatExpression(ctx_1, expr_1);
          };
        }, expr.Fields[0]);
      }

      ctx.Add(new TokenKind("Dot", []));
      formatNode(ctx, function (ctx_1) {
        return function (name) {
          formatName(ctx_1, name);
        };
      }, expr.Fields[1]);
      ctx.Add(new TokenKind("LParen", []));
      (function () {
        var f = function f(ctx_1) {
          return function (args) {
            iterateIndexed(function (i, arg) {
              if (i !== 0) {
                ctx_1.Add(new TokenKind("Comma", []));
              }

              formatArgument(ctx_1, arg);
            }, args);
          };
        };

        return function (node_1) {
          formatNode(ctx, f, node_1);
        };
      })()(expr.Fields[2]);
      ctx.Add(new TokenKind("RParen", []));
    } else {
      if (expr.Case === "String") {
        ctx.Add(new TokenKind("String", [expr.Fields[0]]));
      } else {
        if (expr.Case === "Number") {
          ctx.Add(new TokenKind("Number", [String(expr.Fields[0]), expr.Fields[0]]));
        } else {
          if (expr.Case === "Boolean") {
            ctx.Add(new TokenKind("Boolean", [expr.Fields[0]]));
          } else {
            if (expr.Case === "Binary") {
              formatNode(ctx, function (ctx_1) {
                return function (expr_1) {
                  formatExpression(ctx_1, expr_1);
                };
              }, expr.Fields[0]);
              (function () {
                var f = function f(ctx_1) {
                  return function (op) {
                    ctx_1.Add(new TokenKind("Operator", [op]));
                  };
                };

                return function (node_1) {
                  formatNode(ctx, f, node_1);
                };
              })()(expr.Fields[1]);
              formatNode(ctx, function (ctx_1) {
                return function (expr_1) {
                  formatExpression(ctx_1, expr_1);
                };
              }, expr.Fields[2]);
            } else {
              if (expr.Case === "Function") {
                ctx.Add(new TokenKind("Fun", []));
                formatNode(ctx, function (ctx_1) {
                  return function (name) {
                    formatName(ctx_1, name);
                  };
                }, expr.Fields[0]);
                ctx.Add(new TokenKind("Arrow", []));
                formatNode(ctx, function (ctx_1) {
                  return function (expr_1) {
                    formatExpression(ctx_1, expr_1);
                  };
                }, expr.Fields[1]);
              } else {
                if (expr.Case === "List") {
                  ctx.Add(new TokenKind("LSquare", []));
                  var _iteratorNormalCompletion3 = true;
                  var _didIteratorError3 = false;
                  var _iteratorError3 = undefined;

                  try {
                    for (var _iterator3 = _getIterator(expr.Fields[0]), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                      var e = _step3.value;
                      formatNode(ctx, function (ctx_1) {
                        return function (expr_1) {
                          formatExpression(ctx_1, expr_1);
                        };
                      }, e);
                    }
                  } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                      }
                    } finally {
                      if (_didIteratorError3) {
                        throw _iteratorError3;
                      }
                    }
                  }

                  ctx.Add(new TokenKind("RSquare", []));
                } else {
                  if (expr.Case === "Empty") {} else {
                    formatNode(ctx, function (ctx_1) {
                      return function (name) {
                        formatName(ctx_1, name);
                      };
                    }, expr.Fields[0]);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function formatCommand(ctx, cmd) {
  if (cmd.Case === "Let") {
    ctx.Add(new TokenKind("Let", []));
    formatNode(ctx, function (ctx_1) {
      return function (name) {
        formatName(ctx_1, name);
      };
    }, cmd.Fields[0]);
    ctx.Add(new TokenKind("Equals", []));
    formatNode(ctx, function (ctx_1) {
      return function (expr) {
        formatExpression(ctx_1, expr);
      };
    }, cmd.Fields[1]);
  } else {
    formatNode(ctx, function (ctx_1) {
      return function (expr) {
        formatExpression(ctx_1, expr);
      };
    }, cmd.Fields[0]);
  }
}
function formatSingleExpression(expr) {
  var ctx = new FormattingContext([]);
  formatNode(ctx, function (ctx_1) {
    return function (expr_1) {
      formatExpression(ctx_1, expr_1);
    };
  }, expr);
  return join("", ctx.Strings);
}

function formatWhiteAfterExpr(nd) {
  var wa = function () {
    var _target0 = function _target0(n) {
      return append$$1(n.WhiteAfter, nd.WhiteAfter);
    };

    if (nd.Node.Case === "Variable") {
      return _target0(nd.Node.Fields[0]);
    } else {
      if (nd.Node.Case === "Property") {
        return _target0(nd.Node.Fields[1]);
      } else {
        return nd.WhiteAfter;
      }
    }
  }();

  return join("", toList(delay(function () {
    return map$5(function (t) {
      return formatToken(t.Token);
    }, wa);
  })));
}
function formatWhiteBeforeExpr(nd) {
  var wa = function () {
    var _target1 = function _target1(n) {
      return n.WhiteBefore;
    };

    if (nd.Node.Case === "Variable") {
      return append$$1(nd.WhiteBefore, nd.Node.Fields[0].WhiteBefore);
    } else {
      if (nd.Node.Case === "Call") {
        return _target1(nd.Node.Fields[1]);
      } else {
        if (nd.Node.Case === "Property") {
          return _target1(nd.Node.Fields[1]);
        } else {
          return nd.WhiteBefore;
        }
      }
    }
  }();

  return join("", toList(delay(function () {
    return map$5(function (t) {
      return formatToken(t.Token);
    }, wa);
  })));
}
function formatEntityKind(_arg1) {
  return _arg1.Case === "Variable" ? "variable" : _arg1.Case === "Binding" ? "binding" : _arg1.Case === "Operator" ? function () {
    var op = _arg1.Fields[1];
    return formatToken(new TokenKind("Operator", [op])) + " operator";
  }() : _arg1.Case === "List" ? "list" : _arg1.Case === "Constant" ? _arg1.Fields[0].Case === "Number" ? function () {
    var n = _arg1.Fields[0].Fields[0];
    return fsFormat("number `%f`")(function (x) {
      return x;
    })(n);
  }() : _arg1.Fields[0].Case === "String" ? function () {
    var n = _arg1.Fields[0].Fields[0];
    return fsFormat("string `%s`")(function (x) {
      return x;
    })(n);
  }() : _arg1.Fields[0].Case === "Boolean" ? _arg1.Fields[0].Fields[0] ? "`true` value" : "`false` value" : "empty value" : _arg1.Case === "Function" ? "function" : _arg1.Case === "LetCommand" ? "let command" : _arg1.Case === "RunCommand" ? "run command" : _arg1.Case === "Program" ? "program" : _arg1.Case === "Root" ? "root" : _arg1.Case === "CallSite" ? "call site" : _arg1.Case === "NamedParam" ? "named param" : _arg1.Case === "ChainElement" ? "chain element" : _arg1.Case === "ArgumentList" ? "argument list" : _arg1.Case === "NamedMember" ? "property or method" : "global value";
}
var anonymous = "";
function entityCodeNameAndAntecedents(_arg1) {
  return _arg1.Case === "Program" ? function () {
    var ans = _arg1.Fields[0];
    return [1, ans, anonymous];
  }() : _arg1.Case === "RunCommand" ? function () {
    var an = _arg1.Fields[0];
    return [2, ofArray([an]), anonymous];
  }() : _arg1.Case === "LetCommand" ? function () {
    var an1 = _arg1.Fields[0];
    var an2 = _arg1.Fields[1];
    return [3, ofArray([an1, an2]), anonymous];
  }() : _arg1.Case === "Operator" ? function () {
    var an1 = _arg1.Fields[0];
    var an2 = _arg1.Fields[2];
    var op = _arg1.Fields[1];
    return [4, ofArray([an1, an2]), formatToken(new TokenKind("Operator", [op]))];
  }() : _arg1.Case === "List" ? function () {
    var ans = _arg1.Fields[0];
    return [5, ans, anonymous];
  }() : _arg1.Case === "Constant" ? _arg1.Fields[0].Case === "Number" ? function () {
    var n = _arg1.Fields[0].Fields[0];
    return [7, new List$2(), String(n)];
  }() : _arg1.Fields[0].Case === "Boolean" ? function () {
    var b = _arg1.Fields[0].Fields[0];
    return [8, new List$2(), String(b)];
  }() : _arg1.Fields[0].Case === "Empty" ? [9, new List$2(), anonymous] : function () {
    var s = _arg1.Fields[0].Fields[0];
    return [6, new List$2(), s];
  }() : _arg1.Case === "Function" ? function () {
    var an1 = _arg1.Fields[0];
    var an2 = _arg1.Fields[1];
    return [10, ofArray([an1, an2]), anonymous];
  }() : _arg1.Case === "GlobalValue" ? function () {
    var n = _arg1.Fields[0];
    return [11, new List$2(), n.Name];
  }() : _arg1.Case === "Variable" ? function () {
    var an = _arg1.Fields[1];
    var n = _arg1.Fields[0];
    return [12, ofArray([an]), n.Name];
  }() : _arg1.Case === "Binding" ? function () {
    var an = _arg1.Fields[1];
    var n = _arg1.Fields[0];
    return [13, ofArray([an]), n.Name];
  }() : _arg1.Case === "ArgumentList" ? function () {
    var ans = _arg1.Fields[0];
    return [14, ans, anonymous];
  }() : _arg1.Case === "CallSite" ? _arg1.Fields[2].Case === "Choice2Of2" ? function () {
    var an1 = _arg1.Fields[0];
    var m = _arg1.Fields[2].Fields[0];
    var n = _arg1.Fields[1];
    return [16, ofArray([an1]), n.Name + "." + String(m)];
  }() : function () {
    var an1 = _arg1.Fields[0];
    var n = _arg1.Fields[1];
    var s = _arg1.Fields[2].Fields[0];
    return [15, ofArray([an1]), n.Name + "." + s];
  }() : _arg1.Case === "NamedParam" ? function () {
    var an = _arg1.Fields[1];
    var n = _arg1.Fields[0];
    return [17, ofArray([an]), n.Name];
  }() : _arg1.Case === "NamedMember" ? function () {
    var an = _arg1.Fields[1];
    var n = _arg1.Fields[0];
    return [18, ofArray([an]), n.Name];
  }() : _arg1.Case === "ChainElement" ? function () {
    var an1 = _arg1.Fields[2];
    var an2 = _arg1.Fields[3];
    var an3 = _arg1.Fields[4];
    var b = _arg1.Fields[0];
    var n = _arg1.Fields[1];
    return [19, choose$$1(function (x) {
      return x;
    }, ofArray([an1, an2, an3])), n.Name + "." + String(b)];
  }() : [0, new List$2(), anonymous];
}

function Entity_get_Antecedents() {
  var patternInput = entityCodeNameAndAntecedents(this.Kind);
  return patternInput[1];
}

function Entity_get_Name() {
  var patternInput = entityCodeNameAndAntecedents(this.Kind);
  return patternInput[2];
}


function formatTypeInfo(_arg1) {
  return _arg1.Case === "Parameter" ? "unresolved type parameter" : _arg1.Case === "App" ? "unresolved type application" : _arg1.Case === "Delayed" ? "delayed type" : _arg1.Case === "Primitive" ? _arg1.Fields[0].Case === "Number" ? "number" : _arg1.Fields[0].Case === "String" ? "string" : _arg1.Fields[0].Case === "Unit" ? "unit" : "boolean" : _arg1.Case === "Object" ? "object type" : _arg1.Case === "Function" ? "function type" : _arg1.Case === "List" ? "list type" : _arg1.Case === "Any" ? "unknown" : "generic type";
}
function rebuildExprNode(e, es, ns) {
  var matchValue = [e, es, ns];

  var _target6 = function _target6() {
    throw new Error("rebuildExprNode: Wrong variable length");
  };

  var _target7 = function _target7() {
    throw new Error("rebuildExprNode: Wrong property length");
  };

  var _target8 = function _target8() {
    throw new Error("rebuildExprNode: Wrong call length");
  };

  var _target10 = function _target10() {
    throw new Error("rebuildExprNode: Wrong function length");
  };

  var _target11 = function _target11() {
    throw new Error("rebuildExprNode: Wrong binary operator argument length");
  };

  var _target12 = function _target12() {
    throw new Error("rebuildExprNode: Not a node");
  };

  if (matchValue[0].Case === "Function") {
    if (matchValue[1].tail != null) {
      if (matchValue[1].tail.tail == null) {
        if (matchValue[2].tail != null) {
          if (matchValue[2].tail.tail == null) {
            var e_1 = matchValue[1].head;
            var n = matchValue[2].head;
            return new Expr("Function", [n, e_1]);
          } else {
            return _target10();
          }
        } else {
          return _target10();
        }
      } else {
        return _target10();
      }
    } else {
      return _target10();
    }
  } else {
    if (matchValue[0].Case === "Property") {
      if (matchValue[1].tail != null) {
        if (matchValue[1].tail.tail == null) {
          if (matchValue[2].tail != null) {
            if (matchValue[2].tail.tail == null) {
              var _e_ = matchValue[1].head;
              var _n = matchValue[2].head;
              return new Expr("Property", [_e_, _n]);
            } else {
              return _target7();
            }
          } else {
            return _target7();
          }
        } else {
          return _target7();
        }
      } else {
        return _target7();
      }
    } else {
      if (matchValue[0].Case === "Binary") {
        if (matchValue[1].tail != null) {
          if (matchValue[1].tail.tail != null) {
            if (matchValue[1].tail.tail.tail == null) {
              if (matchValue[2].tail == null) {
                var e1 = matchValue[1].head;
                var e2 = matchValue[1].tail.head;
                var op = matchValue[0].Fields[1];
                return new Expr("Binary", [e1, op, e2]);
              } else {
                return _target11();
              }
            } else {
              return _target11();
            }
          } else {
            return _target11();
          }
        } else {
          return _target11();
        }
      } else {
        if (matchValue[0].Case === "Call") {
          if (matchValue[1].tail != null) {
            if (matchValue[2].tail != null) {
              var _ret = function () {
                var args = matchValue[0].Fields[2];
                var e_1 = matchValue[1].head;
                var es_1 = matchValue[1].tail;
                var inst = matchValue[0].Fields[0];
                var n = matchValue[2].head;
                var ns_1 = matchValue[2].tail;
                {
                  var _ret2 = function () {
                    var patternInput = function () {
                      return inst != null;
                    }() ? [e_1, es_1] : [null, new List$2(e_1, es_1)];

                    var rebuildArgs = function rebuildArgs(args_1) {
                      return function (es_2) {
                        return function (ns_2) {
                          var matchValue_1 = [args_1, es_2, ns_2];

                          var _target3 = function _target3() {
                            throw new Error("rebuildExprNode: Wrong call length");
                          };

                          if (matchValue_1[0].tail == null) {
                            if (matchValue_1[1].tail == null) {
                              if (matchValue_1[2].tail == null) {
                                return new List$2();
                              } else {
                                return _target3();
                              }
                            } else {
                              return _target3();
                            }
                          } else {
                            if (matchValue_1[0].head.Name != null) {
                              if (matchValue_1[1].tail != null) {
                                if (matchValue_1[2].tail != null) {
                                  var args_2 = matchValue_1[0].tail;
                                  var e_2 = matchValue_1[1].head;
                                  var es_3 = matchValue_1[1].tail;
                                  var n_1 = matchValue_1[2].head;
                                  var ns_3 = matchValue_1[2].tail;
                                  return new List$2(new Argument(n_1, e_2), rebuildArgs(args_2)(es_3)(ns_3));
                                } else {
                                  return _target3();
                                }
                              } else {
                                return _target3();
                              }
                            } else {
                              if (matchValue_1[1].tail != null) {
                                var _args_ = matchValue_1[0].tail;
                                var _e_2 = matchValue_1[1].head;
                                var _es_ = matchValue_1[1].tail;
                                var _ns_ = matchValue_1[2];
                                return new List$2(new Argument(null, _e_2), rebuildArgs(_args_)(_es_)(_ns_));
                              } else {
                                return _target3();
                              }
                            }
                          }
                        };
                      };
                    };

                    return {
                      v: {
                        v: new Expr("Call", [patternInput[0], n, function () {
                          var _Node$$1 = rebuildArgs(args.Node)(patternInput[1])(ns_1);

                          return new _Node(args.WhiteBefore, args.WhiteAfter, args.Range, _Node$$1, args.Entity);
                        }()])
                      }
                    };
                  }();

                  if ((typeof _ret2 === "undefined" ? "undefined" : _typeof$2(_ret2)) === "object") return _ret2.v;
                }
              }();

              if ((typeof _ret === "undefined" ? "undefined" : _typeof$2(_ret)) === "object") return _ret.v;
            } else {
              return _target8();
            }
          } else {
            return _target8();
          }
        } else {
          if (matchValue[0].Case === "Variable") {
            if (matchValue[1].tail == null) {
              if (matchValue[2].tail != null) {
                if (matchValue[2].tail.tail == null) {
                  var _n2 = matchValue[2].head;
                  return new Expr("Variable", [_n2]);
                } else {
                  return _target6();
                }
              } else {
                return _target6();
              }
            } else {
              return _target6();
            }
          } else {
            if (matchValue[0].Case === "Number") {
              return _target12();
            } else {
              if (matchValue[0].Case === "Boolean") {
                return _target12();
              } else {
                if (matchValue[0].Case === "String") {
                  return _target12();
                } else {
                  if (matchValue[0].Case === "Empty") {
                    return _target12();
                  } else {
                    if (matchValue[2].tail == null) {
                      var els = matchValue[1];
                      return new Expr("List", [els]);
                    } else {
                      throw new Error("rebuildExprNode: Wrong list length");
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

function _ExprLeaf_ExprNode_(e) {
  var _target7 = function _target7() {
    return new Choice("Choice1Of2", [null]);
  };

  if (e.Case === "Call") {
    if (e.Fields[0] == null) {
      var _ret3 = function () {
        var args = e.Fields[2];
        var n = e.Fields[1];
        return {
          v: new Choice("Choice2Of2", [[toList(delay(function () {
            return map$5(function (a) {
              return a.Value;
            }, args.Node);
          })), new List$2(n, choose$$1(function (a) {
            return a.Name;
          }, args.Node))]])
        };
      }();

      if ((typeof _ret3 === "undefined" ? "undefined" : _typeof$2(_ret3)) === "object") return _ret3.v;
    } else {
      var _ret4 = function () {
        var args = e.Fields[2];
        var e_1 = e.Fields[0];
        var n = e.Fields[1];
        return {
          v: new Choice("Choice2Of2", [[new List$2(e_1, toList(delay(function () {
            return map$5(function (a) {
              return a.Value;
            }, args.Node);
          }))), new List$2(n, choose$$1(function (a) {
            return a.Name;
          }, args.Node))]])
        };
      }();

      if ((typeof _ret4 === "undefined" ? "undefined" : _typeof$2(_ret4)) === "object") return _ret4.v;
    }
  } else {
    if (e.Case === "Variable") {
      var _n3 = e.Fields[0];
      return new Choice("Choice2Of2", [[new List$2(), ofArray([_n3])]]);
    } else {
      if (e.Case === "List") {
        var els = e.Fields[0];
        return new Choice("Choice2Of2", [[els, new List$2()]]);
      } else {
        if (e.Case === "Function") {
          var b = e.Fields[1];
          var _n4 = e.Fields[0];
          return new Choice("Choice2Of2", [[ofArray([b]), ofArray([_n4])]]);
        } else {
          if (e.Case === "Binary") {
            var l = e.Fields[0];
            var op = e.Fields[1];
            var r = e.Fields[2];
            return new Choice("Choice2Of2", [[ofArray([l, r]), new List$2()]]);
          } else {
            if (e.Case === "Number") {
              return _target7();
            } else {
              if (e.Case === "Boolean") {
                return _target7();
              } else {
                if (e.Case === "String") {
                  return _target7();
                } else {
                  if (e.Case === "Empty") {
                    return _target7();
                  } else {
                    var _e_3 = e.Fields[0];
                    var _n5 = e.Fields[1];
                    return new Choice("Choice2Of2", [[ofArray([_e_3]), ofArray([_n5])]]);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

var BabelOptions = function () {
  function BabelOptions(presets) {
    _classCallCheck(this, BabelOptions);

    this.presets = presets;
  }

  _createClass(BabelOptions, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Interpreter.BabelOptions",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          presets: FArray("string")
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return BabelOptions;
}();
setType("TheGamma.Interpreter.BabelOptions", BabelOptions);
var BabelResult = function () {
  function BabelResult(code) {
    _classCallCheck(this, BabelResult);

    this.code = code;
  }

  _createClass(BabelResult, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Interpreter.BabelResult",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          code: "string"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return BabelResult;
}();
setType("TheGamma.Interpreter.BabelResult", BabelResult);
var EvaluationContext = function () {
  function EvaluationContext(globals) {
    _classCallCheck(this, EvaluationContext);

    this.Globals = globals;
  }

  _createClass(EvaluationContext, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Interpreter.EvaluationContext",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          Globals: Interface("System.Collections.Generic.IDictionary")
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }]);

  return EvaluationContext;
}();
setType("TheGamma.Interpreter.EvaluationContext", EvaluationContext);

function _FindProperty___(name, _arg1) {
  return tryPick(function (_arg2) {
    var _target1 = function _target1() {
      return null;
    };

    if (_arg2.Case === "Property") {
      if (_arg2.Fields[0] === name.Name) {
        var e = _arg2.Fields[3];
        var n = _arg2.Fields[0];
        return e;
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  }, _arg1.Members);
}

function _FindMethod___(name, _arg1) {
  return tryPick(function (_arg2) {
    var _target1 = function _target1() {
      return null;
    };

    if (_arg2.Case === "Method") {
      if (_arg2.Fields[0] === name.Name) {
        var args = _arg2.Fields[1];
        var e = _arg2.Fields[4];
        var n = _arg2.Fields[0];
        return [args, e];
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  }, _arg1.Members);
}

function storeArguments(values) {
  return [_Array$from(values), mapIndexed$$1(function (i, _arg1) {
    return new Expression("MemberExpression", [new Expression("IdentifierExpression", ["_stored", null]), new Expression("NumericLiteral", [i, null]), true, null]);
  }, values)];
}
function evaluateExpression(_stored, expr) {
  var prog = new Program$1(null, ofArray([new Statement("ExpressionStatement", [expr, null])]));
  var code = Babel.transformFromAst(Serializer.serializeProgram(prog), "", new BabelOptions(["es2015"]));
  Log.trace("interpreter", "Interpreter evaluating: %O", code.code);

  try {
    var s = series.create(function (builder_) {
      return builder_.Delay(function () {
        return builder_.Return([]);
      });
    }(singleton$2), "", "", "");
    new RuntimeContext("lol", "", "troll");

    (function (c) {
      return function (s_1) {
        return trimLeft(c, s_1);
      };
    });

    (function (f) {
      return function (g) {
        return function (data) {
          return convertTupleSequence(f, g, data);
        };
      };
    });

    (function (arg00) {
      return chart.bar(arg00);
    });

    table.create(s);
    timeline.create(s);
    series.values(new Int32Array([1]));
    _stored.length;
    return eval(code.code);
  } catch (e) {
    Log.exn("interpreter", "Evaluation failed: %O", e);
    throw new Error();
  }
}
function evaluateExpr(args, exprBuilder) {
  var patternInput = storeArguments(args);
  return evaluateExpression(patternInput[0], exprBuilder(patternInput[1]));
}
function evaluateCall(emitter, inst, args) {
  var patternInput = storeArguments(new List$2(inst, args));
  return evaluateExpression(patternInput[0], emitter.Emit([patternInput[1].head, patternInput[1].tail]));
}
function evaluatePreview(typ, value) {
  var previewName = new Name("preview");

  var matchValue = function () {
    var $var95 = typ;

    if ($var95 != null) {
      return function (t) {
        return reduceType(t);
      }($var95);
    } else {
      return $var95;
    }
  }();

  var _target1 = function _target1() {
    var _target1 = function _target1() {
      return null;
    };

    if (matchValue != null) {
      if (matchValue.Case === "Object") {
        var activePatternResult5435 = _FindMethod___(previewName, matchValue.Fields[0]);

        if (activePatternResult5435 != null) {
          var e = activePatternResult5435[1];
          return evaluateCall(e, value, new List$2());
        } else {
          return _target1();
        }
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  };

  if (matchValue != null) {
    if (matchValue.Case === "Object") {
      var activePatternResult5437 = _FindProperty___(previewName, matchValue.Fields[0]);

      if (activePatternResult5437 != null) {
        var e = activePatternResult5437;
        return evaluateCall(e, value, new List$2());
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
function ensureValue(ctx, e) {
  if (function () {
    return e.Value == null;
  }()) {
    (function () {
      var matchValue = evaluateEntity(ctx, e);

      if (matchValue != null) {
        e.Value = new EntityValue(matchValue, new Lazy(function () {
          return evaluatePreview(e.Type, matchValue);
        }));
      }
    })();
  }
}
function getValue(ctx, e) {
  if (function () {
    return e.Value == null;
  }()) {
    Log.error("interpreter", "getValue: Value of entity %O has not been evaluated.", e);
  }

  return e.Value.Value;
}
function evaluateEntity(ctx, e) {
  var _target11 = function _target11() {
    return null;
  };

  var _target12 = function _target12() {
    Log.error("interpreter", "Cannot evaluate entity: %O", e);
    return null;
  };

  if (e.Kind.Case === "Constant") {
    if (e.Kind.Fields[0].Case === "Number") {
      var n = e.Kind.Fields[0].Fields[0];
      return n;
    } else {
      if (e.Kind.Fields[0].Case === "String") {
        var s = e.Kind.Fields[0].Fields[0];
        return s;
      } else {
        if (e.Kind.Fields[0].Case === "Empty") {
          return null;
        } else {
          var b = e.Kind.Fields[0].Fields[0];
          return b;
        }
      }
    }
  } else {
    if (e.Kind.Case === "GlobalValue") {
      var expr = e.Kind.Fields[1];
      var name = e.Kind.Fields[0];

      if (expr != null) {
        return evaluateExpression([], expr);
      }
    } else {
      if (e.Kind.Case === "ChainElement") {
        if (e.Kind.Fields[0]) {
          if (e.Kind.Fields[3] != null) {
            var inst = e.Kind.Fields[3];
            var _name = e.Kind.Fields[1];
            {
              var matchValue = reduceType(inst.Type);

              var _target1 = function _target1() {
                return null;
              };

              if (matchValue.Case === "Object") {
                var activePatternResult5446 = _FindProperty___(_name, matchValue.Fields[0]);

                if (activePatternResult5446 != null) {
                  var e_1 = activePatternResult5446;
                  return evaluateCall(e_1, getValue(ctx, inst), new List$2());
                } else {
                  return _target1();
                }
              } else {
                return _target1();
              }
            }
          } else {
            return _target12();
          }
        } else {
          if (e.Kind.Fields[3] != null) {
            if (e.Kind.Fields[4] != null) {
              if (e.Kind.Fields[4].Kind.Case === "ArgumentList") {
                var args = e.Kind.Fields[4].Kind.Fields[0];
                var _inst = e.Kind.Fields[3];
                var _name2 = e.Kind.Fields[1];
                {
                  var _ret2 = function () {
                    var pb = toList(takeWhile(function (_arg1) {
                      return _arg1.Kind.Case === "NamedParam" ? false : true;
                    }, args));
                    var nb = toList(skipWhile(function (_arg2) {
                      return _arg2.Kind.Case === "NamedParam" ? false : true;
                    }, args));

                    var positionBased = _Array$from(map$4(function (e_1) {
                      return getValue(ctx, e_1);
                    }, pb));

                    var nameBased = new _Map(choose$$1(function (_arg3) {
                      return _arg3.Kind.Case === "NamedParam" ? function () {
                        var value = _arg3.Kind.Fields[1];
                        var name_1 = _arg3.Kind.Fields[0];
                        return [name_1.Name, getValue(ctx, value)];
                      }() : null;
                    }, nb));
                    var matchValue = reduceType(_inst.Type);

                    var _target1 = function _target1() {
                      return null;
                    };

                    if (matchValue.Case === "Object") {
                      var activePatternResult5453 = _FindMethod___(_name2, matchValue.Fields[0]);

                      if (activePatternResult5453 != null) {
                        var _e_ = activePatternResult5453[1];
                        var pars = activePatternResult5453[0];
                        {
                          var args_1 = mapIndexed$$1(function (i, tupledArg) {
                            return i < positionBased.length ? positionBased[i] : nameBased.has(tupledArg[0]) ? nameBased.get(tupledArg[0]) : null;
                          }, pars);
                          return {
                            v: evaluateCall(_e_, getValue(ctx, _inst), args_1)
                          };
                        }
                      } else {
                        return {
                          v: _target1()
                        };
                      }
                    } else {
                      return {
                        v: _target1()
                      };
                    }
                  }();

                  if ((typeof _ret2 === "undefined" ? "undefined" : _typeof$2(_ret2)) === "object") return _ret2.v;
                }
              } else {
                return _target12();
              }
            } else {
              return _target12();
            }
          } else {
            return _target12();
          }
        }
      } else {
        if (e.Kind.Case === "Operator") {
          if (e.Kind.Fields[1].Case === "Power") {
            var l = e.Kind.Fields[0];
            var r = e.Kind.Fields[2];
            return evaluateExpr(ofArray([getValue(ctx, l), getValue(ctx, r)]), function (_arg4) {
              var _target1 = function _target1() {
                throw new Error("evaluateEntity: Expected two arguments");
              };

              if (_arg4.tail != null) {
                if (_arg4.tail.tail != null) {
                  if (_arg4.tail.tail.tail == null) {
                    var l_1 = _arg4.head;
                    var r_1 = _arg4.tail.head;
                    {
                      var pow = new Expression("MemberExpression", [new Expression("IdentifierExpression", ["pow", null]), new Expression("IdentifierExpression", ["Math", null]), false, null]);
                      return new Expression("CallExpression", [pow, ofArray([l_1, r_1]), null]);
                    }
                  } else {
                    return _target1();
                  }
                } else {
                  return _target1();
                }
              } else {
                return _target1();
              }
            });
          } else {
            var _ret3 = function () {
              var l = e.Kind.Fields[0];
              var op = e.Kind.Fields[1];
              var r = e.Kind.Fields[2];
              return {
                v: evaluateExpr(ofArray([getValue(ctx, l), getValue(ctx, r)]), function (_arg5) {
                  var _target1 = function _target1() {
                    throw new Error("evaluateEntity: Expected two arguments");
                  };

                  if (_arg5.tail != null) {
                    if (_arg5.tail.tail != null) {
                      if (_arg5.tail.tail.tail == null) {
                        var l_1 = _arg5.head;
                        var r_1 = _arg5.tail.head;
                        {
                          var op_1 = op.Case === "Plus" ? new BinaryOperator("BinaryPlus", []) : op.Case === "Minus" ? new BinaryOperator("BinaryMinus", []) : op.Case === "Multiply" ? new BinaryOperator("BinaryMultiply", []) : op.Case === "Divide" ? new BinaryOperator("BinaryDivide", []) : op.Case === "GreaterThan" ? new BinaryOperator("BinaryGreater", []) : op.Case === "LessThan" ? new BinaryOperator("BinaryLess", []) : op.Case === "GreaterThanOrEqual" ? new BinaryOperator("BinaryGreaterOrEqual", []) : op.Case === "LessThanOrEqual" ? new BinaryOperator("BinaryLessOrEqual", []) : op.Case === "Power" ? function () {
                            throw new Error("evaluateEntity: Power is not a binary operation");
                          }() : new BinaryOperator("BinaryEqualStrict", []);
                          return new Expression("BinaryExpression", [op_1, l_1, r_1, null]);
                        }
                      } else {
                        return _target1();
                      }
                    } else {
                      return _target1();
                    }
                  } else {
                    return _target1();
                  }
                })
              };
            }();

            if ((typeof _ret3 === "undefined" ? "undefined" : _typeof$2(_ret3)) === "object") return _ret3.v;
          }
        } else {
          if (e.Kind.Case === "Variable") {
            var value = e.Kind.Fields[1];
            var $var96 = value.Value;

            if ($var96 != null) {
              return function (v) {
                return v.Value;
              }($var96);
            } else {
              return $var96;
            }
          } else {
            if (e.Kind.Case === "List") {
              var ents = e.Kind.Fields[0];
              return evaluateExpr(map$4(function (e_1) {
                return getValue(ctx, e_1);
              }, ents), function (elements) {
                return new Expression("ArrayExpression", [elements, null]);
              });
            } else {
              if (e.Kind.Case === "ArgumentList") {
                return _target11();
              } else {
                if (e.Kind.Case === "NamedParam") {
                  return _target11();
                } else {
                  if (e.Kind.Case === "NamedMember") {
                    return _target11();
                  } else {
                    return _target12();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function evaluateEntityTree(ctx, e) {
  var visited = new _Map();

  var loop = function loop(e_1) {
    if (!visited.has(e_1.Symbol) ? function () {
      return e_1.Value == null;
    }() : false) {
      visited.set(e_1.Symbol, true);
      {
        var inputSequence = Entity_get_Antecedents.bind(e_1)();
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(inputSequence), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var e_2 = _step.value;
            loop(e_2);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
      ensureValue(ctx, e_1);
    }
  };

  loop(e);
  return e.Value;
}
function globalEntity(name, meta, typ, expr) {
  var Kind = new EntityKind("GlobalValue", [new Name(name), expr]);

  var _Symbol$$1 = _Symbol2();

  var Type$$1 = typ;
  return new Entity(Kind, _Symbol$$1, null, meta, Type$$1, new List$2());
}
function evaluate(globals, e) {
  Log.trace("interpreter", "Evaluating entity %s (%O)", Entity_get_Name.bind(e)(), e.Kind);
  var ctx = new EvaluationContext(new _Map(toList(delay(function () {
    return map$5(function (e_1) {
      return [Entity_get_Name.bind(e_1)(), e_1];
    }, globals);
  }))));
  var res = evaluateEntityTree(ctx, e);
  Log.trace("interpreter", "Evaluated entity %s (%O) = %O", Entity_get_Name.bind(e)(), e.Kind, res);
  return res;
}

var _createClass$11 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$12(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var QueueCell = function QueueCell(message) {
    _classCallCheck$12(this, QueueCell);

    this.value = message;
};

var MailboxQueue = function () {
    function MailboxQueue() {
        _classCallCheck$12(this, MailboxQueue);
    }

    _createClass$11(MailboxQueue, [{
        key: "add",
        value: function add(message) {
            var itCell = new QueueCell(message);
            if (this.firstAndLast) {
                this.firstAndLast[1].next = itCell;
                this.firstAndLast = [this.firstAndLast[0], itCell];
            } else this.firstAndLast = [itCell, itCell];
        }
    }, {
        key: "tryGet",
        value: function tryGet() {
            if (this.firstAndLast) {
                var value = this.firstAndLast[0].value;
                if (this.firstAndLast[0].next) this.firstAndLast = [this.firstAndLast[0].next, this.firstAndLast[1]];else delete this.firstAndLast;
                return value;
            }
            return void 0;
        }
    }]);

    return MailboxQueue;
}();

var MailboxProcessor = function () {
    function MailboxProcessor(body, cancellationToken$$1) {
        _classCallCheck$12(this, MailboxProcessor);

        this.body = body;
        this.cancellationToken = cancellationToken$$1 || defaultCancellationToken;
        this.messages = new MailboxQueue();
    }

    _createClass$11(MailboxProcessor, [{
        key: "__processEvents",
        value: function __processEvents() {
            if (this.continuation) {
                var value = this.messages.tryGet();
                if (value) {
                    var cont = this.continuation;
                    delete this.continuation;
                    cont(value);
                }
            }
        }
    }, {
        key: "start",
        value: function start$1() {
            startImmediate(this.body(this), this.cancellationToken);
        }
    }, {
        key: "receive",
        value: function receive() {
            var _this = this;

            return fromContinuations(function (conts) {
                if (_this.continuation) throw new Error("Receive can only be called once!");
                _this.continuation = conts[0];
                _this.__processEvents();
            });
        }
    }, {
        key: "post",
        value: function post(message) {
            this.messages.add(message);
            this.__processEvents();
        }
    }, {
        key: "postAndAsyncReply",
        value: function postAndAsyncReply(buildMessage) {
            var result = void 0;
            var continuation = void 0;
            function checkCompletion() {
                if (result && continuation) continuation(result);
            }
            var reply = {
                reply: function reply(res) {
                    result = res;
                    checkCompletion();
                }
            };
            this.messages.add(buildMessage(reply));
            this.__processEvents();
            return fromContinuations(function (conts) {
                continuation = conts[0];
                checkCompletion();
            });
        }
    }]);

    return MailboxProcessor;
}();

function start$1(body, cancellationToken$$1) {
    var mbox = new MailboxProcessor(body, cancellationToken$$1);
    mbox.start();
    return mbox;
}

var Property = function () {
  function Property(caseName, fields) {
    _classCallCheck(this, Property);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Property, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Editors.Property",
        interfaces: ["FSharpUnion"],
        cases: {
          Property: ["string", Option(Metadata), Type]
        }
      };
    }
  }]);

  return Property;
}();
setType("TheGamma.Editors.Property", Property);
var Editor = function () {
  function Editor(caseName, fields) {
    _classCallCheck(this, Editor);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Editor, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Editors.Editor",
        interfaces: ["FSharpUnion"],
        cases: {
          CreateList: [Documentation, makeGeneric(_Node, {
            T: Name
          }), FArray(makeGeneric(_Node, {
            T: Name
          })), FArray(Property)],
          NestedChoice: [Documentation, Documentation, makeGeneric(_Node, {
            T: Name
          }), makeGeneric(_Node, {
            T: Name
          }), FArray(Tuple([Property, FArray(Property)]))],
          SingleChoice: [Documentation, makeGeneric(_Node, {
            T: Name
          }), FArray(Property)]
        }
      };
    }
  }, {
    key: "Range",
    get: function () {
      return this.Case === "NestedChoice" ? unionRanges(this.Fields[2].Range, this.Fields[3].Range) : this.Case === "CreateList" ? fold$1(function (r, n) {
        return unionRanges(r, n.Range);
      }, new _Range(this.Fields[1].Range.End, this.Fields[1].Range.End), this.Fields[2]) : this.Fields[1].Range;
    }
  }]);

  return Editor;
}();
setType("TheGamma.Editors.Editor", Editor);
function getMembers(typ) {
  return function (builder_) {
    return builder_.Delay(function () {
      return typ.Case === "Object" ? builder_.Return(typ.Fields[0].Members) : typ.Case === "Delayed" ? builder_.Bind(Async_AwaitFuture_Static(typ.Fields[1]), function (_arg1) {
        return builder_.ReturnFrom(getMembers(_arg1));
      }) : function () {
        Log.error("editors", "getMembers: Type %O is not an object", typ);
        return builder_.Return(function () {
          throw new Error("getMembers: Not an object");
        }());
      }();
    });
  }(singleton$2);
}
function extractMetadata(m) {
  var doc = tryPick(function (m_1) {
    return (m_1.Context === "http://thegamma.net" ? m_1.Type === "Documentation" : false) ? m_1.Data : null;
  }, m);
  var schema = tryPick(function (m_1) {
    return m_1.Context === "http://schema.org" ? m_1 : null;
  }, m);
  return [schema, doc != null ? doc : new Documentation("None", [])];
}
function getProperty(name, members) {
  return tryPick(function (_arg1) {
    var _target1 = function _target1() {
      return null;
    };

    if (_arg1.Case === "Property") {
      if (_arg1.Fields[0] === name.Name) {
        var m = _arg1.Fields[2];
        var n = _arg1.Fields[0];
        var t = _arg1.Fields[1];
        {
          var patternInput = extractMetadata(m);
          return [patternInput[0], t, patternInput[1]];
        }
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  }, members);
}
function filterProperties(f, members) {
  var filtered = _Array$from(choose$1(function (_arg1) {
    return _arg1.Case === "Property" ? function () {
      var patternInput = extractMetadata(_arg1.Fields[2]);

      if (f([_arg1.Fields[0], patternInput[0], _arg1.Fields[1]])) {
        return new Property("Property", [_arg1.Fields[0], patternInput[0], _arg1.Fields[1]]);
      }
    }() : null;
  }, members));

  return filtered;
}
function dominant(all, subset) {
  var nall = count(all);
  var nsub = count(subset);

  if (nsub >= 2) {
    return nsub >= ~~(nall * 2 / 3);
  } else {
    return false;
  }
}
function chooseableProperty(equalTyp, name, typ) {
  return function (builder_) {
    return builder_.Delay(function () {
      return builder_.Bind(getMembers(typ), function (_arg1) {
        var matchValue = getProperty(name.Node, _arg1);

        var _target1 = function _target1() {
          return builder_.Return();
        };

        if (matchValue != null) {
          if (matchValue[0] != null) {
            var _ret = function () {
              var propSchema = matchValue[0];
              var propTyp = matchValue[1];
              {
                var alts = filterProperties(function (_arg2) {
                  return _arg2[1] != null ? function () {
                    var s = _arg2[1];

                    if (s.Type === propSchema.Type) {
                      if (!equalTyp) {
                        return true;
                      } else {
                        return typesEqual(_arg2[2])(propTyp);
                      }
                    } else {
                      return false;
                    }
                  }() : false;
                }, _arg1);

                if (dominant(_arg1, alts)) {
                  return {
                    v: builder_.Return([name, alts])
                  };
                } else {
                  return {
                    v: builder_.Return()
                  };
                }
              }
            }();

            if ((typeof _ret === "undefined" ? "undefined" : _typeof$2(_ret)) === "object") return _ret.v;
          } else {
            return _target1();
          }
        } else {
          return _target1();
        }
      });
    });
  }(singleton$2);
}
function pickChainSuffixes(f, expr) {
  var loop = function loop(res) {
    return function (suffix) {
      return function (expr_1) {
        return function (builder_) {
          return builder_.Delay(function () {
            return expr_1.Node.Case === "Property" ? function () {
              var inst = expr_1.Node.Fields[0];
              var name = expr_1.Node.Fields[1];
              return builder_.Bind(getMembers(inst.Entity.Type), function (_arg1) {
                var matchValue = getProperty(name.Node, _arg1);

                if (matchValue == null) {
                  return builder_.ReturnFrom(loop(res)(suffix)(inst));
                } else {
                  var _ret2 = function () {
                    var propTy = matchValue[1];
                    var propSch = matchValue[0];
                    var propDoc = matchValue[2];
                    var suffix_1 = new List$2([inst.Entity.Type, name, propSch, propTy, propDoc], suffix);
                    return {
                      v: builder_.Bind(f(suffix_1), function (_arg2) {
                        return _arg2 != null ? builder_.ReturnFrom(loop(new List$2(_arg2, res))(suffix_1)(inst)) : builder_.ReturnFrom(loop(res)(suffix_1)(inst));
                      })
                    };
                  }();

                  if ((typeof _ret2 === "undefined" ? "undefined" : _typeof$2(_ret2)) === "object") return _ret2.v;
                }
              });
            }() : function () {
              var activePatternResult6640 = _ExprLeaf_ExprNode_(expr_1.Node);

              if (activePatternResult6640.Case === "Choice1Of2") {
                return builder_.Return(res);
              } else {
                var es = activePatternResult6640.Fields[0][0];
                return builder_.ReturnFrom(function () {
                  var f_1 = function f_1(st) {
                    return function (e) {
                      return loop(st)(new List$2())(e);
                    };
                  };

                  return function (l) {
                    return Async.fold(f_1, res, l);
                  };
                }()(es));
              }
            }();
          });
        }(singleton$2);
      };
    };
  };

  return loop(new List$2())(new List$2())(expr);
}
var collectSingleChoiceEditors = function () {
  var f = function f(chain) {
    return function (builder_) {
      return builder_.Delay(function () {
        return chain.tail != null ? function () {
          var tyParent = chain.head[0];
          var name = chain.head[1];
          var doc = chain.head[4];
          return builder_.Bind(chooseableProperty(true, name, tyParent), function (_arg1) {
            return builder_.Return(function () {
              var $var105 = _arg1;

              if ($var105 != null) {
                return function (tupledArg) {
                  return new Editor("SingleChoice", [doc, tupledArg[0], tupledArg[1]]);
                }($var105);
              } else {
                return $var105;
              }
            }());
          });
        }() : builder_.Return();
      });
    }(singleton$2);
  };

  return function (expr) {
    return pickChainSuffixes(f, expr);
  };
}();
var collectNestedChoiceEditors = function () {
  var f = function f(chain) {
    return function (builder_) {
      return builder_.Delay(function () {
        var _target1 = function _target1() {
          return builder_.Return();
        };

        if (chain.tail != null) {
          if (chain.tail.tail != null) {
            if (chain.tail.head[2] != null) {
              var _ret3 = function () {
                var catDoc = chain.head[4];
                var catName = chain.head[1];
                var catParentTy = chain.head[0];
                var catSch = chain.head[2];
                var catTy = chain.head[3];
                var valDoc = chain.tail.head[4];
                var valName = chain.tail.head[1];
                var valParentTy = chain.tail.head[0];
                var valSch = chain.tail.head[2];
                var valTy = chain.tail.head[3];
                {
                  Log.trace("editors", "checking %s.%s", catName.Node.Name, valName.Node.Name);
                  return {
                    v: builder_.Bind(chooseableProperty(false, catName, catParentTy), function (_arg1) {
                      return builder_.Bind(chooseableProperty(true, valName, valParentTy), function (_arg2) {
                        var matchValue = [_arg1, _arg2];

                        var _target1_1 = function _target1_1() {
                          return builder_.Return();
                        };

                        if (matchValue[0] != null) {
                          if (matchValue[1] != null) {
                            var _ret4 = function () {
                              var catMembers = matchValue[0][1];
                              var catName_1 = matchValue[0][0];
                              var valMembers = matchValue[1][1];
                              var valName_1 = matchValue[1][0];
                              {
                                var _ret5 = function () {
                                  Log.trace("editors", "collecting %s nested members", catMembers.length);

                                  var nestedMembers = function nestedMembers(trunc) {
                                    return Async.Array.map(function (_arg1_1) {
                                      return function (builder__1) {
                                        return builder__1.Delay(function () {
                                          return builder__1.Bind(getMembers(_arg1_1.Fields[2]), function (_arg3) {
                                            var filtered = filterProperties(function (_arg4) {
                                              return _arg4[1] != null ? function () {
                                                var s = _arg4[1];

                                                if (s.Type === valSch.Type) {
                                                  return typesEqual(_arg4[2])(valTy);
                                                } else {
                                                  return false;
                                                }
                                              }() : false;
                                            }, _arg3);
                                            return builder__1.Return([_arg1_1, [_arg3, filtered]]);
                                          });
                                        });
                                      }(singleton$2);
                                    }, trunc(catMembers));
                                  };

                                  return {
                                    v: {
                                      v: builder_.Bind(nestedMembers(function ($var106) {
                                        return _Array$from(truncate(5, $var106));
                                      }), function (_arg5) {
                                        return (count(_arg5) > 2 ? dominant(collect$1(function ($var107) {
                                          return $var107[1][0];
                                        }, _arg5), collect$1(function ($var108) {
                                          return $var108[1][1];
                                        }, _arg5)) : false) ? builder_.Bind(nestedMembers(function (x) {
                                          return x;
                                        }), function (_arg6) {
                                          var props = _arg6.map(function (tupledArg) {
                                            return [tupledArg[0], tupledArg[1][1]];
                                          });

                                          return builder_.Return(new Editor("NestedChoice", [catDoc, valDoc, catName_1, valName_1, props]));
                                        }) : builder_.Return();
                                      })
                                    }
                                  };
                                }();

                                if ((typeof _ret5 === "undefined" ? "undefined" : _typeof$2(_ret5)) === "object") return _ret5.v;
                              }
                            }();

                            if ((typeof _ret4 === "undefined" ? "undefined" : _typeof$2(_ret4)) === "object") return _ret4.v;
                          } else {
                            return _target1_1();
                          }
                        } else {
                          return _target1_1();
                        }
                      });
                    })
                  };
                }
              }();

              if ((typeof _ret3 === "undefined" ? "undefined" : _typeof$2(_ret3)) === "object") return _ret3.v;
            } else {
              return _target1();
            }
          } else {
            return _target1();
          }
        } else {
          return _target1();
        }
      });
    }(singleton$2);
  };

  return function (expr) {
    return pickChainSuffixes(f, expr);
  };
}();
var ItemListSchema = function () {
  function ItemListSchema(name) {
    _classCallCheck(this, ItemListSchema);

    this.name = name;
  }

  _createClass(ItemListSchema, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Editors.ItemListSchema",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          name: "string"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return ItemListSchema;
}();
setType("TheGamma.Editors.ItemListSchema", ItemListSchema);
var CreateActionSchema = function () {
  function CreateActionSchema(result) {
    _classCallCheck(this, CreateActionSchema);

    this.result = result;
  }

  _createClass(CreateActionSchema, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Editors.CreateActionSchema",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          result: ItemListSchema
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return CreateActionSchema;
}();
setType("TheGamma.Editors.CreateActionSchema", CreateActionSchema);
var AddActionSchema = function () {
  function AddActionSchema(targetCollection) {
    _classCallCheck(this, AddActionSchema);

    this.targetCollection = targetCollection;
  }

  _createClass(AddActionSchema, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Editors.AddActionSchema",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          targetCollection: ItemListSchema
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return AddActionSchema;
}();
setType("TheGamma.Editors.AddActionSchema", AddActionSchema);
var collectItemListEditors = function () {
  var f = function f(chain) {
    return function (builder_) {
      return builder_.Delay(function () {
        var _target1 = function _target1() {
          var _target1 = function _target1() {
            return builder_.Return();
          };

          if (chain.tail != null) {
            if (chain.head[2] != null) {
              if (function () {
                var catDoc = chain.head[4];
                var caTy = chain.head[3];
                var caSch = chain.head[2];
                var caParentTy = chain.head[0];
                var caName = chain.head[1];
                return caSch.Type === "CreateAction";
              }()) {
                var _ret6 = function () {
                  var addActions = chain.tail;
                  var caName = chain.head[1];
                  var caParentTy = chain.head[0];
                  var caSch = chain.head[2];
                  var caTy = chain.head[3];
                  var catDoc = chain.head[4];
                  {
                    var _ret7 = function () {
                      var listName = caSch.Data.result.name;

                      var collectAdds = function collectAdds(added) {
                        return function (lastTy) {
                          return function (_arg1) {
                            var _target1_1 = function _target1_1() {
                              return [reverse$$1(added), lastTy];
                            };

                            if (_arg1.tail != null) {
                              if (_arg1.head[2] != null) {
                                if (function () {
                                  var addTy = _arg1.head[3];
                                  var addSch = _arg1.head[2];
                                  var addParentTy = _arg1.head[0];
                                  var addName = _arg1.head[1];

                                  if (addSch.Type === "AddAction") {
                                    return listName === addSch.Data.targetCollection.name;
                                  } else {
                                    return false;
                                  }
                                }()) {
                                  var addActions_1 = _arg1.tail;
                                  var addName = _arg1.head[1];
                                  var addParentTy = _arg1.head[0];
                                  var addSch = _arg1.head[2];
                                  var addTy = _arg1.head[3];
                                  return collectAdds(new List$2(addName, added))(addTy)(addActions_1);
                                } else {
                                  return _target1_1();
                                }
                              } else {
                                return _target1_1();
                              }
                            } else {
                              return _target1_1();
                            }
                          };
                        };
                      };

                      var patternInput = collectAdds(new List$2())(caTy)(addActions);
                      return {
                        v: {
                          v: builder_.Bind(getMembers(patternInput[1]), function (_arg2) {
                            var availableAdds = filterProperties(function (_arg3) {
                              var _target1_1 = function _target1_1() {
                                return false;
                              };

                              if (_arg3[1] != null) {
                                if (function () {
                                  var s = _arg3[1];
                                  return s.Type === "AddAction";
                                }()) {
                                  var n = _arg3[0];
                                  var s = _arg3[1];
                                  var t = _arg3[2];
                                  return s.Data.targetCollection.name === listName;
                                } else {
                                  return _target1_1();
                                }
                              } else {
                                return _target1_1();
                              }
                            }, _arg2);
                            return builder_.Return(new Editor("CreateList", [catDoc, caName, _Array$from(patternInput[0]), availableAdds]));
                          })
                        }
                      };
                    }();

                    if ((typeof _ret7 === "undefined" ? "undefined" : _typeof$2(_ret7)) === "object") return _ret7.v;
                  }
                }();

                if ((typeof _ret6 === "undefined" ? "undefined" : _typeof$2(_ret6)) === "object") return _ret6.v;
              } else {
                return _target1();
              }
            } else {
              return _target1();
            }
          } else {
            return _target1();
          }
        };

        if (chain.tail != null) {
          if (chain.head[2] != null) {
            if (chain.tail.tail != null) {
              if (chain.tail.head[2] != null) {
                if (function () {
                  var caSch2 = chain.tail.head[2];
                  var caSch1 = chain.head[2];

                  if (caSch1.Type === "CreateAction") {
                    return caSch2.Type === "CreateAction";
                  } else {
                    return false;
                  }
                }()) {
                  var caSch1 = chain.head[2];
                  var caSch2 = chain.tail.head[2];
                  return builder_.Return();
                } else {
                  return _target1();
                }
              } else {
                return _target1();
              }
            } else {
              return _target1();
            }
          } else {
            return _target1();
          }
        } else {
          return _target1();
        }
      });
    }(singleton$2);
  };

  return function (expr) {
    return pickChainSuffixes(f, expr);
  };
}();
function collectCmdEditors(cmd) {
  return function (builder_) {
    return builder_.Delay(function () {
      var _target0 = function _target0(e) {
        Log.trace("editors", "single choice");
        return builder_.Bind(collectSingleChoiceEditors(e), function (_arg1) {
          Log.trace("editors", "item list");
          return builder_.Bind(collectItemListEditors(e), function (_arg2) {
            Log.trace("editors", "multi choice");
            return builder_.Bind(collectNestedChoiceEditors(e), function (_arg3) {
              return builder_.Return(append$$1(_arg1, append$$1(_arg3, _arg2)));
            });
          });
        });
      };

      if (cmd.Node.Case === "Expr") {
        return _target0(cmd.Node.Fields[0]);
      } else {
        return _target0(cmd.Node.Fields[1]);
      }
    });
  }(singleton$2);
}

var BindingContext = function () {
  function BindingContext(variables, globalValues, root, table, bound) {
    _classCallCheck(this, BindingContext);

    this.Variables = variables;
    this.GlobalValues = globalValues;
    this.Root = root;
    this.Table = table;
    this.Bound = bound;
  }

  _createClass(BindingContext, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Binder.BindingContext",
        interfaces: ["FSharpRecord"],
        properties: {
          Variables: makeGeneric(FMap, {
            Key: Name,
            Value: Entity
          }),
          GlobalValues: makeGeneric(FMap, {
            Key: Name,
            Value: Entity
          }),
          Root: Entity,
          Table: makeGeneric(_Map, {
            TKey: Interface("TheGamma.Common.Symbol"),
            TValue: makeGeneric(ListDictionaryNode, {
              K: Interface("TheGamma.Common.Symbol"),
              T: makeGeneric(FMap, {
                Key: Tuple(["number", "string"]),
                Value: Entity
              })
            })
          }),
          Bound: FArray(Tuple([_Range, Entity]))
        }
      };
    }
  }]);

  return BindingContext;
}();
setType("TheGamma.Binder.BindingContext", BindingContext);
var BindingResult = function () {
  _createClass(BindingResult, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Binder.BindingResult",
        properties: {
          Entities: FArray(Tuple([_Range, Entity]))
        }
      };
    }
  }]);

  function BindingResult(ents) {
    var _this = this;

    _classCallCheck(this, BindingResult);

    this.ents = ents;
    {
      (function () {
        var res = new _Map();

        var add$$1 = function add$$1(a) {
          return function (e) {
            if (!res.has(a)) {
              res.set(a, []);
            }

            res.get(a).push(e);
          };
        };

        {
          var arr = _this.ents;

          for (var idx = 0; idx <= arr.length - 1; idx++) {
            var forLoopVar = arr[idx];
            var inputSequence = Entity_get_Antecedents.bind(forLoopVar[1])();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = _getIterator(inputSequence), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var a = _step.value;
                add$$1(a.Symbol)(forLoopVar[1]);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
        }
        _this.childrenLookup = res;
      })();
    }
  }

  _createClass(BindingResult, [{
    key: "GetChildren",
    value: function (ent) {
      var matchValue = tryGetValue(this.childrenLookup, ent.Symbol);

      if (matchValue[0]) {
        return _Array$from(matchValue[1]);
      } else {
        return [];
      }
    }
  }, {
    key: "Entities",
    get: function () {
      return this.ents;
    }
  }]);

  return BindingResult;
}();
setType("TheGamma.Binder.BindingResult", BindingResult);
function bindEntity(ctx, kind) {
  var patternInput = entityCodeNameAndAntecedents(kind);
  var symbols = map$4(function (a) {
    return a.Symbol;
  }, new List$2(ctx.Root, patternInput[1]));

  var nestedDict = function () {
    var matchValue = ListDictionaryModule.tryFind(symbols, ctx.Table);

    if (matchValue != null) {
      return matchValue;
    } else {
      return create$4(null, new GenericComparer(compare));
    }
  }();

  if (nestedDict.has([patternInput[0], patternInput[2]])) {
    Log.trace("binder", "Cached: binding %s %s", formatEntityKind(kind), patternInput[2]);
    return nestedDict.get([patternInput[0], patternInput[2]]);
  } else {
    var _ret2 = function () {
      Log.trace("binder", "New: binding %s %s", formatEntityKind(kind), patternInput[2]);

      var symbol = _Symbol2();

      var entity = function () {
        var Type$$1 = null;
        var Errors = new List$2();
        var Meta = new List$2();
        return new Entity(kind, symbol, null, Meta, Type$$1, Errors);
      }();

      ListDictionaryModule.set(symbols, add$2([patternInput[0], patternInput[2]], entity, nestedDict), ctx.Table);
      return {
        v: entity
      };
    }();

    if ((typeof _ret2 === "undefined" ? "undefined" : _typeof$2(_ret2)) === "object") return _ret2.v;
  }
}
function setEntity(ctx, node$$1, entity) {
  ctx.Bound.push([node$$1.Range, entity]);
  node$$1.Entity = entity;
  return entity;
}
function bindExpression(callSite, ctx, node$$1) {
  var bindCallArgExpression = function bindCallArgExpression(site) {
    var callSite_1 = site;
    return function (ctx_1) {
      return function (node_1) {
        return bindExpression(callSite_1, ctx_1, node_1);
      };
    };
  };

  var bindExpression_1 = function () {
    var callSite_1 = null;
    return function (ctx_1) {
      return function (node_1) {
        return bindExpression(callSite_1, ctx_1, node_1);
      };
    };
  }();

  if (node$$1.Node.Case === "Call") {
    var _ret3 = function () {
      var inst = function () {
        var $var94 = node$$1.Node.Fields[0];

        if ($var94 != null) {
          return bindExpression_1(ctx)($var94);
        } else {
          return $var94;
        }
      }() != null ? function () {
        var $var94 = node$$1.Node.Fields[0];

        if ($var94 != null) {
          return bindExpression_1(ctx)($var94);
        } else {
          return $var94;
        }
      }() : ctx.Root;

      var site = function site(arg) {
        return bindEntity(ctx, new EntityKind("CallSite", [inst, node$$1.Node.Fields[1].Node, arg]));
      };

      var args = mapIndexed$$1(function (idx, arg) {
        var site_1 = site(arg.Name != null ? new Choice("Choice1Of2", [arg.Name.Node.Name]) : new Choice("Choice2Of2", [idx]));
        var expr = bindCallArgExpression(site_1)(ctx)(arg.Value);

        if (arg.Name == null) {
          return expr;
        } else {
          return function (entity) {
            return setEntity(ctx, arg.Name, entity);
          }(bindEntity(ctx, new EntityKind("NamedParam", [arg.Name.Node, expr])));
        }
      }, node$$1.Node.Fields[2].Node);

      var args_1 = function (entity) {
        return setEntity(ctx, node$$1.Node.Fields[2], entity);
      }(bindEntity(ctx, new EntityKind("ArgumentList", [args])));

      var named = function (entity) {
        return setEntity(ctx, node$$1.Node.Fields[1], entity);
      }(bindEntity(ctx, new EntityKind("NamedMember", [node$$1.Node.Fields[1].Node, inst])));

      return {
        v: function (entity) {
          return setEntity(ctx, node$$1, entity);
        }(bindEntity(ctx, new EntityKind("ChainElement", [false, node$$1.Node.Fields[1].Node, named, inst, args_1])))
      };
    }();

    if ((typeof _ret3 === "undefined" ? "undefined" : _typeof$2(_ret3)) === "object") return _ret3.v;
  } else {
    if (node$$1.Node.Case === "Property") {
      var _inst = bindExpression_1(ctx)(node$$1.Node.Fields[0]);

      var _named = function (entity) {
        return setEntity(ctx, node$$1.Node.Fields[1], entity);
      }(bindEntity(ctx, new EntityKind("NamedMember", [node$$1.Node.Fields[1].Node, _inst])));

      return function (entity) {
        return setEntity(ctx, node$$1, entity);
      }(bindEntity(ctx, new EntityKind("ChainElement", [true, node$$1.Node.Fields[1].Node, _named, _inst, null])));
    } else {
      if (node$$1.Node.Case === "Binary") {
        var lentity = bindExpression_1(ctx)(node$$1.Node.Fields[0]);
        var rentity = bindExpression_1(ctx)(node$$1.Node.Fields[2]);
        return function (entity) {
          return setEntity(ctx, node$$1, entity);
        }(bindEntity(ctx, new EntityKind("Operator", [lentity, node$$1.Node.Fields[1].Node, rentity])));
      } else {
        if (node$$1.Node.Case === "List") {
          var entities = map$4(bindExpression_1(ctx), node$$1.Node.Fields[0]);
          return function (entity) {
            return setEntity(ctx, node$$1, entity);
          }(bindEntity(ctx, new EntityKind("List", [entities])));
        } else {
          if (node$$1.Node.Case === "Function") {
            var callSite_1 = callSite == null ? function () {
              throw new Error("bindExpression: Function missing call site");
            }() : callSite;

            var _var = function (entity) {
              return setEntity(ctx, node$$1.Node.Fields[0], entity);
            }(bindEntity(ctx, new EntityKind("Binding", [node$$1.Node.Fields[0].Node, callSite_1])));

            var body = bindExpression_1(new BindingContext(add$2(node$$1.Node.Fields[0].Node, _var, ctx.Variables), ctx.GlobalValues, ctx.Root, ctx.Table, ctx.Bound))(node$$1.Node.Fields[1]);
            return function (entity) {
              return setEntity(ctx, node$$1, entity);
            }(bindEntity(ctx, new EntityKind("Function", [_var, body])));
          } else {
            if (node$$1.Node.Case === "Boolean") {
              return function (entity) {
                return setEntity(ctx, node$$1, entity);
              }(bindEntity(ctx, new EntityKind("Constant", [new Constant("Boolean", [node$$1.Node.Fields[0]])])));
            } else {
              if (node$$1.Node.Case === "String") {
                return function (entity) {
                  return setEntity(ctx, node$$1, entity);
                }(bindEntity(ctx, new EntityKind("Constant", [new Constant("String", [node$$1.Node.Fields[0]])])));
              } else {
                if (node$$1.Node.Case === "Number") {
                  return function (entity) {
                    return setEntity(ctx, node$$1, entity);
                  }(bindEntity(ctx, new EntityKind("Constant", [new Constant("Number", [node$$1.Node.Fields[0]])])));
                } else {
                  if (node$$1.Node.Case === "Empty") {
                    return function (entity) {
                      return setEntity(ctx, node$$1, entity);
                    }(bindEntity(ctx, new EntityKind("Constant", [new Constant("Empty", [])])));
                  } else {
                    var matchValue = tryFind$1(node$$1.Node.Fields[0].Node, ctx.Variables);

                    if (matchValue != null) {
                      return function (entity) {
                        return setEntity(ctx, node$$1, entity);
                      }(bindEntity(ctx, new EntityKind("Variable", [node$$1.Node.Fields[0].Node, matchValue])));
                    } else {
                      var matchValue_1 = tryFind$1(node$$1.Node.Fields[0].Node, ctx.GlobalValues);

                      if (matchValue_1 == null) {
                        return function (entity) {
                          return setEntity(ctx, node$$1, entity);
                        }(bindEntity(ctx, new EntityKind("GlobalValue", [node$$1.Node.Fields[0].Node, null])));
                      } else {
                        return function (entity) {
                          return setEntity(ctx, node$$1, entity);
                        }(matchValue_1);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function bindCommand(ctx, node$$1) {
  return node$$1.Node.Case === "Expr" ? function () {
    var body = bindExpression(null, ctx, node$$1.Node.Fields[0]);

    var node_1 = function (entity) {
      return setEntity(ctx, node$$1, entity);
    }(bindEntity(ctx, new EntityKind("RunCommand", [body])));

    return [ctx, node_1];
  }() : function () {
    var body = bindExpression(null, ctx, node$$1.Node.Fields[1]);

    var _var = function (entity) {
      return setEntity(ctx, node$$1.Node.Fields[0], entity);
    }(bindEntity(ctx, new EntityKind("Variable", [node$$1.Node.Fields[0].Node, body])));

    var node_1 = function (entity) {
      return setEntity(ctx, node$$1, entity);
    }(bindEntity(ctx, new EntityKind("LetCommand", [_var, body])));

    return [new BindingContext(add$2(node$$1.Node.Fields[0].Node, _var, ctx.Variables), ctx.GlobalValues, ctx.Root, ctx.Table, ctx.Bound), node_1];
  }();
}
function bindProgram(ctx, program) {
  ctx.Bound.splice(0);
  var patternInput = fold$1(function (tupledArg, cmd) {
    var patternInput = bindCommand(tupledArg[0], cmd);
    return [patternInput[0], new List$2(patternInput[1], tupledArg[1])];
  }, [ctx, new List$2()], program.Body.Node);
  return [bindEntity(ctx, new EntityKind("Program", [patternInput[1]])), new BindingResult(_Array$from(ctx.Bound))];
}
function createContext(globals, name) {
  var root = function () {
    var Kind = new EntityKind("Root", []);
    var Errors = new List$2();

    var _Symbol$$1 = _Symbol2();

    var Type$$1 = null;
    var Meta = new List$2();
    return new Entity(Kind, _Symbol$$1, null, Meta, Type$$1, Errors);
  }();

  var Table = new _Map();
  var Bound = [];
  return new BindingContext(create$4(null, new GenericComparer(function (x, y) {
    return x.CompareTo(y);
  })), create$4(toList(delay(function () {
    return map$5(function (e) {
      return [new Name(Entity_get_Name.bind(e)()), e];
    }, globals);
  })), new GenericComparer(function (x, y) {
    return x.CompareTo(y);
  })), root, Table, Bound);
}

var Tokenizer = function (__exports) {
  var inputEndInsideString = __exports.inputEndInsideString = function (rng, s) {
    var _Number = 101;
    return new _Error(_Number, fsFormat("Missing \" at the end of the input. The string \"%s\" ends without closing double-quote.")(function (x) {
      return x;
    })(s), rng);
  };

  var missingClosingQuote = __exports.missingClosingQuote = function (rng, q) {
    var _Number = 102;
    return new _Error(_Number, fsFormat("Quoted identifier '%s' is missing closing quote.")(function (x) {
      return x;
    })(q), rng);
  };

  var unexpectedCharacter = __exports.unexpectedCharacter = function (rng, c) {
    var _Number = 103;
    return new _Error(_Number, fsFormat("Unexcpected character '%s' in the input.")(function (x) {
      return x;
    })(c), rng);
  };

  return __exports;
}({});
var Parser = function (__exports) {
  var unexpectedTokenAfterDot = __exports.unexpectedTokenAfterDot = function (rng, tok) {
    var _Number = 201;
    return new _Error(_Number, fsFormat("Unexpected %s after '.' in method chain")(function (x) {
      return x;
    })(formatTokenInfo(tok)), rng);
  };

  var unexpectedScopeEndAfterDot = __exports.unexpectedScopeEndAfterDot = function (rng, chainRng, tok) {
    var _Number = 202;
    return new _Error(_Number, fsFormat("Unexpected end of scope after '.' in method chain before %s")(function (x) {
      return x;
    })(formatTokenInfo(tok)), rng);
  };

  var unindentedIdentifierAfterDot = __exports.unindentedIdentifierAfterDot = function (rng, chainRng, id) {
    var _Number = 203;
    return new _Error(_Number, fsFormat("Unexpected end of scope after '.' and before '%s'. Indent the identifier?")(function (x) {
      return x;
    })(id), rng);
  };

  var unindentedDotAfterIdentifier = __exports.unindentedDotAfterIdentifier = function (rng, dotRng) {
    var _Number = 204;
    return new _Error(_Number, "Dot after this identifier is not correctly nested", rng);
  };

  var unindentedBlock = __exports.unindentedBlock = function (rng, tok) {
    var _Number = 205;
    return new _Error(_Number, fsFormat("Token following %s needs to be indented further")(function (x) {
      return x;
    })(formatTokenInfo(tok)), rng);
  };

  var unexpectedTokenAfterOperator = __exports.unexpectedTokenAfterOperator = function (rng, op, tok) {
    var _Number = 206;
    return new _Error(_Number, fsFormat("Unexpected token '%s' after operator '%s'")(function (x) {
      return x;
    })(formatTokenInfo(tok))(formatTokenInfo(op)), rng);
  };

  var unexpectedTokenInArgList = __exports.unexpectedTokenInArgList = function (rng, tok) {
    var _Number = 207;
    return new _Error(_Number, fsFormat("Unexpected token '%s' in list of call arguments")(function (x) {
      return x;
    })(formatTokenInfo(tok)), rng);
  };

  var unexpectedScopeEndInArgList = __exports.unexpectedScopeEndInArgList = function (rng) {
    var _Number = 208;
    return new _Error(_Number, "Unexpected end of scope in argument list", rng);
  };

  var unexpectedTokenInParenthesizedExpr = __exports.unexpectedTokenInParenthesizedExpr = function (rng, tok) {
    var _Number = 209;
    return new _Error(_Number, fsFormat("Unexpected token '%s' in parenthesized expression. Are you missing ')'?")(function (x) {
      return x;
    })(formatTokenInfo(tok)), rng);
  };

  var unindentedTokenInParenthesizedExpr = __exports.unindentedTokenInParenthesizedExpr = function (rng) {
    var _Number = 210;
    return new _Error(_Number, "Unexpected end of nested expression in `(`", rng);
  };

  var missingParenthesizedExpr = __exports.missingParenthesizedExpr = function (rng) {
    var _Number = 211;
    return new _Error(_Number, "The parenthesized expression (...) is missing body!", rng);
  };

  var unexpectedTokenInList = __exports.unexpectedTokenInList = function (rng, tok) {
    var _Number = 212;
    return new _Error(_Number, fsFormat("Unexpected token '%s' in list expression")(function (x) {
      return x;
    })(formatTokenInfo(tok)), rng);
  };

  var unexpectedScopeEndInList = __exports.unexpectedScopeEndInList = function (rng) {
    var _Number = 213;
    return new _Error(_Number, "Unexpected end of scope in list expression", rng);
  };

  var unexpectedTokenInLetBinding = __exports.unexpectedTokenInLetBinding = function (rng, tok) {
    var _Number = 214;
    return new _Error(_Number, fsFormat("Unexpected token '%s' in let declaration (should be let name = expr)")(function (x) {
      return x;
    })(formatTokenInfo(tok)), rng);
  };

  var missingBodyInLetBinding = __exports.missingBodyInLetBinding = function (rng) {
    var _Number = 215;
    return new _Error(_Number, "This let binding is missing body after equals", rng);
  };

  var nestedExpressionInCommand = __exports.nestedExpressionInCommand = function (rng) {
    var _Number = 216;
    return new _Error(_Number, "Unexpected expression", rng);
  };

  var unexpectedTokenAfterFun = __exports.unexpectedTokenAfterFun = function (rng, tok) {
    var _Number = 217;
    return new _Error(_Number, fsFormat("Unexpected token '%s' after `fun`. Expected variable name.")(function (x) {
      return x;
    })(formatTokenInfo(tok)), rng);
  };

  var missingArrowInFunc = __exports.missingArrowInFunc = function (rng) {
    var _Number = 218;
    return new _Error(_Number, "Missing arrow after variable in function definition", rng);
  };

  var unexpectedScopeEndInFunc = __exports.unexpectedScopeEndInFunc = function (rng) {
    var _Number = 219;
    return new _Error(_Number, "Unexpected end of scope in function declaration", rng);
  };

  var missingBodyOfFunc = __exports.missingBodyOfFunc = function (rng) {
    var _Number = 220;
    return new _Error(_Number, "The function is missing body. If it is on the next line, you need to indent it further.", rng);
  };

  var exceptionWhileParsing = __exports.exceptionWhileParsing = function (rng, msg) {
    var _Number = 299;
    return new _Error(_Number, "Unexpected exception while parsing: " + msg, rng);
  };

  return __exports;
}({});
var TypeChecker = function (__exports) {
  var numericOperatorExpectsNumbers = __exports.numericOperatorExpectsNumbers = function (op, idx, typ, rng) {
    var _Number = 301;
    return new _Error(_Number, fsFormat("Both operands of binary operator '%s' should be numbers but the %s operand was %s instead.")(function (x) {
      return x;
    })(formatToken(new TokenKind("Operator", [op])))(idx === 0 ? "left" : "right")(formatTypeInfo(typ)), rng);
  };

  var variableNotInScope = __exports.variableNotInScope = function (name, rng) {
    var _Number = 302;
    return new _Error(_Number, fsFormat("Variable '%s' is not in scope.")(function (x) {
      return x;
    })(name), rng);
  };

  var formatMembers = function formatMembers(members) {
    return join(", ", toList(delay(function () {
      return collect$1(function (matchValue) {
        var _target0 = function _target0(n) {
          return singleton$1(n);
        };

        if (matchValue.Case === "Property") {
          return _target0(matchValue.Fields[0]);
        } else {
          return _target0(matchValue.Fields[0]);
        }
      }, members);
    })));
  };

  var propertyMissing = __exports.propertyMissing = function (name, members, rng) {
    var _Number = 303;
    return new _Error(_Number, fsFormat("Could not find property '%s' in the list '%s'.")(function (x) {
      return x;
    })(name)(formatMembers(members)), rng);
  };

  var methodMissing = __exports.methodMissing = function (name, members, rng) {
    var _Number = 304;
    return new _Error(_Number, fsFormat("Could not find method '%s' in the list '%s'.")(function (x) {
      return x;
    })(name)(formatMembers(members)), rng);
  };

  var notAnObject = __exports.notAnObject = function (name, typ, rng) {
    var _Number = 305;
    return new _Error(_Number, fsFormat("Type is not an object but %s and it does not have member `%s`")(function (x) {
      return x;
    })(formatTypeInfo(typ))(name), rng);
  };

  var listElementTypeDoesNotMatch = __exports.listElementTypeDoesNotMatch = function (listty, elty, rng) {
    var _Number = 306;
    return new _Error(_Number, fsFormat("The type of this list element is %s but it should be %s")(function (x) {
      return x;
    })(formatTypeInfo(elty))(formatTypeInfo(listty)), rng);
  };

  var nameBasedParamMustBeLast = __exports.nameBasedParamMustBeLast = function (rng) {
    var _Number = 307;
    return new _Error(_Number, "All named parameters must be at the end of parameter list.", rng);
  };

  var parameterMissingValue = __exports.parameterMissingValue = function (par, rng) {
    var _Number = 308;
    return new _Error(_Number, fsFormat("Required parameter `%s` is not given a value.")(function (x) {
      return x;
    })(par), rng);
  };

  var incorrectParameterType = __exports.incorrectParameterType = function (parName, parType, actualType, err1, err2, rng) {
    var _Number = 309;
    return new _Error(_Number, fsFormat("The value of parameter `%s` has wrong type. Expected %s but got %s. The type %s does not match the type %s.")(function (x) {
      return x;
    })(parName)(formatTypeInfo(parType))(formatTypeInfo(actualType))(formatTypeInfo(err1))(formatTypeInfo(err2)), rng);
  };

  var inferenceConflict = __exports.inferenceConflict = function (_var, t1, t2, rng) {
    var _Number = 310;
    return new _Error(_Number, fsFormat("The arguments of the call have conflicting types. The type %s assigned to a variable %s does not match the type %s.")(function (x) {
      return x;
    })(formatTypeInfo(t1))(_var)(formatTypeInfo(t2)), rng);
  };

  var callMissingInstance = __exports.callMissingInstance = function (name, rng) {
    var _Number = 311;
    return new _Error(_Number, fsFormat("The `%s` property access or call is missing an instance")(function (x) {
      return x;
    })(name), rng);
  };

  return __exports;
}({});

var $parseFloat$1 = _global.parseFloat;
var $trim$1       = _stringTrim.trim;

var _parseFloat$3 = 1 / $parseFloat$1(_stringWs + '-0') !== -Infinity ? function parseFloat(str){
  var string = $trim$1(String(str), 3)
    , result = $parseFloat$1(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat$1;

var $export$10     = _export;
var $parseFloat = _parseFloat$3;
// 20.1.2.12 Number.parseFloat(string)
$export$10($export$10.S + $export$10.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});

var _parseFloat$1 = parseFloat;

var _parseFloat = createCommonjsModule(function (module) {
module.exports = { "default": _parseFloat$1, __esModule: true };
});

var _Number$parseFloat = unwrapExports(_parseFloat);

var Context$1 = function () {
  function Context(tokens, errors, input) {
    _classCallCheck(this, Context);

    this.Tokens = tokens;
    this.Errors = errors;
    this.Input = input;
  }

  _createClass(Context, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Tokenizer.Context",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          Tokens: FArray(Token),
          Errors: FArray(makeGeneric(_Error, {
            Range: _Range
          })),
          Input: "string"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }]);

  return Context;
}();
setType("TheGamma.Tokenizer.Context", Context$1);
function startsWith(s, i, j, prefix) {
  return j === prefix.length ? true : i === s.length ? false : s[i] !== prefix[j] ? false : startsWith(s, i + 1, j + 1, prefix);
}
function letter(c) {
  return (c >= "a" ? c <= "z" : false) ? true : c >= "A" ? c <= "Z" : false;
}
function number(c) {
  return c >= "0" ? c <= "9" : false;
}
function addAndTokenize(ctx, tok, i, l) {
  (function (arg00) {
    ctx.Tokens.push(arg00);
  })(new Token(tok, new _Range(i, i + l - 1)));

  return tokenizeInput(ctx, i + l);
}
function tokenizeIdent(ctx, start, l) {
  return (start + l < ctx.Input.length ? letter(ctx.Input[start + l]) ? true : number(ctx.Input[start + l]) : false) ? tokenizeIdent(ctx, start, l + 1) : addAndTokenize(ctx, new TokenKind("Ident", [ctx.Input.substr(start, l)]), start, l);
}
function tokenizeString(ctx, acc, start, l) {
  return start + l >= ctx.Input.length ? tokenizeStringEnd(true, ctx, acc, start, l) : function () {
    var matchValue = ctx.Input[start + l];

    var _target1 = function _target1() {
      return matchValue === "\"" ? tokenizeStringEnd(false, ctx, acc, start, l + 1) : matchValue === "\\" ? function () {
        var matchValue_1 = ctx.Input[start + l + 1];

        if (matchValue_1 === "\"") {
          return tokenizeString(ctx, new List$2("\"", acc), start, l + 2);
        } else {
          if (matchValue_1 === "\\") {
            return tokenizeString(ctx, new List$2("\\", acc), start, l + 2);
          } else {
            if (matchValue_1 === "n") {
              return tokenizeString(ctx, new List$2("\n", acc), start, l + 2);
            } else {
              if (matchValue_1 === "t") {
                return tokenizeString(ctx, new List$2("\t", acc), start, l + 2);
              } else {
                return tokenizeString(ctx, ofArray([matchValue_1, "\\"], acc), start, l + 2);
              }
            }
          }
        }
      }() : tokenizeString(ctx, new List$2(matchValue, acc), start, l + 1);
    };

    if (matchValue === "\\") {
      if (start + l + 1 >= ctx.Input.length) {
        return tokenizeStringEnd(true, ctx, new List$2("\\", acc), start, l + 1);
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  }();
}
function tokenizeStringEnd(error, ctx, acc, start, l) {
  var str = _Array$from(acc).slice().reverse().join('');

  var rng = new _Range(start, start + l);

  if (error) {
    ctx.Errors.push(Tokenizer.inputEndInsideString(rng, str));
  }

  return addAndTokenize(ctx, new TokenKind("String", [str]), start, l);
}
function tokenizeQuotedIdent(ctx, start, l) {
  return start + l >= ctx.Input.length ? tokenizeQuotedIdentEnd(true, ctx, start, l) : function () {
    var matchValue = ctx.Input[start + l];

    if (matchValue === "\n") {
      return tokenizeQuotedIdentEnd(true, ctx, start, l + 1);
    } else {
      if (matchValue === "'") {
        return tokenizeQuotedIdentEnd(false, ctx, start, l + 1);
      } else {
        return tokenizeQuotedIdent(ctx, start, l + 1);
      }
    }
  }();
}
function tokenizeQuotedIdentEnd(error, ctx, start, l) {
  var rng = new _Range(start, start + l);
  var qid = ctx.Input.substr(start + 1, l - (error ? 1 : 2));
  var qid_1 = endsWith(qid, "\n") ? qid.substr(0, qid.length - 1) : qid;

  if (error) {
    ctx.Errors.push(Tokenizer.missingClosingQuote(rng, qid_1));
  }

  return addAndTokenize(ctx, new TokenKind("QIdent", [qid_1]), start, l);
}
function tokenizeWhite(ctx, start, l) {
  return (start + l < ctx.Input.length ? ctx.Input[start + l] === " " : false) ? tokenizeWhite(ctx, start, l + 1) : addAndTokenize(ctx, new TokenKind("White", [ctx.Input.substr(start, l)]), start, l);
}
function tokenizeNumber(ctx, decimal, start, l) {
  return (start + l < ctx.Input.length ? number(ctx.Input[start + l]) : false) ? tokenizeNumber(ctx, decimal, start, l + 1) : ((start + l < ctx.Input.length ? !decimal : false) ? ctx.Input[start + l] === "." : false) ? tokenizeNumber(ctx, true, start, l + 1) : function () {
    var str = ctx.Input.substr(start, l);
    return addAndTokenize(ctx, new TokenKind("Number", [str, _Number$parseFloat(str)]), start, l);
  }();
}
function tokenizeInput(ctx, i) {
  return i >= ctx.Input.length ? ctx : function () {
    var matchValue = ctx.Input[i];

    var _target1 = function _target1() {
      var _target1 = function _target1() {
        var _target1 = function _target1() {
          var _target1 = function _target1() {
            var _target1 = function _target1() {
              var _target1 = function _target1() {
                var _target1 = function _target1() {
                  return matchValue === "\n" ? addAndTokenize(ctx, new TokenKind("Newline", []), i, 1) : matchValue === " " ? tokenizeWhite(ctx, i, 1) : matchValue === "\"" ? tokenizeString(ctx, new List$2(), i, 1) : matchValue === "'" ? tokenizeQuotedIdent(ctx, i, 1) : matchValue === "(" ? addAndTokenize(ctx, new TokenKind("LParen", []), i, 1) : matchValue === ")" ? addAndTokenize(ctx, new TokenKind("RParen", []), i, 1) : matchValue === "*" ? addAndTokenize(ctx, new TokenKind("Operator", [new Operator("Multiply", [])]), i, 1) : matchValue === "+" ? addAndTokenize(ctx, new TokenKind("Operator", [new Operator("Plus", [])]), i, 1) : matchValue === "," ? addAndTokenize(ctx, new TokenKind("Comma", []), i, 1) : matchValue === "-" ? addAndTokenize(ctx, new TokenKind("Operator", [new Operator("Minus", [])]), i, 1) : matchValue === "." ? addAndTokenize(ctx, new TokenKind("Dot", []), i, 1) : matchValue === "/" ? addAndTokenize(ctx, new TokenKind("Operator", [new Operator("Divide", [])]), i, 1) : matchValue === "<" ? addAndTokenize(ctx, new TokenKind("Operator", [new Operator("LessThan", [])]), i, 1) : matchValue === "=" ? addAndTokenize(ctx, new TokenKind("Equals", []), i, 1) : matchValue === ">" ? addAndTokenize(ctx, new TokenKind("Operator", [new Operator("GreaterThan", [])]), i, 1) : matchValue === "[" ? addAndTokenize(ctx, new TokenKind("LSquare", []), i, 1) : matchValue === "]" ? addAndTokenize(ctx, new TokenKind("RSquare", []), i, 1) : matchValue === "^" ? addAndTokenize(ctx, new TokenKind("Operator", [new Operator("Power", [])]), i, 1) : letter(matchValue) ? tokenizeIdent(ctx, i, 1) : number(matchValue) ? tokenizeNumber(ctx, false, i, 1) : function () {
                    ctx.Errors.push(Tokenizer.unexpectedCharacter(new _Range(i, i), matchValue));
                    return addAndTokenize(ctx, new TokenKind("Error", [matchValue]), i, 1);
                  }();
                };

                if (matchValue === ">") {
                  if (startsWith(ctx.Input, i, 0, ">=")) {
                    return addAndTokenize(ctx, new TokenKind("Operator", [new Operator("GreaterThanOrEqual", [])]), i, 2);
                  } else {
                    return _target1();
                  }
                } else {
                  return _target1();
                }
              };

              if (matchValue === "<") {
                if (startsWith(ctx.Input, i, 0, "<=")) {
                  return addAndTokenize(ctx, new TokenKind("Operator", [new Operator("LessThanOrEqual", [])]), i, 2);
                } else {
                  return _target1();
                }
              } else {
                return _target1();
              }
            };

            if (matchValue === "f") {
              if (startsWith(ctx.Input, i, 0, "false")) {
                return addAndTokenize(ctx, new TokenKind("Boolean", [false]), i, 5);
              } else {
                return _target1();
              }
            } else {
              return _target1();
            }
          };

          if (matchValue === "t") {
            if (startsWith(ctx.Input, i, 0, "true")) {
              return addAndTokenize(ctx, new TokenKind("Boolean", [true]), i, 4);
            } else {
              return _target1();
            }
          } else {
            return _target1();
          }
        };

        if (matchValue === "l") {
          if (startsWith(ctx.Input, i, 0, "let")) {
            return addAndTokenize(ctx, new TokenKind("Let", []), i, 3);
          } else {
            return _target1();
          }
        } else {
          return _target1();
        }
      };

      if (matchValue === "f") {
        if (startsWith(ctx.Input, i, 0, "fun")) {
          return addAndTokenize(ctx, new TokenKind("Fun", []), i, 3);
        } else {
          return _target1();
        }
      } else {
        return _target1();
      }
    };

    if (matchValue === "-") {
      if (startsWith(ctx.Input, i, 0, "->")) {
        return addAndTokenize(ctx, new TokenKind("Arrow", []), i, 2);
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  }();
}
function tokenize(input) {
  var ctx = function () {
    var Errors = [];
    return new Context$1([], Errors, input);
  }();

  var ctx_1 = tokenizeInput(ctx, 0);
  ctx_1.Tokens.push(new Token(new TokenKind("EndOfFile", []), new _Range(input.length, input.length)));
  return [_Array$from(ctx_1.Tokens), _Array$from(ctx_1.Errors)];
}

var Context$$1 = function () {
  function Context$$1(tokens, whitespace, errors, topLevel, silent, strictlyNested, indentCurrent, indentStack, position) {
    _classCallCheck(this, Context$$1);

    this.Tokens = tokens;
    this.Whitespace = whitespace;
    this.Errors = errors;
    this.TopLevel = topLevel;
    this.Silent = silent;
    this.StrictlyNested = strictlyNested;
    this.IndentCurrent = indentCurrent;
    this.IndentStack = indentStack;
    this.Position = position;
  }

  _createClass(Context$$1, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Parser.Context",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          Tokens: FArray(Token),
          Whitespace: FArray(Token),
          Errors: FArray(makeGeneric(_Error, {
            Range: _Range
          })),
          TopLevel: "boolean",
          Silent: "boolean",
          StrictlyNested: "boolean",
          IndentCurrent: "number",
          IndentStack: makeGeneric(List$2, {
            T: Tuple(["number", "boolean"])
          }),
          Position: "number"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }]);

  return Context$$1;
}();
setType("TheGamma.Parser.Context", Context$$1);
function clone(ctx) {
  return new Context$$1(ctx.Tokens, _Array$from(ctx.Whitespace), _Array$from(ctx.Errors), ctx.TopLevel, ctx.Silent, ctx.StrictlyNested, ctx.IndentCurrent, ctx.IndentStack, ctx.Position);
}
function next$1(ctx) {
  ctx.Position = ctx.Position + 1;
}
var DisposableHelper = function () {
  _createClass(DisposableHelper, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Parser.DisposableHelper",
        interfaces: ["System.IDisposable"],
        properties: {}
      };
    }
  }]);

  function DisposableHelper(f) {
    _classCallCheck(this, DisposableHelper);

    this.f = f;
  }

  _createClass(DisposableHelper, [{
    key: "Dispose",
    value: function () {
      this.f();
    }
  }]);

  return DisposableHelper;
}();
setType("TheGamma.Parser.DisposableHelper", DisposableHelper);
function disposable(f) {
  return new DisposableHelper(f);
}
function usingSilentMode(ctx) {
  var prev = ctx.Silent;
  ctx.Silent = true;
  return disposable(function () {
    ctx.Silent = prev;
  });
}
function addError(ctx, e) {
  if (!ctx.Silent) {
    ctx.Errors.push(e);
  }
}
function usingIndent(current, tok, ctx) {
  var started = function () {
    var matchValue = ctx.IndentStack;

    var _target1 = function _target1() {
      var _target1 = function _target1() {
        ctx.IndentStack = new List$2([ctx.IndentCurrent, current], ctx.IndentStack);
        return true;
      };

      if (matchValue.tail != null) {
        if (matchValue.head[1]) {
          return _target1();
        } else {
          if (function () {
            var prev = matchValue.head[0];
            return prev !== ctx.IndentCurrent;
          }()) {
            var prev = matchValue.head[0];
            throw new Error("usingIndent: We forgot to set the top-stack line indentation");
          } else {
            return _target1();
          }
        }
      } else {
        return _target1();
      }
    };

    if (matchValue.tail != null) {
      if (matchValue.head[1]) {
        if (function () {
          var prev = matchValue.head[0];
          return prev > ctx.IndentCurrent;
        }()) {
          var prev = matchValue.head[0];

          (function (e) {
            addError(ctx, e);
          })(Parser.unindentedBlock(tok.Range, tok.Token));

          return false;
        } else {
          return _target1();
        }
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  }();

  return disposable(function () {
    var matchValue = [started, ctx.IndentStack];

    if (matchValue[0]) {
      if (matchValue[1].tail != null) {
        var t = matchValue[1].head;
        var stack = matchValue[1].tail;
        ctx.IndentStack = stack;
      } else {
        throw new Error("usingIndent: We lost item from an indentation stack");
      }
    }
  });
}
function usingTopLevelNesting(ctx) {
  var prev = ctx.StrictlyNested;
  ctx.StrictlyNested = true;
  {
    var matchValue = ctx.IndentStack;

    if (matchValue.tail != null) {
      ctx.IndentStack = new List$2([0, true], matchValue.tail);
    }
  }
  return disposable(function () {
    ctx.StrictlyNested = prev;
  });
}
function usingNonTopLevel(ctx) {
  var prev = ctx.TopLevel;
  ctx.TopLevel = false;
  return disposable(function () {
    ctx.TopLevel = prev;
  });
}
function setLineIndent(ctx, l) {
  ctx.IndentCurrent = l;
  var matchValue = ctx.IndentStack;

  var _target1 = function _target1() {
    var _target1 = function _target1() {};

    if (matchValue.tail != null) {
      if (matchValue.head[1]) {
        _target1();
      } else {
        var oldl = matchValue.head[0];
        var stack = matchValue.tail;
        ctx.IndentStack = new List$2([l, true], stack);
      }
    } else {
      _target1();
    }
  };

  if (matchValue.tail != null) {
    if (matchValue.head[1]) {
      _target1();
    } else {
      if (function () {
        var oldl = matchValue.head[0];
        return l <= oldl;
      }()) {
        var oldl = matchValue.head[0];
        var stack = matchValue.tail;
        ctx.IndentStack = new List$2([2147483647, true], stack);
      } else {
        _target1();
      }
    }
  } else {
    _target1();
  }
}
function justToken(ctx) {
  var current = function current(ctx_1) {
    return ctx_1.Tokens[ctx_1.Position];
  };

  var matchValue = current(ctx);

  var _target1 = function _target1(t) {
    ctx.Whitespace.push(t);
    next$1(ctx);
    return justToken(ctx);
  };

  if (matchValue.Token.Case === "Newline") {
    ctx.Whitespace.push(matchValue);
    next$1(ctx);
    {
      var matchValue_1 = current(ctx);

      if (matchValue_1.Token.Case === "White") {
        var s = matchValue_1.Token.Fields[0];
        ctx.Whitespace.push(matchValue_1);
        setLineIndent(ctx, s.length);
        next$1(ctx);
      } else {
        setLineIndent(ctx, 0);
      }
    }
    return justToken(ctx);
  } else {
    if (matchValue.Token.Case === "Error") {
      return _target1(matchValue);
    } else {
      if (matchValue.Token.Case === "White") {
        return _target1(matchValue);
      } else {
        return matchValue;
      }
    }
  }
}
function token(ctx) {
  var t = justToken(ctx);
  var white = toList(ctx.Whitespace);
  ctx.Whitespace.splice(0);
  return [white, t];
}
function nestedToken(ctx) {
  var white = function white() {
    var white = toList(ctx.Whitespace);
    ctx.Whitespace.splice(0);
    return white;
  };

  var t = justToken(ctx);
  var matchValue = ctx.IndentStack;

  var _target1 = function _target1() {
    return matchValue.tail == null ? [white(), t] : null;
  };

  if (matchValue.tail != null) {
    if (function () {
      var indent = matchValue.head[0];

      if (ctx.IndentCurrent > indent) {
        return true;
      } else {
        if (!ctx.StrictlyNested) {
          return ctx.IndentCurrent === indent;
        } else {
          return false;
        }
      }
    }()) {
      var indent = matchValue.head[0];
      return [white(), t];
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
function node$1(rng, n) {
  return new _Node(new List$2(), new List$2(), rng, n);
}
function whiteAfter(w, n) {
  var WhiteAfter = append$$1(n.WhiteAfter, w);
  return new _Node(n.WhiteBefore, WhiteAfter, n.Range, n.Node, n.Entity);
}
function whiteBefore(w, n) {
  return new _Node(append$$1(w, n.WhiteBefore), n.WhiteAfter, n.Range, n.Node, n.Entity);
}
function lastCallOrPropertyRange(expr, id) {
  var _target0 = function _target0(id_1) {
    return id_1.Range;
  };

  if (expr.Node.Case === "Call") {
    return _target0(expr.Node.Fields[1]);
  } else {
    if (expr.Node.Case === "Property") {
      return _target0(expr.Node.Fields[1]);
    } else {
      return expr.Range;
    }
  }
}

function _Identifier___(t_0, t_1) {
  var t = [t_0, t_1];

  var _target0 = function _target0(id, rng, white) {
    return function (n) {
      return whiteBefore(white, n);
    }(node$1(rng, new Name(id)));
  };

  if (t[1].Token.Case === "Ident") {
    return _target0(t[1].Token.Fields[0], t[1].Range, t[0]);
  } else {
    if (t[1].Token.Case === "QIdent") {
      return _target0(t[1].Token.Fields[0], t[1].Range, t[0]);
    }
  }
}

var Associativity = function () {
  function Associativity(caseName, fields) {
    _classCallCheck(this, Associativity);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Associativity, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Parser.Associativity",
        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
        cases: {
          Left: [],
          Right: []
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareUnions(this, other);
    }
  }]);

  return Associativity;
}();
setType("TheGamma.Parser.Associativity", Associativity);
function precedence(_arg1) {
  var _target1 = function _target1() {
    return [1, new Associativity("Left", [])];
  };

  var _target2 = function _target2() {
    return [2, new Associativity("Left", [])];
  };

  var _target3 = function _target3() {
    return [3, new Associativity("Left", [])];
  };

  if (_arg1.Case === "GreaterThan") {
    return _target1();
  } else {
    if (_arg1.Case === "GreaterThanOrEqual") {
      return _target1();
    } else {
      if (_arg1.Case === "LessThan") {
        return _target1();
      } else {
        if (_arg1.Case === "LessThanOrEqual") {
          return _target1();
        } else {
          if (_arg1.Case === "Plus") {
            return _target2();
          } else {
            if (_arg1.Case === "Minus") {
              return _target2();
            } else {
              if (_arg1.Case === "Multiply") {
                return _target3();
              } else {
                if (_arg1.Case === "Divide") {
                  return _target3();
                } else {
                  if (_arg1.Case === "Power") {
                    return [4, new Associativity("Right", [])];
                  } else {
                    return [0, new Associativity("Left", [])];
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
var OpExpr = function () {
  function OpExpr(caseName, fields) {
    _classCallCheck(this, OpExpr);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(OpExpr, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Parser.OpExpr",
        interfaces: ["FSharpUnion"],
        cases: {
          OpExpr: [makeGeneric(_Node, {
            T: Expr
          }), Option(Tuple([makeGeneric(_Node, {
            T: Operator
          }), OpExpr]))]
        }
      };
    }
  }]);

  return OpExpr;
}();
setType("TheGamma.Parser.OpExpr", OpExpr);
function precClimb(minPrec, _arg1) {
  var loop = function loop(result) {
    return function (next_1) {
      var _target1 = function _target1() {
        return [result, next_1];
      };

      if (next_1 != null) {
        if (function () {
          var op = next_1[0];
          var next_2 = next_1[1];
          return precedence(op.Node)[0] >= minPrec;
        }()) {
          var next_2 = next_1[1];
          var op = next_1[0];
          {
            var patternInput = precedence(op.Node);
            var nextMinPrec = patternInput[1].Equals(new Associativity("Left", [])) ? patternInput[0] + 1 : patternInput[0];
            var patternInput_1 = precClimb(nextMinPrec, next_2);
            var result_1 = node$1(unionRanges(result.Range, patternInput_1[0].Range), new Expr("Binary", [result, op, patternInput_1[0]]));
            return loop(result_1)(patternInput_1[1]);
          }
        } else {
          return _target1();
        }
      } else {
        return _target1();
      }
    };
  };

  return loop(_arg1.Fields[0])(_arg1.Fields[1]);
}
function buildExpression(terms, term) {
  return precClimb(0, fold$1(function (oe, tupledArg) {
    return new OpExpr("OpExpr", [tupledArg[0], [tupledArg[1], oe]]);
  }, new OpExpr("OpExpr", [term, null]), terms))[0];
}
function makeCallOrProp(optInst, prevId, prevArgs) {
  var matchValue = [optInst, prevArgs];

  var _target2 = function _target2(prevArgs_1) {
    var fullRng = optInst != null ? unionRanges(optInst.Range, prevArgs_1.Range) : unionRanges(prevId.Range, prevArgs_1.Range);
    return node$1(fullRng, new Expr("Call", [optInst, prevId, prevArgs_1]));
  };

  if (matchValue[0] == null) {
    if (matchValue[1] != null) {
      return _target2(matchValue[1]);
    } else {
      return node$1(prevId.Range, new Expr("Variable", [prevId]));
    }
  } else {
    if (matchValue[1] != null) {
      return _target2(matchValue[1]);
    } else {
      var inst = matchValue[0];
      return node$1(unionRanges(inst.Range, prevId.Range), new Expr("Property", [inst, prevId]));
    }
  }
}
function parseChain(dotRng, optInst, prevId, prevArgs, prevWhite, ctx) {
  var inst = function (n) {
    return whiteAfter(prevWhite, n);
  }(makeCallOrProp(optInst, prevId, prevArgs));

  var emptyRng = new _Range(dotRng.End + 1, dotRng.End + 1);
  var emptyMember = node$1(emptyRng, new Expr("Property", [inst, node$1(emptyRng, new Name(""))]));
  var matchValue = nestedToken(ctx);

  var _target1 = function _target1() {
    return matchValue == null ? function () {
      var matchValue_1 = token(ctx);

      var activePatternResult4972 = _Identifier___(matchValue_1[0], matchValue_1[1]);

      if (activePatternResult4972 != null) {
        var _ret = function () {
          var id = activePatternResult4972;

          var rng = function rng(id_1) {
            return lastCallOrPropertyRange(inst, id_1);
          };

          (function (e) {
            addError(ctx, e);
          })(Parser.unindentedIdentifierAfterDot(id.Range, rng, id.Node.Name));

          var matchValue_2 = [ctx.TopLevel, ctx.IndentStack];

          var _target1 = function _target1() {
            return emptyMember;
          };

          if (matchValue_2[0]) {
            return {
              v: _target1()
            };
          } else {
            if (matchValue_2[1].tail != null) {
              if (function () {
                var stack = matchValue_2[1].tail;
                var sl = matchValue_2[1].head[0];
                var si = matchValue_2[1].head[1];
                return ctx.IndentCurrent > 0;
              }()) {
                var si = matchValue_2[1].head[1];
                var sl = matchValue_2[1].head[0];
                var stack = matchValue_2[1].tail;
                {
                  next$1(ctx);
                  ctx.IndentStack = new List$2([ctx.IndentCurrent, si], stack);
                  return {
                    v: parseMember(inst, id, ctx)
                  };
                }
              } else {
                return {
                  v: _target1()
                };
              }
            } else {
              return {
                v: _target1()
              };
            }
          }
        }();

        if ((typeof _ret === "undefined" ? "undefined" : _typeof$2(_ret)) === "object") return _ret.v;
      } else {
        var _rng = function _rng(id) {
          return lastCallOrPropertyRange(inst, id);
        };

        (function (e) {
          addError(ctx, e);
        })(Parser.unexpectedScopeEndAfterDot(matchValue_1[1].Range, _rng, matchValue_1[1].Token));

        return emptyMember;
      }
    }() : function () {
      var t = matchValue[1];

      (function (e) {
        addError(ctx, e);
      })(Parser.unexpectedTokenAfterDot(t.Range, t.Token));

      if (t.Token.Equals(new TokenKind("EndOfFile", []))) {
        return emptyMember;
      } else {
        next$1(ctx);

        var _silent = usingSilentMode(ctx);

        try {
          return parseMember(inst, node$1(emptyRng, new Name("")), ctx);
        } finally {
          if (hasInterface(_silent, "System.IDisposable")) {
            _silent.Dispose();
          }
        }
      }
    }();
  };

  if (matchValue != null) {
    var activePatternResult4973 = _Identifier___(matchValue[0], matchValue[1]);

    if (activePatternResult4973 != null) {
      var id = activePatternResult4973;
      next$1(ctx);
      return parseMember(inst, id, ctx);
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
function parseDotOrLParen(optInst, id, ctx, tok) {
  return tok.Token.Case === "LParen" ? function () {
    next$1(ctx);

    var _top = usingNonTopLevel(ctx);

    try {
      var _ret2 = function () {
        var patternInput = parseCallArgList(false, tok.Range, new List$2(), ctx);

        var args = function (n) {
          return whiteAfter(patternInput[1], n);
        }(node$1(unionRanges(tok.Range, patternInput[0]), patternInput[2]));

        var matchValue = nestedToken(ctx);

        var _target1 = function _target1() {
          return makeCallOrProp(optInst, id, args);
        };

        if (matchValue != null) {
          if (matchValue[1].Token.Case === "Dot") {
            var dotRng = matchValue[1].Range;
            var whiteAfterArgs = matchValue[0];
            {
              next$1(ctx);
              return {
                v: parseChain(dotRng, optInst, id, args, whiteAfterArgs, ctx)
              };
            }
          } else {
            return {
              v: _target1()
            };
          }
        } else {
          return {
            v: _target1()
          };
        }
      }();

      if ((typeof _ret2 === "undefined" ? "undefined" : _typeof$2(_ret2)) === "object") return _ret2.v;
    } finally {
      if (hasInterface(_top, "System.IDisposable")) {
        _top.Dispose();
      }
    }
  }() : tok.Token.Case === "Dot" ? function () {
    next$1(ctx);
    return parseChain(tok.Range, optInst, id, null, new List$2(), ctx);
  }() : null;
}
function parseMember(optInst, id, ctx) {
  var parsed = function () {
    var matchValue = nestedToken(ctx);

    if (matchValue != null) {
      var white = matchValue[0];
      var res = matchValue[1];
      return parseDotOrLParen(optInst, whiteAfter(white, id), ctx, res);
    } else {
      var _ret3 = function () {
        var patternInput = token(ctx);

        var matchValue_1 = function () {
          var _silent = usingSilentMode(ctx);

          try {
            return parseDotOrLParen(optInst, whiteAfter(patternInput[0], id), ctx, patternInput[1]);
          } finally {
            if (hasInterface(_silent, "System.IDisposable")) {
              _silent.Dispose();
            }
          }
        }();

        if (matchValue_1 != null) {
          (function (e) {
            addError(ctx, e);
          })(Parser.unindentedDotAfterIdentifier(id.Range, patternInput[1].Range));

          return {
            v: matchValue_1
          };
        }
      }();

      if ((typeof _ret3 === "undefined" ? "undefined" : _typeof$2(_ret3)) === "object") return _ret3.v;
    }
  }();

  if (parsed == null) {
    if (optInst == null) {
      return node$1(id.Range, new Expr("Variable", [id]));
    } else {
      return node$1(unionRanges(optInst.Range, id.Range), new Expr("Property", [optInst, id]));
    }
  } else {
    return parsed;
  }
}
function parseFunction(ctx, funRng) {
  var matchValue = nestedToken(ctx);

  var _target1 = function _target1() {
    return matchValue == null ? function () {
      (function (e) {
        addError(ctx, e);
      })(Parser.unexpectedScopeEndInFunc(funRng));

      var rng = new _Range(funRng.End, funRng.End);
      return node$1(rng, new Expr("Function", [node$1(rng, new Name("")), node$1(rng, new Expr("Empty", []))]));
    }() : function () {
      var white = matchValue[0];
      var t = matchValue[1];

      (function (e) {
        addError(ctx, e);
      })(Parser.unexpectedTokenAfterFun(t.Range, t.Token));

      var rng = new _Range(funRng.End, funRng.End);
      return function (n) {
        return whiteBefore(white, n);
      }(node$1(rng, new Expr("Function", [node$1(rng, new Name("")), node$1(rng, new Expr("Empty", []))])));
    }();
  };

  if (matchValue != null) {
    var activePatternResult4995 = _Identifier___(matchValue[0], matchValue[1]);

    if (activePatternResult4995 != null) {
      var _ret4 = function () {
        var id = activePatternResult4995;
        next$1(ctx);
        var matchValue_1 = nestedToken(ctx);

        var _target1_1 = function _target1_1(nt) {
          var patternInput = nt != null ? function () {
            var whiteAfterId = nt[0];
            var t = nt[1];
            return [t.Range, whiteAfterId];
          }() : [unionRanges(funRng, id.Range), new List$2()];

          (function (e) {
            addError(ctx, e);
          })(Parser.missingArrowInFunc(patternInput[0]));

          var body = function () {
            var matchValue_2 = parseExpression(new List$2(), ctx);

            if (matchValue_2 != null) {
              return matchValue_2;
            } else {
              return node$1(new _Range(id.Range.End, id.Range.End), new Expr("Empty", []));
            }
          }();

          return node$1(unionRanges(funRng, body.Range), new Expr("Function", [id, whiteBefore(patternInput[1], body)]));
        };

        if (matchValue_1 != null) {
          if (matchValue_1[1].Token.Case === "Arrow") {
            var _ret5 = function () {
              var rngEq = matchValue_1[1].Range;
              var whiteAfterId = matchValue_1[0];
              {
                next$1(ctx);

                var body = function () {
                  var matchValue_2 = parseExpression(new List$2(), ctx);

                  if (matchValue_2 != null) {
                    return matchValue_2;
                  } else {
                    (function (e) {
                      addError(ctx, e);
                    })(Parser.missingBodyOfFunc(unionRanges(funRng, rngEq)));

                    return node$1(new _Range(rngEq.End, rngEq.End), new Expr("Empty", []));
                  }
                }();

                var rng = unionRanges(funRng, body.Range);
                return {
                  v: {
                    v: node$1(rng, new Expr("Function", [whiteAfter(whiteAfterId, id), body]))
                  }
                };
              }
            }();

            if ((typeof _ret5 === "undefined" ? "undefined" : _typeof$2(_ret5)) === "object") return _ret5.v;
          } else {
            return {
              v: _target1_1(matchValue_1)
            };
          }
        } else {
          return {
            v: _target1_1(matchValue_1)
          };
        }
      }();

      if ((typeof _ret4 === "undefined" ? "undefined" : _typeof$2(_ret4)) === "object") return _ret4.v;
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
function parseTerm(ctx) {
  var matchValue = nestedToken(ctx);

  var _target1 = function _target1() {
    var _target6 = function _target6() {
      return null;
    };

    if (matchValue != null) {
      if (matchValue[1].Token.Case === "Number") {
        var _ret6 = function () {
          var n = matchValue[1].Token.Fields[1];
          var r = matchValue[1].Range;
          var white = matchValue[0];
          {
            next$1(ctx);
            return {
              v: function (n_1) {
                return whiteAfter(white, n_1);
              }(node$1(r, new Expr("Number", [n])))
            };
          }
        }();

        if ((typeof _ret6 === "undefined" ? "undefined" : _typeof$2(_ret6)) === "object") return _ret6.v;
      } else {
        if (matchValue[1].Token.Case === "String") {
          var _ret7 = function () {
            var r = matchValue[1].Range;
            var s = matchValue[1].Token.Fields[0];
            var white = matchValue[0];
            {
              next$1(ctx);
              return {
                v: function (n) {
                  return whiteAfter(white, n);
                }(node$1(r, new Expr("String", [s])))
              };
            }
          }();

          if ((typeof _ret7 === "undefined" ? "undefined" : _typeof$2(_ret7)) === "object") return _ret7.v;
        } else {
          if (matchValue[1].Token.Case === "Boolean") {
            var _ret8 = function () {
              var b = matchValue[1].Token.Fields[0];
              var r = matchValue[1].Range;
              var white = matchValue[0];
              {
                next$1(ctx);
                return {
                  v: function (n) {
                    return whiteAfter(white, n);
                  }(node$1(r, new Expr("Boolean", [b])))
                };
              }
            }();

            if ((typeof _ret8 === "undefined" ? "undefined" : _typeof$2(_ret8)) === "object") return _ret8.v;
          } else {
            if (matchValue[1].Token.Case === "LParen") {
              var t = matchValue[1];
              var _white = matchValue[0];
              {
                next$1(ctx);
                return parseParenTermEnd(new List$2(t, reverse$$1(_white)), new List$2(), parseExpression(new List$2(), ctx), ctx);
              }
            } else {
              if (matchValue[1].Token.Case === "LSquare") {
                var _t = matchValue[1];
                var _white2 = matchValue[0];
                {
                  next$1(ctx);

                  var _nest = usingNonTopLevel(ctx);

                  try {
                    return parseListElements(false, _t.Range, _white2, _t.Range, new List$2(), ctx);
                  } finally {
                    if (hasInterface(_nest, "System.IDisposable")) {
                      _nest.Dispose();
                    }
                  }
                }
              } else {
                if (matchValue[1].Token.Case === "Fun") {
                  var _t2 = matchValue[1];
                  var _white3 = matchValue[0];
                  {
                    next$1(ctx);
                    return parseFunction(ctx, _t2.Range);
                  }
                } else {
                  return _target6();
                }
              }
            }
          }
        }
      }
    } else {
      return _target6();
    }
  };

  if (matchValue != null) {
    var activePatternResult5005 = _Identifier___(matchValue[0], matchValue[1]);

    if (activePatternResult5005 != null) {
      var id = activePatternResult5005;
      var tok = matchValue[1];
      {
        next$1(ctx);

        var _indent = usingIndent(false, tok, ctx);

        try {
          var varOrCall = parseMember(null, id, ctx);
          return varOrCall;
        } finally {
          if (hasInterface(_indent, "System.IDisposable")) {
            _indent.Dispose();
          }
        }
      }
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
function parseListElements(expectMore, lastRng, whiteStart, startRng, acc, ctx) {
  var patternInput = function () {
    var matchValue = parseExpression(new List$2(), ctx);

    if (matchValue != null) {
      return [true, function (white) {
        return new List$2(whiteAfter(white, matchValue), acc);
      }];
    } else {
      return [false, function (_arg1) {
        return acc;
      }];
    }
  }();

  var matchValue = nestedToken(ctx);

  var _target3 = function _target3() {
    (function (e) {
      addError(ctx, e);
    })(Parser.unexpectedScopeEndInList(lastRng));

    return node$1(unionRanges(startRng, lastRng), new Expr("List", [reverse$$1(patternInput[1](new List$2()))]));
  };

  if (matchValue != null) {
    if (matchValue[1].Token.Case === "RSquare") {
      var _ret9 = function () {
        var endRng = matchValue[1].Range;
        var white = matchValue[0];
        {
          next$1(ctx);
          return {
            v: function (n) {
              return whiteBefore(white, n);
            }(node$1(unionRanges(startRng, endRng), new Expr("List", [reverse$$1(patternInput[1](new List$2()))])))
          };
        }
      }();

      if ((typeof _ret9 === "undefined" ? "undefined" : _typeof$2(_ret9)) === "object") return _ret9.v;
    } else {
      if (matchValue[1].Token.Case === "Comma") {
        var lastRng_1 = matchValue[1].Range;
        var _white4 = matchValue[0];
        {
          next$1(ctx);

          if (!patternInput[0] ? expectMore : false) {
            (function (e) {
              addError(ctx, e);
            })(Parser.unexpectedTokenInList(lastRng_1, new TokenKind("Comma", [])));
          }

          return parseListElements(true, lastRng_1, whiteStart, startRng, patternInput[1](_white4), ctx);
        }
      } else {
        if (function () {
          var t = matchValue[1];
          return !t.Token.Equals(new TokenKind("EndOfFile", []));
        }()) {
          var t = matchValue[1];
          next$1(ctx);

          (function (e) {
            addError(ctx, e);
          })(Parser.unexpectedTokenInList(t.Range, t.Token));

          return parseListElements(expectMore, t.Range, whiteStart, startRng, patternInput[1](new List$2()), ctx);
        } else {
          return _target3();
        }
      }
    }
  } else {
    return _target3();
  }
}
function parseParenTermEnd(wb, wa, bodyOpt, ctx) {
  var makeBody = function makeBody(wa_1) {
    var body = bodyOpt == null ? function () {
      var rng = function (list) {
        return reduce(function (r1, r2) {
          return unionRanges(r1, r2);
        }, list);
      }(map$4(function (t) {
        return t.Range;
      }, append$$1(ofArray([wb.head]), wa_1)));

      (function (e) {
        addError(ctx, e);
      })(Parser.missingParenthesizedExpr(rng));

      return node$1(rng, new Expr("Empty", []));
    }() : bodyOpt;
    return whiteAfter(reverse$$1(wa_1), whiteBefore(reverse$$1(wb), body));
  };

  var matchValue = nestedToken(ctx);

  if (matchValue == null) {
    var rng = bodyOpt != null ? bodyOpt.Range : wb.head.Range;

    (function (e) {
      addError(ctx, e);
    })(Parser.unindentedTokenInParenthesizedExpr(rng));

    return makeBody(wa);
  } else {
    if (matchValue[1].Token.Case === "RParen") {
      var t = matchValue[1];
      var white = matchValue[0];
      {
        next$1(ctx);
        return makeBody(new List$2(t, append$$1(reverse$$1(white), wa)));
      }
    } else {
      var _t3 = matchValue[1];
      var _white5 = matchValue[0];
      {
        next$1(ctx);

        (function (e) {
          addError(ctx, e);
        })(Parser.unexpectedTokenInParenthesizedExpr(_t3.Range, _t3.Token));

        return parseParenTermEnd(wb, new List$2(_t3, append$$1(reverse$$1(_white5), wa)), bodyOpt, ctx);
      }
    }
  }
}
function parseExpression(terms, ctx) {
  var matchValue = [terms, parseTerm(ctx)];

  if (matchValue[1] == null) {
    if (matchValue[0].tail != null) {
      var terms_1 = matchValue[0].tail;
      var term = matchValue[0].head[0];
      var op = matchValue[0].head[1];
      var next_1 = justToken(ctx);

      (function (e) {
        addError(ctx, e);
      })(Parser.unexpectedTokenAfterOperator(next_1.Range, new TokenKind("Operator", [op.Node]), next_1.Token));

      return buildExpression(terms_1, term);
    }
  } else {
    var _ret10 = function () {
      var term = matchValue[1];
      var matchValue_1 = nestedToken(ctx);

      var _target2 = function _target2() {
        return buildExpression(matchValue[0], term);
      };

      if (matchValue_1 != null) {
        if (matchValue_1[1].Token.Case === "Equals") {
          var t = matchValue_1[1];
          var white = matchValue_1[0];
          {
            next$1(ctx);
            return {
              v: parseExpression(new List$2([term, whiteBefore(white, node$1(t.Range, new Operator("Equals", [])))], matchValue[0]), ctx)
            };
          }
        } else {
          if (matchValue_1[1].Token.Case === "Operator") {
            var _op = matchValue_1[1].Token.Fields[0];
            var _t4 = matchValue_1[1];
            var _white6 = matchValue_1[0];
            {
              next$1(ctx);
              return {
                v: parseExpression(new List$2([term, whiteBefore(_white6, node$1(_t4.Range, _op))], matchValue[0]), ctx)
              };
            }
          } else {
            return {
              v: _target2()
            };
          }
        }
      } else {
        return {
          v: _target2()
        };
      }
    }();

    if ((typeof _ret10 === "undefined" ? "undefined" : _typeof$2(_ret10)) === "object") return _ret10.v;
  }
}
function parseExpressionOrNamedParam(ctx) {
  var lookAheadCtx = clone(ctx);
  var matchValue = nestedToken(lookAheadCtx);

  var _target1 = function _target1() {
    return new Choice("Choice2Of2", [parseExpression(new List$2(), ctx)]);
  };

  if (matchValue != null) {
    var activePatternResult5025 = _Identifier___(matchValue[0], matchValue[1]);

    if (activePatternResult5025 != null) {
      var id = activePatternResult5025;
      next$1(lookAheadCtx);
      var matchValue_1 = nestedToken(lookAheadCtx);

      var _target1_1 = function _target1_1() {
        return new Choice("Choice2Of2", [parseExpression(new List$2(), ctx)]);
      };

      if (matchValue_1 != null) {
        if (matchValue_1[1].Token.Case === "Equals") {
          var t = matchValue_1[1];
          var white = matchValue_1[0];
          {
            nestedToken(ctx);
            next$1(ctx);
            nestedToken(ctx);
            next$1(ctx);
            var matchValue_2 = parseExpression(new List$2(), ctx);

            if (matchValue_2 == null) {
              (function (e) {
                addError(ctx, e);
              })(Parser.unexpectedTokenInArgList(t.Range, t.Token));

              return new Choice("Choice2Of2", [node$1(id.Range, new Expr("Variable", [id]))]);
            } else {
              return new Choice("Choice1Of2", [[whiteAfter(white, id), matchValue_2]]);
            }
          }
        } else {
          return _target1_1();
        }
      } else {
        return _target1_1();
      }
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
function parseCallArgList(expectMore, lastRng, acc, ctx) {
  var patternInput = function () {
    var matchValue = parseExpressionOrNamedParam(ctx);

    if (matchValue.Case === "Choice1Of2") {
      var e = matchValue.Fields[0][1];
      var id = matchValue.Fields[0][0];
      return [true, new List$2(new Argument(id, e), acc)];
    } else {
      if (matchValue.Fields[0] != null) {
        var _e = matchValue.Fields[0];
        return [true, new List$2(new Argument(null, _e), acc)];
      } else {
        return [false, acc];
      }
    }
  }();

  var matchValue = nestedToken(ctx);

  var _target2 = function _target2() {
    var _target1 = function _target1() {
      (function (e) {
        addError(ctx, e);
      })(Parser.unexpectedScopeEndInArgList(lastRng));

      return [lastRng, new List$2(), reverse$$1(patternInput[1])];
    };

    if (matchValue != null) {
      if (function () {
        var t = matchValue[1];
        return !t.Token.Equals(new TokenKind("EndOfFile", []));
      }()) {
        var t = matchValue[1];
        next$1(ctx);

        (function (e) {
          addError(ctx, e);
        })(Parser.unexpectedTokenInArgList(t.Range, t.Token));

        return parseCallArgList(expectMore, t.Range, patternInput[1], ctx);
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  };

  if (matchValue != null) {
    if (matchValue[1].Token.Case === "RParen") {
      var t = matchValue[1];
      var white = matchValue[0];
      {
        next$1(ctx);

        if (expectMore ? !patternInput[0] : false) {
          (function (e) {
            addError(ctx, e);
          })(Parser.unexpectedTokenInArgList(lastRng, new TokenKind("RParen", [])));
        }

        return [t.Range, white, reverse$$1(patternInput[1])];
      }
    } else {
      if (matchValue[1].Token.Case === "Comma") {
        if (function () {
          var white = matchValue[0];
          var lastRng_1 = matchValue[1].Range;
          return patternInput[0];
        }()) {
          var lastRng_1 = matchValue[1].Range;
          var _white7 = matchValue[0];
          {
            next$1(ctx);
            return parseCallArgList(true, lastRng_1, patternInput[1], ctx);
          }
        } else {
          return _target2();
        }
      } else {
        return _target2();
      }
    }
  } else {
    return _target2();
  }
}
function parseNestedExpressions(wacc, acc, ctx) {
  var matchValue = parseExpression(new List$2(), ctx);

  if (matchValue != null) {
    if (!(acc.tail == null)) {
      (function (e) {
        addError(ctx, e);
      })(Parser.nestedExpressionInCommand(matchValue.Range));

      return parseNestedExpressions(new List$2(), new List$2(whiteBefore(reverse$$1(wacc), matchValue), acc), ctx);
    } else {
      var _strict = usingTopLevelNesting(ctx);

      try {
        return parseNestedExpressions(new List$2(), new List$2(whiteBefore(reverse$$1(wacc), matchValue), acc), ctx);
      } finally {
        if (hasInterface(_strict, "System.IDisposable")) {
          _strict.Dispose();
        }
      }
    }
  } else {
    var matchValue_1 = nestedToken(ctx);

    var _target0 = function _target0() {
      return acc.tail == null ? new List$2() : new List$2(whiteAfter(reverse$$1(wacc), acc.head), acc.tail);
    };

    if (matchValue_1 == null) {
      return _target0();
    } else {
      if (matchValue_1[1].Token.Case === "EndOfFile") {
        return _target0();
      } else {
        var tok = matchValue_1[1];
        var white = matchValue_1[0];
        {
          next$1(ctx);
          return parseNestedExpressions(append$$1(new List$2(tok, reverse$$1(white)), wacc), acc, ctx);
        }
      }
    }
  }
}
function parseLetBinding(whiteBeforeLet, rngLet, ctx) {
  var matchValue = nestedToken(ctx);

  var _target1 = function _target1() {
    return matchValue == null ? function () {
      (function (e) {
        addError(ctx, e);
      })(Parser.missingBodyInLetBinding(rngLet));

      var rng = new _Range(rngLet.End, rngLet.End);
      return [new List$2(), function (n) {
        return whiteBefore(whiteBeforeLet, n);
      }(node$1(rng, new Command("Let", [node$1(rng, new Name("")), node$1(rng, new Expr("Empty", []))])))];
    }() : function () {
      var whiteAfterLet = matchValue[0];
      var t = matchValue[1];

      (function (e) {
        addError(ctx, e);
      })(Parser.unexpectedTokenInLetBinding(t.Range, t.Token));

      var letEndRng = new _Range(rngLet.End, rngLet.End);

      var patternInput = function () {
        var matchValue_1 = reverse$$1(parseNestedExpressions(new List$2(), new List$2(), ctx));

        if (matchValue_1.tail == null) {
          return [node$1(letEndRng, new Expr("Empty", [])), new List$2()];
        } else {
          return [matchValue_1.head, matchValue_1.tail];
        }
      }();

      return [patternInput[1], function (n) {
        return whiteBefore(whiteBeforeLet, n);
      }(node$1(unionRanges(rngLet, patternInput[0].Range), new Command("Let", [whiteBefore(whiteAfterLet, node$1(letEndRng, new Name(""))), patternInput[0]])))];
    }();
  };

  if (matchValue != null) {
    var activePatternResult5036 = _Identifier___(matchValue[0], matchValue[1]);

    if (activePatternResult5036 != null) {
      var _ret11 = function () {
        var id = activePatternResult5036;
        next$1(ctx);
        var matchValue_1 = nestedToken(ctx);

        if (matchValue_1 == null) {
          (function (e) {
            addError(ctx, e);
          })(Parser.missingBodyInLetBinding(id.Range));

          var body = node$1(new _Range(id.Range.End, id.Range.End), new Expr("Empty", []));
          return {
            v: [new List$2(), function (n) {
              return whiteBefore(whiteBeforeLet, n);
            }(node$1(unionRanges(rngLet, id.Range), new Command("Let", [id, body])))]
          };
        } else {
          if (matchValue_1[1].Token.Case === "Equals") {
            var rngEq = matchValue_1[1].Range;
            var whiteAfterId = matchValue_1[0];
            {
              next$1(ctx);
              var matchValue_2 = reverse$$1(parseNestedExpressions(new List$2(), new List$2(), ctx));

              if (matchValue_2.tail == null) {
                (function (e) {
                  addError(ctx, e);
                })(Parser.missingBodyInLetBinding(unionRanges(rngLet, rngEq)));

                return {
                  v: [new List$2(), function (n) {
                    return whiteBefore(whiteBeforeLet, n);
                  }(node$1(unionRanges(rngLet, rngEq), new Command("Let", [whiteAfter(whiteAfterId, id), node$1(new _Range(rngEq.End, rngEq.End), new Expr("Empty", []))])))]
                };
              } else {
                return {
                  v: [matchValue_2.tail, function (n) {
                    return whiteBefore(whiteBeforeLet, n);
                  }(node$1(unionRanges(rngLet, matchValue_2.head.Range), new Command("Let", [whiteAfter(whiteAfterId, id), matchValue_2.head])))]
                };
              }
            }
          } else {
            var t = matchValue_1[1];
            var _whiteAfterId = matchValue_1[0];
            {
              (function (e) {
                addError(ctx, e);
              })(Parser.unexpectedTokenInLetBinding(t.Range, t.Token));

              var patternInput = function () {
                var matchValue_2 = reverse$$1(parseNestedExpressions(new List$2(), new List$2(), ctx));

                if (matchValue_2.tail == null) {
                  return [node$1(new _Range(id.Range.End, id.Range.End), new Expr("Empty", [])), new List$2()];
                } else {
                  return [matchValue_2.head, matchValue_2.tail];
                }
              }();

              return {
                v: [patternInput[1], function (n) {
                  return whiteBefore(whiteBeforeLet, n);
                }(node$1(unionRanges(rngLet, id.Range), new Command("Let", [whiteAfter(_whiteAfterId, id), patternInput[0]])))]
              };
            }
          }
        }
      }();

      if ((typeof _ret11 === "undefined" ? "undefined" : _typeof$2(_ret11)) === "object") return _ret11.v;
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
function parseCommands(acc, ctx) {
  var c = token(ctx);

  if (c[1].Token.Case === "Let") {
    var _ret12 = function () {
      var rngLet = c[1].Range;
      next$1(ctx);

      var patternInput = function () {
        var _indent = usingIndent(false, c[1], ctx);

        try {
          return parseLetBinding(c[0], rngLet, ctx);
        } finally {
          if (hasInterface(_indent, "System.IDisposable")) {
            _indent.Dispose();
          }
        }
      }();

      var rest = map$4(function (e) {
        return node$1(e.Range, new Command("Expr", [e]));
      }, patternInput[0]);
      return {
        v: parseCommands(append$$1(rest, new List$2(patternInput[1], acc)), ctx)
      };
    }();

    if ((typeof _ret12 === "undefined" ? "undefined" : _typeof$2(_ret12)) === "object") return _ret12.v;
  } else {
    if (c[1].Token.Case === "EndOfFile") {
      if (acc.tail == null) {
        return new List$2();
      } else {
        return reverse$$1(new List$2(new _Node(acc.head.WhiteBefore, c[0], acc.head.Range, acc.head.Node, acc.head.Entity), acc.tail));
      }
    } else {
      var cmds = function () {
        var _indent = usingIndent(true, c[1], ctx);

        try {
          return map$4(function (expr) {
            return node$1(expr.Range, new Command("Expr", [expr]));
          }, parseNestedExpressions(reverse$$1(c[0]), new List$2(), ctx));
        } finally {
          if (hasInterface(_indent, "System.IDisposable")) {
            _indent.Dispose();
          }
        }
      }();

      return parseCommands(append$$1(cmds, acc), ctx);
    }
  }
}
function parseProgram(input) {
  try {
    var _ret13 = function () {
      var patternInput = tokenize(input);

      var ctx = function () {
        var TopLevel = true;
        var Silent = false;
        var StrictlyNested = false;
        var Position = 0;
        var IndentCurrent = 0;
        var IndentStack = new List$2();
        var Errors = [];
        return new Context$$1(patternInput[0], [], Errors, TopLevel, Silent, StrictlyNested, IndentCurrent, IndentStack, Position);
      }();

      var cmds = parseCommands(new List$2(), ctx);
      var errors = patternInput[1].concat(_Array$from(ctx.Errors));
      var rng = fold$1(function (rng, cmd) {
        return unionRanges(rng, cmd.Range);
      }, new _Range(0, 0), cmds);
      return {
        v: [new Program$$1(node$1(rng, cmds)), errors]
      };
    }();

    if ((typeof _ret13 === "undefined" ? "undefined" : _typeof$2(_ret13)) === "object") return _ret13.v;
  } catch (e) {
    Log.exn("parsing", "Exception while parsing program: %O", e);

    var _rng2 = new _Range(0, 0);

    var error = Parser.exceptionWhileParsing(_rng2, toString$2(e));
    return [new Program$$1(node$1(_rng2, new List$2())), [error]];
  }
}

var CheckingContext = function () {
  function CheckingContext(errors, globals, ranges) {
    _classCallCheck(this, CheckingContext);

    this.Errors = errors;
    this.Globals = globals;
    this.Ranges = ranges;
  }

  _createClass(CheckingContext, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.TypeChecker.CheckingContext",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          Errors: FArray(makeGeneric(_Error, {
            Range: _Range
          })),
          Globals: Interface("System.Collections.Generic.IDictionary"),
          Ranges: Interface("System.Collections.Generic.IDictionary")
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }]);

  return CheckingContext;
}();
setType("TheGamma.TypeChecker.CheckingContext", CheckingContext);
function addError$1(ctx, ent, err) {
  ctx.Errors.push(err(ctx.Ranges.get(ent.Symbol)));
}

function _FindProperty___$1(name, _arg1) {
  return tryPick(function (_arg2) {
    var _target1 = function _target1() {
      return null;
    };

    if (_arg2.Case === "Property") {
      if (_arg2.Fields[0] === name.Name) {
        var m = _arg2.Fields[2];
        var n = _arg2.Fields[0];
        var r = _arg2.Fields[1];
        return [m, r];
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  }, _arg1.Members);
}

function _FindMethod___$1(name, _arg1) {
  return tryPick(function (_arg2) {
    var _target1 = function _target1() {
      return null;
    };

    if (_arg2.Case === "Method") {
      if (_arg2.Fields[0] === name.Name) {
        var args = _arg2.Fields[1];
        var m = _arg2.Fields[3];
        var n = _arg2.Fields[0];
        var r = _arg2.Fields[2];
        return [m, args, r];
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  }, _arg1.Members);
}

function inferListType(typs) {
  return reduce(function (f) {
    return function (x, y) {
      return f(x) > f(y) ? x : y;
    };
  }(function (tuple) {
    return tuple[1];
  }), append$$1(ofArray([[new Type("Any", []), 0]]), map$4(function (g) {
    return [g.head, g.length];
  }, function (list) {
    return List.groupWith(typesEqual, list);
  }(filter$1(function (_arg1) {
    return _arg1.Case === "Any" ? false : true;
  }, typs)))))[0];
}
function resolveParameterType(instTy, methName, parSpec) {
  var _target1 = function _target1() {
    throw new Error("resolveParameterType: Instance is not an object");
  };

  if (instTy.Case === "Object") {
    var activePatternResult5276 = _FindMethod___$1(methName, instTy.Fields[0]);

    if (activePatternResult5276 != null) {
      var args = activePatternResult5276[1];

      if (parSpec.Case === "Choice2Of2") {
        var patternInput = item(parSpec.Fields[0], args);
        return patternInput[2];
      } else {
        return pick(function (tupledArg) {
          return tupledArg[0] === parSpec.Fields[0] ? tupledArg[2] : null;
        }, args);
      }
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
function checkMethodCall(ctx, memTy, pars, argList, args) {
  var patternInput = function () {
    var pb = toList(takeWhile(function (_arg1) {
      return _arg1.Kind.Case === "NamedParam" ? false : true;
    }, args));
    var nb = toList(skipWhile(function (_arg2) {
      return _arg2.Kind.Case === "NamedParam" ? false : true;
    }, args));
    return [_Array$from(pb), create$4(choose$$1(function (arg) {
      return arg.Kind.Case === "NamedParam" ? [arg.Kind.Fields[0].Name, arg.Kind.Fields[1]] : function () {
        (function (err) {
          addError$1(ctx, arg, err);
        })(function (rng) {
          return TypeChecker.nameBasedParamMustBeLast(rng);
        });

        return null;
      }();
    }, nb), new GenericComparer(function (x, y) {
      return x < y ? -1 : x > y ? 1 : 0;
    }))];
  }();

  var matchedArguments = mapIndexed$$1(function (index, tupledArg) {
    var arg = index < patternInput[0].length ? patternInput[0][index] : tryFind$1(tupledArg[0], patternInput[1]);

    if (arg == null) {
      if (tupledArg[1]) {
        return [tupledArg[0], tupledArg[2], tupledArg[2], null];
      } else {
        if (arg == null) {
          (function (err) {
            addError$1(ctx, argList, err);
          })(function (rng) {
            return TypeChecker.parameterMissingValue(tupledArg[0], rng);
          });

          return [tupledArg[0], tupledArg[2], new Type("Any", []), null];
        } else {
          throw new Error("C:\\Tomas\\Public\\thegamma\\thegamma-script\\src\\thegamma\\analyzer/typechecker.fs", 72, 12);
        }
      }
    } else {
      return [tupledArg[0], tupledArg[2], getType$1(ctx, arg), arg];
    }
  }, pars);
  var patternInput_1 = memTy.Case === "Forall" ? [memTy.Fields[0], memTy.Fields[1]] : [new List$2(), memTy];
  var assigns = collect$$1(function (tupledArg) {
    var patternInput_2 = unifyTypes(patternInput_1[0], tupledArg[1], tupledArg[2]);

    if (function () {
      return tupledArg[3] != null;
    }()) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        var _loop = function _loop() {
          var forLoopVar = _step.value;
          (function () {
            var ent = tupledArg[3];
            return function (err) {
              addError$1(ctx, ent, err);
            };
          })()(function (rng) {
            return TypeChecker.incorrectParameterType(tupledArg[0], tupledArg[1], tupledArg[2], forLoopVar[0], forLoopVar[1], rng);
          });
        };

        for (var _iterator = _getIterator(patternInput_2[1]), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return patternInput_2[0];
  }, matchedArguments);
  {
    var inputSequence = groupBy$1(function (tuple) {
      return tuple[0];
    }, assigns);
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _getIterator(inputSequence), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _forLoopVar = _step2.value;
        var matchValue = toList(_forLoopVar[1]);

        var _target1 = function _target1() {};

        if (matchValue.tail != null) {
          if (matchValue.tail.tail != null) {
            (function () {
              var t1 = matchValue.head[1];
              var ts = matchValue.tail;
              var v = matchValue.head[0];
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                var _loop2 = function _loop2() {
                  var forLoopVar_1 = _step3.value;

                  (function (err) {
                    addError$1(ctx, argList, err);
                  })(function (rng) {
                    return TypeChecker.inferenceConflict(v, t1, forLoopVar_1[1], rng);
                  });
                };

                for (var _iterator3 = _getIterator(ts), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  _loop2();
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
            })();
          } else {
            _target1();
          }
        } else {
          _target1();
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }
  var res = substituteTypes(create$4(assigns, new GenericComparer(function (x, y) {
    return x < y ? -1 : x > y ? 1 : 0;
  })), patternInput_1[1]);
  return res;
}
function getType$1(ctx, e) {
  if (function () {
    return e.Type == null;
  }()) {
    (function () {
      var errorCount = ctx.Errors.length;
      e.Type = typeCheckEntity(ctx, e);
      e.Errors = toList(delay(function () {
        return map$5(function (i) {
          return ctx.Errors[i];
        }, range(errorCount, ctx.Errors.length - 1));
      }));
    })();
  }

  return e.Type;
}
function typeCheckEntity(ctx, e) {
  var _target4 = function _target4(ident, name) {
    (function (err) {
      addError$1(ctx, ident, err);
    })(function (rng) {
      return TypeChecker.callMissingInstance(name.Name, rng);
    });

    return new Type("Any", []);
  };

  var _target5 = function _target5(name) {
    throw new Error(fsFormat("typeCheckEntity: Call to %s is missing argument list!")(function (x) {
      return x;
    })(name.Name));
  };

  if (e.Kind.Case === "Variable") {
    var inst = e.Kind.Fields[1];
    return getType$1(ctx, inst);
  } else {
    if (e.Kind.Case === "ChainElement") {
      if (e.Kind.Fields[0]) {
        if (e.Kind.Fields[3] == null) {
          return _target4(e.Kind.Fields[2], e.Kind.Fields[1]);
        } else {
          var _ret5 = function () {
            var ident = e.Kind.Fields[2];
            var inst = e.Kind.Fields[3];
            var name = e.Kind.Fields[1];
            {
              var _ret6 = function () {
                var matchValue = reduceType(getType$1(ctx, inst));

                var _target2 = function _target2() {
                  return matchValue.Case === "Object" ? function () {
                    var members = matchValue.Fields[0].Members;

                    (function (err) {
                      addError$1(ctx, ident, err);
                    })(function (rng) {
                      return TypeChecker.propertyMissing(name.Name, members, rng);
                    });

                    return new Type("Any", []);
                  }() : function () {
                    (function (err) {
                      addError$1(ctx, inst, err);
                    })(function (rng) {
                      return TypeChecker.notAnObject(name.Name, matchValue, rng);
                    });

                    return new Type("Any", []);
                  }();
                };

                if (matchValue.Case === "Any") {
                  return {
                    v: {
                      v: new Type("Any", [])
                    }
                  };
                } else {
                  if (matchValue.Case === "Object") {
                    var activePatternResult5308 = _FindProperty___$1(name, matchValue.Fields[0]);

                    if (activePatternResult5308 != null) {
                      var meta = activePatternResult5308[0];
                      var resTyp = activePatternResult5308[1];
                      {
                        e.Meta = meta;
                        return {
                          v: {
                            v: resTyp
                          }
                        };
                      }
                    } else {
                      return {
                        v: {
                          v: _target2()
                        }
                      };
                    }
                  } else {
                    return {
                      v: {
                        v: _target2()
                      }
                    };
                  }
                }
              }();

              if ((typeof _ret6 === "undefined" ? "undefined" : _typeof$2(_ret6)) === "object") return _ret6.v;
            }
          }();

          if ((typeof _ret5 === "undefined" ? "undefined" : _typeof$2(_ret5)) === "object") return _ret5.v;
        }
      } else {
        if (e.Kind.Fields[3] == null) {
          return _target4(e.Kind.Fields[2], e.Kind.Fields[1]);
        } else {
          if (e.Kind.Fields[4] != null) {
            if (e.Kind.Fields[4].Kind.Case === "ArgumentList") {
              var _ret7 = function () {
                var arglist = e.Kind.Fields[4];
                var ents = e.Kind.Fields[4].Kind.Fields[0];
                var ident = e.Kind.Fields[2];
                var inst = e.Kind.Fields[3];
                var name = e.Kind.Fields[1];
                {
                  var _ret8 = function () {
                    var matchValue = reduceType(getType$1(ctx, inst));

                    var _target2 = function _target2() {
                      return matchValue.Case === "Object" ? function () {
                        var members = matchValue.Fields[0].Members;

                        (function (err) {
                          addError$1(ctx, ident, err);
                        })(function (rng) {
                          return TypeChecker.methodMissing(name.Name, members, rng);
                        });

                        return new Type("Any", []);
                      }() : function () {
                        (function (err) {
                          addError$1(ctx, inst, err);
                        })(function (rng) {
                          return TypeChecker.notAnObject(name.Name, matchValue, rng);
                        });

                        return new Type("Any", []);
                      }();
                    };

                    if (matchValue.Case === "Any") {
                      return {
                        v: {
                          v: new Type("Any", [])
                        }
                      };
                    } else {
                      if (matchValue.Case === "Object") {
                        var activePatternResult5310 = _FindMethod___$1(name, matchValue.Fields[0]);

                        if (activePatternResult5310 != null) {
                          var args = activePatternResult5310[1];
                          var meta = activePatternResult5310[0];
                          var resTyp = activePatternResult5310[2];
                          {
                            e.Meta = meta;
                            return {
                              v: {
                                v: checkMethodCall(ctx, resTyp, args, arglist, ents)
                              }
                            };
                          }
                        } else {
                          return {
                            v: {
                              v: _target2()
                            }
                          };
                        }
                      } else {
                        return {
                          v: {
                            v: _target2()
                          }
                        };
                      }
                    }
                  }();

                  if ((typeof _ret8 === "undefined" ? "undefined" : _typeof$2(_ret8)) === "object") return _ret8.v;
                }
              }();

              if ((typeof _ret7 === "undefined" ? "undefined" : _typeof$2(_ret7)) === "object") return _ret7.v;
            } else {
              return _target5(e.Kind.Fields[1]);
            }
          } else {
            return _target5(e.Kind.Fields[1]);
          }
        }
      }
    } else {
      if (e.Kind.Case === "Operator") {
        var _ret9 = function () {
          var l = e.Kind.Fields[0];
          var operator = e.Kind.Fields[1];
          var r = e.Kind.Fields[2];
          {
            iterateIndexed(function (idx, operand) {
              var typ = getType$1(ctx, operand);

              if (!typesEqual(typ)(new Type("Primitive", [new PrimitiveType("Number", [])]))) {
                (function (err) {
                  addError$1(ctx, operand, err);
                })(function (rng) {
                  return TypeChecker.numericOperatorExpectsNumbers(operator, idx, typ, rng);
                });
              }
            }, ofArray([l, r]));
            return {
              v: new Type("Primitive", [new PrimitiveType("Number", [])])
            };
          }
        }();

        if ((typeof _ret9 === "undefined" ? "undefined" : _typeof$2(_ret9)) === "object") return _ret9.v;
      } else {
        if (e.Kind.Case === "List") {
          var _ret10 = function () {
            var elems = e.Kind.Fields[0];
            var typs = map$4(function (e_1) {
              return getType$1(ctx, e_1);
            }, elems);
            var typ = inferListType(typs);
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              var _loop3 = function _loop3() {
                var a = _step4.value;
                var elty = getType$1(ctx, a);

                if (!typesEqual(typ)(elty)) {
                  (function (err) {
                    addError$1(ctx, a, err);
                  })(function (rng) {
                    return TypeChecker.listElementTypeDoesNotMatch(typ, elty, rng);
                  });
                }
              };

              for (var _iterator4 = _getIterator(elems), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                _loop3();
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            return {
              v: new Type("App", [new Type("Forall", [ofArray(["a"]), new Type("List", [new Type("Parameter", ["a"])])]), ofArray([typ])])
            };
          }();

          if ((typeof _ret10 === "undefined" ? "undefined" : _typeof$2(_ret10)) === "object") return _ret10.v;
        } else {
          if (e.Kind.Case === "Binding") {
            if (e.Kind.Fields[1].Kind.Case === "CallSite") {
              var _inst = e.Kind.Fields[1].Kind.Fields[0];
              var methName = e.Kind.Fields[1].Kind.Fields[1];
              var _name = e.Kind.Fields[0];
              var parSpec = e.Kind.Fields[1].Kind.Fields[2];
              {
                var matchValue = resolveParameterType(reduceType(getType$1(ctx, _inst)), methName, parSpec);

                var _target1 = function _target1() {
                  throw new Error("typeCheckEntity: Expected parameter of function type");
                };

                if (matchValue.Case === "Function") {
                  if (matchValue.Fields[0].tail != null) {
                    if (matchValue.Fields[0].tail.tail == null) {
                      var tin = matchValue.Fields[0].head;
                      return tin;
                    } else {
                      return _target1();
                    }
                  } else {
                    return _target1();
                  }
                } else {
                  return _target1();
                }
              }
            } else {
              var _name2 = e.Kind.Fields[0];
              throw new Error(fsFormat("typeCheckEntity: Variable binding %s is missing call site!")(function (x) {
                return x;
              })(_name2.Name));
            }
          } else {
            if (e.Kind.Case === "Function") {
              var body = e.Kind.Fields[1];
              var _var = e.Kind.Fields[0];
              return new Type("Function", [ofArray([getType$1(ctx, _var)]), getType$1(ctx, body)]);
            } else {
              if (e.Kind.Case === "Constant") {
                if (e.Kind.Fields[0].Case === "String") {
                  return new Type("Primitive", [new PrimitiveType("String", [])]);
                } else {
                  if (e.Kind.Fields[0].Case === "Boolean") {
                    return new Type("Primitive", [new PrimitiveType("Bool", [])]);
                  } else {
                    if (e.Kind.Fields[0].Case === "Empty") {
                      return new Type("Any", []);
                    } else {
                      return new Type("Primitive", [new PrimitiveType("Number", [])]);
                    }
                  }
                }
              } else {
                if (e.Kind.Case === "Root") {
                  return new Type("Any", []);
                } else {
                  if (e.Kind.Case === "LetCommand") {
                    return new Type("Any", []);
                  } else {
                    if (e.Kind.Case === "RunCommand") {
                      return new Type("Any", []);
                    } else {
                      if (e.Kind.Case === "ArgumentList") {
                        return new Type("Any", []);
                      } else {
                        if (e.Kind.Case === "NamedParam") {
                          return new Type("Any", []);
                        } else {
                          if (e.Kind.Case === "NamedMember") {
                            return new Type("Any", []);
                          } else {
                            if (e.Kind.Case === "CallSite") {
                              return new Type("Any", []);
                            } else {
                              if (e.Kind.Case === "Program") {
                                return new Type("Any", []);
                              } else {
                                var _ret12 = function () {
                                  var name = e.Kind.Fields[0];

                                  if (!ctx.Globals.has(name.Name)) {
                                    (function (err) {
                                      addError$1(ctx, e, err);
                                    })(function (rng) {
                                      return TypeChecker.variableNotInScope(name.Name, rng);
                                    });

                                    return {
                                      v: new Type("Any", [])
                                    };
                                  } else {
                                    return {
                                      v: getType$1(ctx, ctx.Globals.get(name.Name))
                                    };
                                  }
                                }();

                                if ((typeof _ret12 === "undefined" ? "undefined" : _typeof$2(_ret12)) === "object") return _ret12.v;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function evaluateDelayedType(topLevel, t) {
  return function (builder_) {
    return builder_.Delay(function () {
      var _target3 = function _target3() {
        return t.Case === "Function" ? builder_.Bind(evaluateDelayedType(topLevel, t.Fields[1]), function (_arg6) {
          return builder_.Bind(Async.map(function (t_1) {
            return evaluateDelayedType(topLevel, t_1);
          }, t.Fields[0]), function (_arg7) {
            return builder_.Return(new Type("Function", [_arg7, _arg6]));
          });
        }) : t.Case === "List" ? builder_.Bind(evaluateDelayedType(topLevel, t.Fields[0]), function (_arg8) {
          return builder_.Return(new Type("List", [_arg8]));
        }) : t.Case === "Delayed" ? builder_.Bind(Async_AwaitFuture_Static(t.Fields[1]), function (_arg9) {
          return builder_.ReturnFrom(evaluateDelayedType(topLevel, _arg9));
        }) : builder_.Return(t);
      };

      if (t.Case === "App") {
        var _ret13 = function () {
          var args = t.Fields[1];
          var t_1 = t.Fields[0];
          return {
            v: builder_.Bind(evaluateDelayedType(topLevel, t_1), function (_arg1) {
              return builder_.Return(new Type("App", [_arg1, args]));
            })
          };
        }();

        if ((typeof _ret13 === "undefined" ? "undefined" : _typeof$2(_ret13)) === "object") return _ret13.v;
      } else {
        if (t.Case === "Forall") {
          var _ret14 = function () {
            var t_1 = t.Fields[1];
            var vars = t.Fields[0];
            return {
              v: builder_.Bind(evaluateDelayedType(topLevel, t_1), function (_arg2) {
                return builder_.Return(new Type("Forall", [vars, _arg2]));
              })
            };
          }();

          if ((typeof _ret14 === "undefined" ? "undefined" : _typeof$2(_ret14)) === "object") return _ret14.v;
        } else {
          if (t.Case === "Object") {
            if (topLevel) {
              var obj = t.Fields[0];
              return builder_.Bind(Async.Array.map(function (m) {
                return function (builder__1) {
                  return builder__1.Delay(function () {
                    return m.Case === "Method" ? builder__1.Bind(Async.map(function (tupledArg) {
                      return function (builder__2) {
                        return builder__2.Delay(function () {
                          return builder__2.Bind(evaluateDelayedType(false, tupledArg[2]), function (_arg3) {
                            return builder__2.Return([tupledArg[0], tupledArg[1], _arg3]);
                          });
                        });
                      }(singleton$2);
                    }, m.Fields[1]), function (_arg4) {
                      return builder__1.Return(new Member("Method", [m.Fields[0], _arg4, m.Fields[2], m.Fields[3], m.Fields[4]]));
                    }) : builder__1.Return(m);
                  });
                }(singleton$2);
              }, obj.Members), function (_arg5) {
                return builder_.Return(new Type("Object", [new ObjectType(_arg5)]));
              });
            } else {
              return _target3();
            }
          } else {
            return _target3();
          }
        }
      }
    });
  }(singleton$2);
}
function typeCheckEntityAsync(ctx, e) {
  return function (builder_) {
    return builder_.Delay(function () {
      var visited = new _Map();

      var loop = function loop(e_1) {
        return function (builder__1) {
          return builder__1.Delay(function () {
            var isGlobal = e_1.Kind.Case === "GlobalValue" ? true : false;

            if (!visited.has(e_1.Symbol) ? isGlobal ? true : function () {
              return e_1.Type == null;
            }() : false) {
              visited.set(e_1.Symbol, true);
              return builder__1.Combine(builder__1.For(Entity_get_Antecedents.bind(e_1)(), function (_arg1) {
                return builder__1.Bind(loop(_arg1), function () {
                  return builder__1.Return();
                });
              }), builder__1.Delay(function () {
                Log.trace("typechecker", "Type of entity '%s' (%O) is: %O", Entity_get_Name.bind(e_1)(), e_1.Kind, getType$1(ctx, e_1));
                return builder__1.Bind(evaluateDelayedType(true, getType$1(ctx, e_1)), function (_arg3) {
                  Log.trace("typechecker", "Type of entity '%s' (%O) reduced to: %O", Entity_get_Name.bind(e_1)(), e_1.Kind, _arg3);
                  e_1.Type = _arg3;
                  return builder__1.Zero();
                });
              }));
            } else {
              return builder__1.Zero();
            }
          });
        }(singleton$2);
      };

      return builder_.Bind(loop(e), function () {
        return builder_.Return(getType$1(ctx, e));
      });
    });
  }(singleton$2);
}
function collectTypeErrors(entity) {
  var errors = [];
  var visited = new _Map();

  var loop = function loop(e) {
    if (!visited.has(e.Symbol)) {
      visited.set(e.Symbol, true);
      {
        var inputSequence = Entity_get_Antecedents.bind(e)();
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = _getIterator(inputSequence), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var e_1 = _step5.value;
            loop(e_1);
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      }
      addRangeInPlace(e.Errors, errors);
    }
  };

  loop(entity);
  return _Array$from(errors);
}
function typeCheckProgram(globals, bound, prog) {
  return function (builder_) {
    return builder_.Delay(function () {
      Log.trace("typechecker", "Type checking program");
      return builder_.TryWith(builder_.Delay(function () {
        var rangeLookup = new _Map(toList(delay(function () {
          return collect$1(function (matchValue) {
            return singleton$1([matchValue[1].Symbol, matchValue[0]]);
          }, bound.Entities);
        })));
        var vars = new _Map(toList(delay(function () {
          return map$5(function (e) {
            return [Entity_get_Name.bind(e)(), e];
          }, globals);
        })));
        var ctx = new CheckingContext([], vars, rangeLookup);
        return builder_.Bind(typeCheckEntityAsync(ctx, prog), function (_arg1) {
          Log.trace("typechecker", "Completed type checking");
          return builder_.Zero();
        });
      }), function (_arg2) {
        Log.exn("typechecker", "Type checking program failed: %O", _arg2);
        return builder_.Zero();
      });
    });
  }(singleton$2);
}

var LineColumnRange = function () {
  function LineColumnRange(startLineNumber, startColumn, endLineNumber, endColumn) {
    _classCallCheck(this, LineColumnRange);

    this.StartLineNumber = startLineNumber;
    this.StartColumn = startColumn;
    this.EndLineNumber = endLineNumber;
    this.EndColumn = endColumn;
  }

  _createClass(LineColumnRange, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.LineColumnRange",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          StartLineNumber: "number",
          StartColumn: "number",
          EndLineNumber: "number",
          EndColumn: "number"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return LineColumnRange;
}();
setType("TheGamma.LineColumnRange", LineColumnRange);
var LocationMapper = function () {
  _createClass(LocationMapper, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.LocationMapper",
        properties: {}
      };
    }
  }]);

  function LocationMapper(code) {
    _classCallCheck(this, LocationMapper);

    this.lengths = Int32Array.from(map$5(function (s) {
      return s.length;
    }, code.split("\n")));
  }

  _createClass(LocationMapper, [{
    key: "AbsoluteToLineCol",
    value: function (offs) {
      var line = 0;
      var col = 0;
      var offs_1 = offs;

      while (line <= this.lengths.length ? offs_1 > this.lengths[line] : false) {
        offs_1 = offs_1 - this.lengths[line] - 1;
        line = line + 1;
      }

      return [line + 1, offs_1 + 1];
    }
  }, {
    key: "LineColToAbsolute",
    value: function (line, col) {
      var offs = 0;

      for (var l = 1; l <= line - 1; l++) {
        offs = offs + this.lengths[l - 1] + 1;
      }

      return offs + col - 1;
    }
  }]);

  return LocationMapper;
}();
setType("TheGamma.LocationMapper", LocationMapper);

var LiveEditorZone = function () {
  function LiveEditorZone(line, preview) {
    _classCallCheck(this, LiveEditorZone);

    this.Line = line;
    this.Preview = preview;
  }

  _createClass(LiveEditorZone, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Live.Common.LiveEditorZone",
        interfaces: ["FSharpRecord"],
        properties: {
          Line: "number",
          Preview: DomNode
        }
      };
    }
  }]);

  return LiveEditorZone;
}();
setType("TheGamma.Live.Common.LiveEditorZone", LiveEditorZone);
var LivePreview = function () {
  function LivePreview(update, render$$1, initialState) {
    _classCallCheck(this, LivePreview);

    this.Update = update;
    this.Render = render$$1;
    this.InitialState = initialState;
  }

  _createClass(LivePreview, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Live.Common.LivePreview",
        interfaces: ["FSharpRecord"],
        properties: {
          Update: "function",
          Render: "function",
          InitialState: GenericParam("TState")
        }
      };
    }
  }]);

  return LivePreview;
}();
setType("TheGamma.Live.Common.LivePreview", LivePreview);
var LiveState = function () {
  function LiveState(globals, code, program, mapper, location, selection, state, currentPreview) {
    _classCallCheck(this, LiveState);

    this.Globals = globals;
    this.Code = code;
    this.Program = program;
    this.Mapper = mapper;
    this.Location = location;
    this.Selection = selection;
    this.State = state;
    this.CurrentPreview = currentPreview;
  }

  _createClass(LiveState, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Live.Common.LiveState",
        interfaces: ["FSharpRecord"],
        properties: {
          Globals: Interface("System.Collections.Generic.IEnumerable"),
          Code: "string",
          Program: Program$$1,
          Mapper: LocationMapper,
          Location: "number",
          Selection: Option(LineColumnRange),
          State: GenericParam("T"),
          CurrentPreview: Option(makeGeneric(LivePreview, {
            TState: Interface("TheGamma.Live.Common.CustomLiveState"),
            TEvent: Interface("TheGamma.Live.Common.CustomLiveEvent")
          }))
        }
      };
    }
  }]);

  return LiveState;
}();
setType("TheGamma.Live.Common.LiveState", LiveState);
var LiveEvent = function () {
  function LiveEvent(caseName, fields) {
    _classCallCheck(this, LiveEvent);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(LiveEvent, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Live.Common.LiveEvent",
        interfaces: ["FSharpUnion"],
        cases: {
          CustomEvent: [GenericParam("T")],
          InitializeGlobals: [Interface("System.Collections.Generic.IEnumerable")],
          UpdateLocation: ["number"],
          UpdateSource: ["string", "number", Program$$1, LocationMapper]
        }
      };
    }
  }]);

  return LiveEvent;
}();
setType("TheGamma.Live.Common.LiveEvent", LiveEvent);
function updateLiveState(state, event) {
  return event.Case === "UpdateLocation" ? new LiveState(state.Globals, state.Code, state.Program, state.Mapper, event.Fields[0], state.Selection, state.State, state.CurrentPreview) : event.Case === "UpdateSource" ? new LiveState(state.Globals, event.Fields[0], event.Fields[2], event.Fields[3], event.Fields[1], state.Selection, state.State, state.CurrentPreview) : event.Case === "CustomEvent" ? state : new LiveState(event.Fields[0], state.Code, state.Program, state.Mapper, state.Location, state.Selection, state.State, state.CurrentPreview);
}

var EditorWorkerMessage = function () {
  function EditorWorkerMessage(caseName, fields) {
    _classCallCheck(this, EditorWorkerMessage);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(EditorWorkerMessage, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Services.EditorWorkerMessage",
        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
        cases: {
          Refersh: ["string"],
          Update: ["string"],
          UpdateNow: ["string"]
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareUnions(this, other);
    }
  }]);

  return EditorWorkerMessage;
}();
setType("TheGamma.Services.EditorWorkerMessage", EditorWorkerMessage);
var EditorService = function () {
  _createClass(EditorService, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Services.EditorService",
        properties: {
          EditorsUpdated: Interface("Microsoft.FSharp.Control.IEvent")
        }
      };
    }
  }]);

  function EditorService(article, checker, delay$$1) {
    var _this = this;

    _classCallCheck(this, EditorService);

    this.article = article;
    this.checker = checker;
    this.renderEditors = new Event$2();
    this.agent = start$1(function (inbox) {
      var loop = function loop(lastText) {
        return function (pending) {
          return function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(inbox.receive(), function (_arg3) {
                return _arg3.Case === "UpdateNow" ? builder_.Combine(builder_.TryWith(builder_.Delay(function () {
                  Log.trace("editors", "updating...");

                  if (_arg3.Fields[0] !== lastText) {
                    return builder_.Bind(_this.update(_arg3.Fields[0]), function () {
                      return builder_.Return();
                    });
                  } else {
                    return builder_.Zero();
                  }
                }), function (_arg6) {
                  Log.exn("editors", "update failed: %O", _arg6);
                  return builder_.Zero();
                }), builder_.Delay(function () {
                  return builder_.ReturnFrom(loop(_arg3.Fields[0])(pending));
                })) : _arg3.Case === "Refersh" ? builder_.Combine(pending === 1 ? builder_.TryWith(builder_.Delay(function () {
                  Log.trace("editors", "updating...");

                  if (_arg3.Fields[0] !== lastText) {
                    return builder_.Bind(_this.update(_arg3.Fields[0]), function () {
                      return builder_.Return();
                    });
                  } else {
                    return builder_.Zero();
                  }
                }), function (_arg8) {
                  Log.exn("editors", "update failed: %O", _arg8);
                  return builder_.Zero();
                }) : builder_.Zero(), builder_.Delay(function () {
                  return builder_.ReturnFrom(loop(_arg3.Fields[0])(pending - 1));
                })) : function () {
                  (function (arg00) {
                    startImmediate(arg00);
                  })(function (builder__1) {
                    return builder__1.Delay(function () {
                      return builder__1.Bind(sleep(delay$$1), function () {
                        inbox.post(new EditorWorkerMessage("Refersh", [_arg3.Fields[0]]));
                        return builder__1.Zero();
                      });
                    });
                  }(singleton$2));

                  return builder_.ReturnFrom(loop(lastText)(pending + 1));
                }();
              });
            });
          }(singleton$2);
        };
      };

      return loop("")(0);
    });
  }

  _createClass(EditorService, [{
    key: "UpdateSource",
    value: function (text$$1, immediately) {
      if (equals(immediately, true)) {
        this.agent.post(new EditorWorkerMessage("UpdateNow", [text$$1]));
      } else {
        this.agent.post(new EditorWorkerMessage("Update", [text$$1]));
      }
    }
  }, {
    key: "update",
    value: function (text$$1) {
      var _this2 = this;

      return function (builder_) {
        return builder_.Delay(function () {
          Log.event("options", "update", _this2.article, text$$1);
          return builder_.Bind(_this2.checker(text$$1), function (_arg1) {
            Log.trace("service", "Collecting editors");
            return builder_.Bind(Async.collect(function (cmd) {
              return collectCmdEditors(cmd);
            }, _arg1[2].Body.Node), function (_arg2) {
              var eds = mapIndexed$$1(function (i, v) {
                return [i, v];
              }, _arg2);
              var filteredEds = map$4(function (tuple) {
                return tuple[1];
              }, filter$1(function (tupledArg) {
                return !exists$1(function (tupledArg_1) {
                  return tupledArg_1[0] !== tupledArg[0] ? strictSubRange(tupledArg[1].Range, tupledArg_1[1].Range) : false;
                }, eds);
              }, eds));
              Log.trace("service", "Rendering %s out of %s", filteredEds.length, eds.length);

              _this2.renderEditors.Trigger(filteredEds);

              return builder_.Zero();
            });
          });
        });
      }(singleton$2);
    }
  }, {
    key: "EditorsUpdated",
    get: function () {
      return this.renderEditors.Publish;
    }
  }]);

  return EditorService;
}();
setType("TheGamma.Services.EditorService", EditorService);
var CheckingMessage = function () {
  function CheckingMessage(caseName, fields) {
    _classCallCheck(this, CheckingMessage);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(CheckingMessage, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Services.CheckingMessage",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: {
          IsWellTyped: ["string", Any],
          TypeCheck: ["string", Any]
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }]);

  return CheckingMessage;
}();
setType("TheGamma.Services.CheckingMessage", CheckingMessage);
var Position$1 = function () {
  function Position(line, column) {
    _classCallCheck(this, Position);

    this.Line = line;
    this.Column = column;
  }

  _createClass(Position, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Services.Position",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          Line: "number",
          Column: "number"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return Position;
}();
setType("TheGamma.Services.Position", Position$1);
var LineRange = function () {
  function LineRange(start$$1, end) {
    _classCallCheck(this, LineRange);

    this.Start = start$$1;
    this.End = end;
  }

  _createClass(LineRange, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Services.LineRange",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          Start: Position$1,
          End: Position$1
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return LineRange;
}();
setType("TheGamma.Services.LineRange", LineRange);
function offsetToLocation(lines, offs, lengths) {
  var _target1 = function _target1() {
    return lengths.tail == null ? new Position$1(lines, offs) : offsetToLocation(lines + 1, offs - lengths.head - 1, lengths.tail);
  };

  if (lengths.tail != null) {
    if (offs <= lengths.head) {
      var l = lengths.head;
      var lengths_1 = lengths.tail;
      return new Position$1(lines, offs);
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
function rangeToLoc(lengths, rng) {
  return new LineRange(offsetToLocation(1, rng.Start, lengths), offsetToLocation(1, rng.Start, lengths));
}
var CheckingService = function () {
  _createClass(CheckingService, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Services.CheckingService",
        properties: {
          ErrorsReported: Interface("Microsoft.FSharp.Control.IEvent")
        }
      };
    }
  }]);

  function CheckingService(article, globals) {
    var _this3 = this;

    _classCallCheck(this, CheckingService);

    this.globals = globals;
    this.errorsReported = new Event$2();
    var emptyProg = new Program$$1(node(new _Range(0, 0), new List$2()));
    this.bindingContext = Async_StartAsFuture_Static(function (builder_) {
      return builder_.Delay(function () {
        return builder_.Bind(Async_AwaitFuture_Static(_this3.globals), function (_arg1) {
          return builder_.Return(createContext(_arg1, article));
        });
      });
    }(singleton$2));
    this.agent = start$1(function (inbox) {
      var loop = function loop(lastCode) {
        return function (lastResult) {
          return function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(inbox.receive(), function (_arg6) {
                return _arg6.Case === "TypeCheck" ? _arg6.Fields[0] === lastCode ? function () {
                  var code = _arg6.Fields[0];
                  var repl = _arg6.Fields[1];
                  {
                    Log.trace("service", "Returning previous result");
                    repl.reply(lastResult);
                    return builder_.ReturnFrom(loop(lastCode)(lastResult));
                  }
                }() : _arg6.Case === "TypeCheck" ? function () {
                  Log.trace("service", "Type checking source code");
                  return builder_.Bind(_this3.typeCheck(_arg6.Fields[0]), function (_arg8) {
                    return _arg8 == null ? function () {
                      _arg6.Fields[1].reply([false, new BindingResult([]), emptyProg]);

                      return builder_.ReturnFrom(loop(lastCode)(lastResult));
                    }() : function () {
                      var prog = _arg8[0];
                      var errors = _arg8[2];
                      var ents = _arg8[1];

                      _this3.errorsReported.Trigger([_arg6.Fields[0], errors]);

                      var result = [errors.length === 0, ents, prog];

                      _arg6.Fields[1].reply(result);

                      return builder_.ReturnFrom(loop(_arg6.Fields[0])(result));
                    }();
                  });
                }() : function () {
                  throw new Error("C:\\Tomas\\Public\\thegamma\\thegamma-script\\src\\thegamma\\services.fs", 120, 12);
                }() : function () {
                  var code = _arg6.Fields[0];
                  var repl = _arg6.Fields[1];
                  return builder_.Bind(_this3.typeCheck(code), function (_arg7) {
                    return builder_.Combine(function () {
                      var _target1 = function _target1() {
                        repl.reply(false);
                        return builder_.Zero();
                      };

                      if (_arg7 != null) {
                        if (function () {
                          var errs = _arg7[2];
                          return errs.length === 0;
                        }()) {
                          var errs = _arg7[2];
                          repl.reply(true);
                          return builder_.Zero();
                        } else {
                          return _target1();
                        }
                      } else {
                        return _target1();
                      }
                    }(), builder_.Delay(function () {
                      return builder_.ReturnFrom(loop(lastCode)(lastResult));
                    }));
                  });
                }();
              });
            });
          }(singleton$2);
        };
      };

      return loop("")([false, new BindingResult([]), emptyProg]);
    });
  }

  _createClass(CheckingService, [{
    key: "TypeCheck",
    value: function (code) {
      return this.agent.postAndAsyncReply(function (ch) {
        return new CheckingMessage("TypeCheck", [code, ch]);
      });
    }
  }, {
    key: "IsWellTyped",
    value: function (code) {
      return this.agent.postAndAsyncReply(function (ch) {
        return new CheckingMessage("IsWellTyped", [code, ch]);
      });
    }
  }, {
    key: "errorsToLineCol",
    value: function (code, errors) {
      var lengths = map$4(function (l) {
        return l.length;
      }, toList(code.split("\n")));
      return errors.map(function (e) {
        return new _Error(e.Number, e.Message, rangeToLoc(lengths, e.Range));
      });
    }
  }, {
    key: "typeCheck",
    value: function (code) {
      var _this4 = this;

      return function (builder_) {
        return builder_.Delay(function () {
          return builder_.Bind(Async_AwaitFuture_Static(_this4.globals), function (_arg2) {
            return builder_.TryWith(builder_.Delay(function () {
              var patternInput = parseProgram(code);
              return builder_.Bind(Async_AwaitFuture_Static(_this4.bindingContext), function (_arg3) {
                var patternInput_1 = bindProgram(_arg3, patternInput[0]);
                return builder_.Bind(typeCheckProgram(_arg2, patternInput_1[1], patternInput_1[0]), function () {
                  var typeErrors = collectTypeErrors(patternInput_1[0]);
                  Log.trace("service", "Type checking completed");

                  var errors = function () {
                    var errors = patternInput[1].concat(typeErrors);
                    return _this4.errorsToLineCol(code, errors);
                  }();

                  return builder_.Return([patternInput[0], patternInput_1[1], errors]);
                });
              });
            }), function (_arg5) {
              Log.exn("service", "Type checking failed: %O", _arg5);
              return builder_.Return();
            });
          });
        });
      }(singleton$2);
    }
  }, {
    key: "ErrorsReported",
    get: function () {
      return this.errorsReported.Publish;
    }
  }]);

  return CheckingService;
}();
setType("TheGamma.Services.CheckingService", CheckingService);
var PreviewService = function () {
  _createClass(PreviewService, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Services.PreviewService",
        properties: {
          ZoneHeight: "number",
          ZoneSizeChanged: Interface("Microsoft.FSharp.Control.IEvent")
        }
      };
    }
  }]);

  function PreviewService(checker, globals, ed, livePreviews) {
    var _this5 = this;

    _classCallCheck(this, PreviewService);

    this.checker = checker;
    this.globals = globals;
    this.ed = ed;
    this.livePreviews = livePreviews;
    this.zoneSizeChanged = new Event$2();
    this.currentZone = null;
    this.zoneHeight = 0;
    this.tree = {};
    this.container = document.createElement("div");
    this.lastCode = "";
    this.lastMapper = new LocationMapper("");
    this.changingEditor = false;

    var trigger = function (ed_1) {
      return _this5.createLivePreview(ed_1);
    }(this.ed);

    this.ed.onDidChangeCursorPosition(function (ce) {
      if (!_this5.changingEditor) {
        var code = _this5.ed.getModel().getValue(1, false);

        Log.trace("live", "Cursor position changed: code <> lastCode = %s", code !== _this5.lastCode);

        (function (arg00) {
          startImmediate(arg00);
        })(function (builder_) {
          return builder_.Delay(function () {
            return builder_.Bind(_this5.getUpdateEventAfterChange(), function (_arg6) {
              trigger(_arg6);
              return builder_.Zero();
            });
          });
        }(singleton$2));
      }
    });
  }

  _createClass(PreviewService, [{
    key: "removeZone",
    value: function () {
      var _this6 = this;

      {
        var matchValue = this.currentZone;

        if (matchValue == null) {} else {
          (function () {
            var id = matchValue[0];

            _this6.ed.changeViewZones(function (accessor) {
              accessor.removeZone(id);
            });
          })();
        }
      }
      this.currentZone = null;
      this.zoneSizeChanged.Trigger();
    }
  }, {
    key: "createAndAddZone",
    value: function (endLine) {
      var _this7 = this;

      var zoneId = -1;
      var zone = {};
      var node$$1 = document.createElement('div');
      node$$1.style.width = "1000px";
      node$$1.style.height = "1000px";
      this.container = document.createElement('div');
      this.tree = {};
      node$$1.appendChild(this.container);
      this.ed.changeViewZones(function (accessor) {
        {
          var matchValue = _this7.currentZone;

          if (matchValue != null) {
            var id = matchValue[0];
            accessor.removeZone(id);
          }
        }
        zone.afterLineNumber = endLine;
        zone.heightInPx = 1;
        zone.domNode = node$$1;
        _this7.zoneHeight = 1;
        zoneId = accessor.addZone(zone);
        _this7.currentZone = [zoneId, zone];
      });
    }
  }, {
    key: "updateZones",
    value: function (trigger, liveState) {
      var _this8 = this;

      var dom = function () {
        var $var110 = liveState.CurrentPreview;

        if ($var110 != null) {
          return function (p) {
            return p.Render(trigger)(liveState);
          }($var110);
        } else {
          return $var110;
        }
      }();

      if (dom != null) {
        (function () {
          if (function () {
            return _this8.currentZone == null;
          }()) {
            var endLine = dom.Line;

            _this8.createAndAddZone(endLine);
          }

          var patternInput = _this8.currentZone;
          var newTree = renderVirtual(dom.Preview);
          var patches = diff(_this8.tree, newTree);
          _this8.container = patch(_this8.container, patches);
          _this8.tree = newTree;

          var waitForActualHeight = function waitForActualHeight(n) {
            return function (builder_) {
              return builder_.Delay(function () {
                var newHeight = _this8.container.clientHeight;

                if (n === 10 ? true : newHeight !== 0) {
                  return builder_.Return(newHeight);
                } else {
                  return builder_.Bind(sleep(n * n), function () {
                    return builder_.ReturnFrom(waitForActualHeight(n + 1));
                  });
                }
              });
            }(singleton$2);
          };

          (function (arg00) {
            startImmediate(arg00);
          })(function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(waitForActualHeight(1), function (_arg2) {
                Log.trace("live", "Old height: %s, New height: %s", _this8.zoneHeight, _arg2);

                if (_this8.zoneHeight !== _arg2 ? true : patternInput[1].afterLineNumber !== dom.Line) {
                  patternInput[1].afterLineNumber = dom.Line;
                  patternInput[1].heightInPx = _arg2;
                  _this8.zoneHeight = _arg2;

                  _this8.ed.changeViewZones(function (accessor) {
                    accessor.layoutZone(patternInput[0]);
                  });

                  _this8.zoneSizeChanged.Trigger();

                  return builder_.Zero();
                } else {
                  return builder_.Zero();
                }
              });
            });
          }(singleton$2));
        })();
      } else {
        this.removeZone();
      }
    }
  }, {
    key: "getUpdateEventAfterChange",
    value: function () {
      var _this9 = this;

      return function (builder_) {
        return builder_.Delay(function () {
          var code = _this9.ed.getModel().getValue(1, false);

          var position = _this9.ed.getPosition();

          if (code !== _this9.lastCode) {
            var _ret3 = function () {
              _this9.lastCode = code;
              _this9.lastMapper = new LocationMapper(code);

              var loc = _this9.lastMapper.LineColToAbsolute(~~position.lineNumber, ~~position.column);

              return {
                v: builder_.Bind(_this9.checker.TypeCheck(code), function (_arg3) {
                  return builder_.Return(new LiveEvent("UpdateSource", [code, loc, _arg3[2], _this9.lastMapper]));
                })
              };
            }();

            if ((typeof _ret3 === "undefined" ? "undefined" : _typeof$2(_ret3)) === "object") return _ret3.v;
          } else {
            var _loc = _this9.lastMapper.LineColToAbsolute(~~position.lineNumber, ~~position.column);

            return builder_.Return(new LiveEvent("UpdateLocation", [_loc]));
          }
        });
      }(singleton$2);
    }
  }, {
    key: "createLivePreview",
    value: function (ed) {
      var _this10 = this;

      var liveEvent = new Event$2();

      var noState = function () {
        var $var111 = _this10;
        return _defineProperty({}, _Symbol.reflection, {
          "interfaces": ["TheGamma.Live.Common.CustomLiveState"]
        });
      }();

      var liveState = function () {
        var Mapper = new LocationMapper("");
        var Location = 0;
        var Program$$2 = new Program$$1(node(new _Range(0, 0), new List$2()));
        return new LiveState(new List$2(), "", Program$$2, Mapper, Location, null, noState);
      }();

      var applyEvent = function applyEvent(evt) {
        var liveState_1 = updateLiveState(liveState, evt);
        var newState = liveState_1.CurrentPreview == null ? null : liveState_1.CurrentPreview.Update(function (arg00) {
          liveEvent.Trigger(arg00);
        })(liveState_1)(evt);
        var matchValue = [newState, evt];

        var _target1 = function _target1() {
          Log.trace("live", "Searching for available previews");
          var state = tryPick(function (lp) {
            var state = function () {
              var CurrentPreview = lp;
              return new LiveState(liveState_1.Globals, liveState_1.Code, liveState_1.Program, liveState_1.Mapper, liveState_1.Location, liveState_1.Selection, lp.InitialState, CurrentPreview);
            }();

            return lp.Update(function (arg00) {
              liveEvent.Trigger(arg00);
            })(state)(evt);
          }, _this10.livePreviews);

          if (state != null) {
            return state;
          } else {
            var CurrentPreview = null;
            return new LiveState(liveState_1.Globals, liveState_1.Code, liveState_1.Program, liveState_1.Mapper, liveState_1.Location, liveState_1.Selection, noState, CurrentPreview);
          }
        };

        if (matchValue[0] != null) {
          var newState_1 = matchValue[0];
          return newState_1;
        } else {
          if (matchValue[1].Case === "UpdateSource") {
            return _target1();
          } else {
            if (matchValue[1].Case === "UpdateLocation") {
              return _target1();
            } else {
              var CurrentPreview = null;
              return new LiveState(liveState_1.Globals, liveState_1.Code, liveState_1.Program, liveState_1.Mapper, liveState_1.Location, liveState_1.Selection, noState, CurrentPreview);
            }
          }
        }
      };

      add$6(function (evt) {
        try {
          Log.trace("live", "Updating state %O with event %O", liveState, evt);
          var oldState = liveState;
          liveState = applyEvent(evt);

          if ((evt.Case === "UpdateSource" ? false : true) ? oldState.Code !== liveState.Code : false) {
            _this10.changingEditor = true;
            ed.getModel().setValue(liveState.Code);
          }

          {
            var matchValue = liveState.Selection;

            if (matchValue != null) {
              _this10.changingEditor = true;
              var mrng = {};
              mrng.startColumn = matchValue.StartColumn;
              mrng.startLineNumber = matchValue.StartLineNumber;
              mrng.endColumn = matchValue.EndColumn;
              mrng.endLineNumber = matchValue.EndLineNumber;
              ed.setSelection(mrng);
              {
                var Selection = null;
                liveState = new LiveState(liveState.Globals, liveState.Code, liveState.Program, liveState.Mapper, liveState.Location, Selection, liveState.State, liveState.CurrentPreview);
              }
            }
          }

          if (_this10.changingEditor === true) {
            _this10.changingEditor = false;

            (function (arg00) {
              startImmediate(arg00);
            })(function (builder_) {
              return builder_.Delay(function () {
                Log.trace("live", "Editor changed. Getting after change event...");
                return builder_.Bind(_this10.getUpdateEventAfterChange(), function (_arg4) {
                  Log.trace("live", "Editor changed. Updating state %O with event %O", liveState, _arg4);
                  liveState = applyEvent(_arg4);
                  Log.trace("live", "Editor changed. New state %O", liveState);
                  {
                    var trigger = function trigger(arg00) {
                      liveEvent.Trigger(arg00);
                    };

                    _this10.updateZones(trigger, liveState);
                  }
                  return builder_.Zero();
                });
              });
            }(singleton$2));
          } else {
            var trigger = function trigger(arg00) {
              liveEvent.Trigger(arg00);
            };

            _this10.updateZones(trigger, liveState);
          }
        } catch (e) {
          Log.exn("live", "Error when updating state %O with event %O: %O", liveState, evt, e);
        }
      }, liveEvent.Publish);

      (function (arg00) {
        startImmediate(arg00);
      })(function (builder_) {
        return builder_.Delay(function () {
          return builder_.Bind(Async_AwaitFuture_Static(_this10.globals), function (_arg5) {
            liveEvent.Trigger(new LiveEvent("InitializeGlobals", [_arg5]));
            return builder_.Zero();
          });
        });
      }(singleton$2));

      return function (arg00) {
        liveEvent.Trigger(arg00);
      };
    }
  }, {
    key: "ZoneSizeChanged",
    get: function () {
      return this.zoneSizeChanged.Publish;
    }
  }, {
    key: "ZoneHeight",
    get: function () {
      return !equals(this.currentZone) ? this.zoneHeight : 0;
    }
  }]);

  return PreviewService;
}();
setType("TheGamma.Services.PreviewService", PreviewService);

var CompilationContext = function () {
  function CompilationContext(lineLengths, globals) {
    _classCallCheck(this, CompilationContext);

    this.LineLengths = lineLengths;
    this.Globals = globals;
  }

  _createClass(CompilationContext, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.CodeGenerator.CompilationContext",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          LineLengths: makeGeneric(List$2, {
            T: "number"
          }),
          Globals: makeGeneric(FMap, {
            Key: "string",
            Value: Expression
          })
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return CompilationContext;
}();
setType("TheGamma.CodeGenerator.CompilationContext", CompilationContext);
function offsetToLocation$1(lines, offs, lengths) {
  var _target1 = function _target1() {
    return lengths.tail == null ? new Position(lines, offs) : offsetToLocation$1(lines + 1, offs - lengths.head - 1, lengths.tail);
  };

  if (lengths.tail != null) {
    if (offs <= lengths.head) {
      var l = lengths.head;
      var lengths_1 = lengths.tail;
      return new Position(lines, offs);
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
function rangeToLoc$1(ctx, rng) {
  return new SourceLocation(offsetToLocation$1(1, rng.Start, ctx.LineLengths), offsetToLocation$1(1, rng.Start, ctx.LineLengths));
}
function getEmitterAndParams(name, typ) {
  var matchValue = reduceType(typ);

  if (matchValue.Case === "Object") {
    return pick(function (_arg1) {
      var _target1 = function _target1() {
        var _target1 = function _target1() {
          return null;
        };

        if (_arg1.Case === "Property") {
          if (_arg1.Fields[0] === name) {
            var e = _arg1.Fields[3];
            var n = _arg1.Fields[0];
            return [e, new List$2()];
          } else {
            return _target1();
          }
        } else {
          return _target1();
        }
      };

      if (_arg1.Case === "Method") {
        if (_arg1.Fields[0] === name) {
          var args = _arg1.Fields[1];
          var e = _arg1.Fields[4];
          var n = _arg1.Fields[0];
          return [e, args];
        } else {
          return _target1();
        }
      } else {
        return _target1();
      }
    }, matchValue.Fields[0].Members);
  } else {
    Log.exn("codegen", "getEmitterAndParams: Not an object %O", matchValue);
    throw new Error("getEmitterAndParams: Not an object");
  }
}
function compileExpression(ctx, expr) {
  var _target9 = function _target9() {
    return expr.Node.Case === "Variable" ? new Expression("IdentifierExpression", [expr.Node.Fields[0].Node.Name, rangeToLoc$1(ctx, expr.Node.Fields[0].Range)]) : expr.Node.Case === "List" ? function () {
      var es = map$4(function (expr_1) {
        return compileExpression(ctx, expr_1);
      }, expr.Node.Fields[0]);
      return new Expression("ArrayExpression", [es, rangeToLoc$1(ctx, expr.Range)]);
    }() : expr.Node.Case === "Function" ? function () {
      var _var = new Expression("IdentifierExpression", [expr.Node.Fields[0].Node.Name, rangeToLoc$1(ctx, expr.Node.Fields[0].Range)]);

      var ce = compileExpression(function () {
        var Globals = add$2(expr.Node.Fields[0].Node.Name, _var, ctx.Globals);
        return new CompilationContext(ctx.LineLengths, Globals);
      }(), expr.Node.Fields[1]);
      var body = new Statement("BlockStatement", [ofArray([new Statement("ReturnStatement", [ce, rangeToLoc$1(ctx, expr.Node.Fields[1].Range)])]), rangeToLoc$1(ctx, expr.Node.Fields[1].Range)]);
      return new Expression("FunctionExpression", [null, ofArray([new Pattern("IdentifierPattern", [expr.Node.Fields[0].Node.Name, rangeToLoc$1(ctx, expr.Node.Fields[0].Range)])]), body, false, false, rangeToLoc$1(ctx, expr.Range)]);
    }() : expr.Node.Case === "Empty" ? function () {
      console.log("compileExpression: %O", expr.Node);
      throw new Error("!");
    }() : function () {
      throw new Error("C:\\Tomas\\Public\\thegamma\\thegamma-script\\src\\thegamma\\codegen/codegen.fs", 37, 8);
    }();
  };

  if (expr.Node.Case === "Binary") {
    if (expr.Node.Fields[1].Node.Case === "Power") {
      var l = expr.Node.Fields[0];
      var r = expr.Node.Fields[2];
      {
        var l_1 = compileExpression(ctx, l);
        var r_1 = compileExpression(ctx, r);
        var rng = rangeToLoc$1(ctx, expr.Range);
        var pow = new Expression("MemberExpression", [new Expression("IdentifierExpression", ["pow", rng]), new Expression("IdentifierExpression", ["Math", rng]), false, rng]);
        return new Expression("CallExpression", [pow, ofArray([l_1, r_1]), rangeToLoc$1(ctx, expr.Range)]);
      }
    } else {
      var _l = expr.Node.Fields[0];
      var op = expr.Node.Fields[1];
      var _r = expr.Node.Fields[2];
      {
        var _l_ = compileExpression(ctx, _l);

        var _r_ = compileExpression(ctx, _r);

        var op_1 = op.Node.Case === "Plus" ? new BinaryOperator("BinaryPlus", []) : op.Node.Case === "Minus" ? new BinaryOperator("BinaryMinus", []) : op.Node.Case === "Multiply" ? new BinaryOperator("BinaryMultiply", []) : op.Node.Case === "Divide" ? new BinaryOperator("BinaryDivide", []) : op.Node.Case === "GreaterThan" ? new BinaryOperator("BinaryGreater", []) : op.Node.Case === "LessThan" ? new BinaryOperator("BinaryLess", []) : op.Node.Case === "GreaterThanOrEqual" ? new BinaryOperator("BinaryGreaterOrEqual", []) : op.Node.Case === "LessThanOrEqual" ? new BinaryOperator("BinaryLessOrEqual", []) : op.Node.Case === "Power" ? function () {
          throw new Error("compileExpression: Power is not a binary operation");
        }() : new BinaryOperator("BinaryEqualStrict", []);
        return new Expression("BinaryExpression", [op_1, _l_, _r_, rangeToLoc$1(ctx, expr.Range)]);
      }
    }
  } else {
    if (expr.Node.Case === "Call") {
      if (expr.Node.Fields[0] == null) {
        var args = expr.Node.Fields[2];
        var n = expr.Node.Fields[1];
        throw new Error("compileExpression: Call without instance is not supported");
      } else {
        var _ret = function () {
          var args = expr.Node.Fields[2];
          var inst = expr.Node.Fields[0];
          var n = expr.Node.Fields[1];
          {
            var _ret2 = function () {
              var compiledArgs = map$4(function (a) {
                return [a.Name, compileExpression(ctx, a.Value)];
              }, args.Node);

              var positionArgs = _Array$from(map$5(function (tuple) {
                return tuple[1];
              }, takeWhile(function (tupledArg) {
                return function () {
                  return tupledArg[0] == null;
                }();
              }, compiledArgs)));

              var namedArgs = new _Map(choose$1(function (_arg1) {
                return _arg1[0] != null ? function () {
                  var n_1 = _arg1[0];
                  return [n_1.Node.Name, _arg1[1]];
                }() : null;
              }, compiledArgs));
              var patternInput = getEmitterAndParams(n.Node.Name, inst.Entity.Type);
              var inst_1 = compileExpression(ctx, inst);
              var pars = mapIndexed$$1(function (i, tupledArg) {
                return i < positionArgs.length ? positionArgs[i] : namedArgs.has(tupledArg[0]) ? namedArgs.get(tupledArg[0]) : new Expression("NullLiteral", [rangeToLoc$1(ctx, args.Range)]);
              }, patternInput[1]);
              return {
                v: {
                  v: patternInput[0].Emit([inst_1, pars])
                }
              };
            }();

            if ((typeof _ret2 === "undefined" ? "undefined" : _typeof$2(_ret2)) === "object") return _ret2.v;
          }
        }();

        if ((typeof _ret === "undefined" ? "undefined" : _typeof$2(_ret)) === "object") return _ret.v;
      }
    } else {
      if (expr.Node.Case === "Property") {
        var _inst = expr.Node.Fields[0];
        var _n = expr.Node.Fields[1];
        {
          var patternInput = getEmitterAndParams(_n.Node.Name, _inst.Entity.Type);
          var inst_1 = compileExpression(ctx, _inst);
          return patternInput[0].Emit([inst_1, new List$2()]);
        }
      } else {
        if (expr.Node.Case === "Number") {
          var _n2 = expr.Node.Fields[0];
          return new Expression("NumericLiteral", [_n2, rangeToLoc$1(ctx, expr.Range)]);
        } else {
          if (expr.Node.Case === "String") {
            var s = expr.Node.Fields[0];
            return new Expression("StringLiteral", [s, rangeToLoc$1(ctx, expr.Range)]);
          } else {
            if (expr.Node.Case === "Boolean") {
              var b = expr.Node.Fields[0];
              return new Expression("BooleanLiteral", [b, rangeToLoc$1(ctx, expr.Range)]);
            } else {
              if (expr.Node.Case === "Variable") {
                if (ctx.Globals.has(expr.Node.Fields[0].Node.Name)) {
                  var _n3 = expr.Node.Fields[0];
                  return ctx.Globals.get(_n3.Node.Name);
                } else {
                  return _target9();
                }
              } else {
                return _target9();
              }
            }
          }
        }
      }
    }
  }
}
function compileCommand(ctx, cmd) {
  return cmd.Node.Case === "Expr" ? function () {
    var e = compileExpression(ctx, cmd.Node.Fields[0]);
    return new Statement("ExpressionStatement", [e, rangeToLoc$1(ctx, cmd.Range)]);
  }() : function () {
    var e = compileExpression(ctx, cmd.Node.Fields[1]);
    var name = new Pattern("IdentifierPattern", [cmd.Node.Fields[0].Node.Name, rangeToLoc$1(ctx, cmd.Node.Fields[0].Range)]);
    var decl = new VariableDeclarator("VariableDeclarator", [name, e, rangeToLoc$1(ctx, cmd.Range)]);
    return new Statement("VariableDeclaration", [new VariableDeclarationKind("Var", []), ofArray([decl]), rangeToLoc$1(ctx, cmd.Range)]);
  }();
}
function compileProgram(ctx, prog) {
  var body = map$4(function (cmd) {
    return compileCommand(ctx, cmd);
  }, prog.Body.Node);
  return new Program$1(rangeToLoc$1(ctx, prog.Body.Range), body);
}
var BabelOptions$1 = function () {
  function BabelOptions(presets) {
    _classCallCheck(this, BabelOptions);

    this.presets = presets;
  }

  _createClass(BabelOptions, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.CodeGenerator.BabelOptions",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          presets: FArray("string")
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return BabelOptions;
}();
setType("TheGamma.CodeGenerator.BabelOptions", BabelOptions$1);
var BabelResult$1 = function () {
  function BabelResult(code) {
    _classCallCheck(this, BabelResult);

    this.code = code;
  }

  _createClass(BabelResult, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.CodeGenerator.BabelResult",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          code: "string"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return BabelResult;
}();
setType("TheGamma.CodeGenerator.BabelResult", BabelResult$1);
function compile(globals, text, prog) {
  return function (builder_) {
    return builder_.Delay(function () {
      return builder_.TryWith(builder_.Delay(function () {
        return builder_.Bind(Async_AwaitFuture_Static(globals), function (_arg1) {
          var globals_1 = create$4(choose$$1(function (_arg2) {
            var _target1 = function _target1() {
              return null;
            };

            if (_arg2.Kind.Case === "GlobalValue") {
              if (_arg2.Kind.Fields[1] != null) {
                var e = _arg2.Kind.Fields[1];
                var n = _arg2.Kind.Fields[0];
                return [n.Name, e];
              } else {
                return _target1();
              }
            } else {
              return _target1();
            }
          }, _arg1), new GenericComparer(function (x, y) {
            return x < y ? -1 : x > y ? 1 : 0;
          }));
          var ctx = new CompilationContext(toList(delay(function () {
            return map$5(function (l) {
              return l.length;
            }, text.split("\n"));
          })), globals_1);
          var res = compileProgram(ctx, prog);
          var code = Babel.transformFromAst(Serializer.serializeProgram(res), text, new BabelOptions$1(["es2015"]));
          Log.trace("codegen", "Evaluating: %O", code);
          return builder_.Return(code.code);
        });
      }), function (_arg3) {
        Log.exn("codegen", "Evaluating code failed: %O", _arg3);
        return builder_.Return("");
      });
    });
  }(singleton$2);
}

var Aggregation = function () {
  function Aggregation(caseName, fields) {
    _classCallCheck(this, Aggregation);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Aggregation, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.TypeProviders.Pivot.Aggregation",
        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
        cases: {
          ConcatValues: ["string"],
          CountAll: [],
          CountDistinct: ["string"],
          GroupKey: [],
          Mean: ["string"],
          ReturnUnique: ["string"],
          Sum: ["string"]
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareUnions(this, other);
    }
  }]);

  return Aggregation;
}();
setType("TheGamma.TypeProviders.Pivot.Aggregation", Aggregation);
var SortDirection = function () {
  function SortDirection(caseName, fields) {
    _classCallCheck(this, SortDirection);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(SortDirection, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.TypeProviders.Pivot.SortDirection",
        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
        cases: {
          Ascending: [],
          Descending: []
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareUnions(this, other);
    }
  }]);

  return SortDirection;
}();
setType("TheGamma.TypeProviders.Pivot.SortDirection", SortDirection);
var Paging = function () {
  function Paging(caseName, fields) {
    _classCallCheck(this, Paging);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Paging, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.TypeProviders.Pivot.Paging",
        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
        cases: {
          Skip: ["string"],
          Take: ["string"]
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareUnions(this, other);
    }
  }]);

  return Paging;
}();
setType("TheGamma.TypeProviders.Pivot.Paging", Paging);
var Transformation = function () {
  function Transformation(caseName, fields) {
    _classCallCheck(this, Transformation);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(Transformation, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.TypeProviders.Pivot.Transformation",
        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
        cases: {
          DropColumns: [makeGeneric(List$2, {
            T: "string"
          })],
          Empty: [],
          FilterBy: [makeGeneric(List$2, {
            T: Tuple(["string", "boolean", "string"])
          })],
          GetRange: ["string"],
          GetSeries: ["string", "string"],
          GetTheData: [],
          GroupBy: [makeGeneric(List$2, {
            T: "string"
          }), makeGeneric(List$2, {
            T: Aggregation
          })],
          Metadata: [],
          Paging: [makeGeneric(List$2, {
            T: Paging
          })],
          SortBy: [makeGeneric(List$2, {
            T: Tuple(["string", SortDirection])
          })]
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareUnions(this, other);
    }
  }]);

  return Transformation;
}();
setType("TheGamma.TypeProviders.Pivot.Transformation", Transformation);
var Field = function () {
  function Field(name, type) {
    _classCallCheck(this, Field);

    this.Name = name;
    this.Type = type;
  }

  _createClass(Field, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.TypeProviders.Pivot.Field",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          Name: "string",
          Type: PrimitiveType
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return Field;
}();
setType("TheGamma.TypeProviders.Pivot.Field", Field);
var Transform = function (__exports) {
  var formatAgg = function formatAgg(_arg1) {
    return _arg1.Case === "CountAll" ? "count-all" : _arg1.Case === "CountDistinct" ? "count-dist " + escapeIdent(_arg1.Fields[0]) : _arg1.Case === "ReturnUnique" ? "unique " + escapeIdent(_arg1.Fields[0]) : _arg1.Case === "ConcatValues" ? "concat-vals " + escapeIdent(_arg1.Fields[0]) : _arg1.Case === "Sum" ? "sum " + escapeIdent(_arg1.Fields[0]) : _arg1.Case === "Mean" ? "mean " + escapeIdent(_arg1.Fields[0]) : "key";
  };

  var toUrl = __exports.toUrl = function (transforms) {
    return join("$", map$4(function (tupledArg) {
      return tupledArg[1].tail == null ? tupledArg[0] : tupledArg[0] + "(" + join(",", tupledArg[1]) + ")";
    }, concat$$1(toList(delay(function () {
      return map$5(function (t) {
        return t.Case === "Metadata" ? ofArray([["metadata", new List$2()]]) : t.Case === "GetRange" ? ofArray([["range", ofArray([t.Fields[0]])]]) : t.Case === "FilterBy" ? ofArray([["filter", map$4(function (tupledArg) {
          return tupledArg[0] + (tupledArg[1] ? " eq " : " neq ") + tupledArg[2];
        }, t.Fields[0])]]) : t.Case === "DropColumns" ? ofArray([["drop", t.Fields[0]]]) : t.Case === "SortBy" ? ofArray([["sort", map$4(function (tupledArg) {
          return tupledArg[0] + (tupledArg[1].Equals(new SortDirection("Ascending", [])) ? " asc" : " desc");
        }, t.Fields[0])]]) : t.Case === "GroupBy" ? ofArray([["groupby", append$$1(map$4(function (fld) {
          return "by " + escapeIdent(fld);
        }, t.Fields[0]), map$4(function (_arg1) {
          return formatAgg(_arg1);
        }, t.Fields[1]))]]) : t.Case === "Paging" ? map$4(function (_arg1) {
          return _arg1.Case === "Skip" ? ["skip", ofArray([_arg1.Fields[0]])] : ["take", ofArray([_arg1.Fields[0]])];
        }, t.Fields[0]) : t.Case === "GetSeries" ? ofArray([["series", ofArray([t.Fields[0], t.Fields[1]])]]) : t.Case === "Empty" ? new List$2() : new List$2();
      }, transforms);
    })))));
  };

  var singleTransformFields = __exports.singleTransformFields = function (fields, _arg1) {
    return _arg1.Case === "Metadata" ? function () {
      throw new Error("Metadata should not appear in normal queries");
    }() : _arg1.Case === "GetRange" ? function () {
      throw new Error("GetRange should not appear in normal queries");
    }() : _arg1.Case === "GetTheData" ? fields : _arg1.Case === "SortBy" ? fields : _arg1.Case === "Paging" ? fields : _arg1.Case === "FilterBy" ? fields : _arg1.Case === "GetSeries" ? ofArray([find(function (f) {
      return f.Name === _arg1.Fields[0];
    }, fields), find(function (f) {
      return f.Name === _arg1.Fields[1];
    }, fields)]) : _arg1.Case === "DropColumns" ? function () {
      var dropped = create$3(_arg1.Fields[0], new GenericComparer(function (x, y) {
        return x < y ? -1 : x > y ? 1 : 0;
      }));
      return filter$1(function (f) {
        return !dropped.has(f.Name);
      }, fields);
    }() : _arg1.Case === "GroupBy" ? function () {
      var oldFields = new _Map(toList(delay(function () {
        return map$5(function (f) {
          return [f.Name, f];
        }, fields);
      })));
      return collect$$1(function (_arg2) {
        var _target1 = function _target1(fld) {
          return ofArray([oldFields.get(fld)]);
        };

        if (_arg2.Case === "ReturnUnique") {
          return _target1(_arg2.Fields[0]);
        } else {
          if (_arg2.Case === "ConcatValues") {
            return _target1(_arg2.Fields[0]);
          } else {
            if (_arg2.Case === "Sum") {
              return _target1(_arg2.Fields[0]);
            } else {
              if (_arg2.Case === "Mean") {
                return ofArray([oldFields.get(_arg2.Fields[0])]);
              } else {
                if (_arg2.Case === "CountAll") {
                  return ofArray([new Field("count", new PrimitiveType("Number", []))]);
                } else {
                  if (_arg2.Case === "CountDistinct") {
                    return ofArray([new Field(oldFields.get(_arg2.Fields[0]).Name, new PrimitiveType("Number", []))]);
                  } else {
                    return map$4(function (f) {
                      return oldFields.get(f);
                    }, _arg1.Fields[0]);
                  }
                }
              }
            }
          }
        }
      }, _arg1.Fields[1]);
    }() : fields;
  };

  var transformFields = __exports.transformFields = function (fields, tfs) {
    return toList(function () {
      var state = toList(fields);
      return function (list) {
        return fold$1(function (fields_1, _arg1) {
          return singleTransformFields(fields_1, _arg1);
        }, state, list);
      };
    }()(tfs));
  };

  return __exports;
}({});



function makeObjectType(members) {
  return new Type("Object", [new ObjectType(_Array$from(members))]);
}
function isNumeric(fld) {
  return fld.Equals(new PrimitiveType("Number", []));
}
function isConcatenable(fld) {
  return fld.Equals(new PrimitiveType("String", []));
}
function ident(s) {
  return new Expression("IdentifierExpression", [s, null]);
}
function str(v) {
  return new Expression("StringLiteral", [v, null]);
}
function bool(v) {
  return new Expression("BooleanLiteral", [v, null]);
}
function arr(l) {
  return new Expression("ArrayExpression", [l, null]);
}
function op_Dynamic(e, s) {
  return new Expression("MemberExpression", [e, new Expression("IdentifierExpression", [s, null]), false, null]);
}
function op_DivideQmarkDivide(e, a) {
  return new Expression("MemberExpression", [e, a, true, null]);
}
function op_DivideAtDivide(e, args) {
  return new Expression("CallExpression", [e, args, null]);
}

function getTypeAndEmitter(_arg1) {
  return _arg1.Case === "Number" ? [new Type("Primitive", [new PrimitiveType("Number", [])]), function (e) {
    return op_DivideAtDivide(ident("Number"), ofArray([e]));
  }] : _arg1.Case === "Bool" ? [new Type("Primitive", [new PrimitiveType("Number", [])]), function (e) {
    return op_DivideAtDivide(ident("Boolean"), ofArray([e]));
  }] : _arg1.Case === "Unit" ? [new Type("Primitive", [new PrimitiveType("Unit", [])]), function (e) {
    return new Expression("NullLiteral", [null]);
  }] : [new Type("Primitive", [new PrimitiveType("String", [])]), function (x) {
    return x;
  }];
}
var propertyEmitter = new Emitter(function (tupledArg) {
  return tupledArg[0];
});
function makeMethodEmitter(callid, pars) {
  return new Emitter(function (tupledArg) {
    var args = arr(toList(delay(function () {
      return map$5(function (v) {
        return v;
      }, tupledArg[1]);
    })));
    return op_DivideAtDivide(op_Dynamic(tupledArg[0], "addCall"), ofArray([str(callid), args]));
  });
}
function makeDataEmitter(isPreview, isSeries, tfs) {
  return new Emitter(function (tupledArg) {
    return isSeries ? op_DivideAtDivide(op_Dynamic(ident("series"), "create"), ofArray([op_DivideAtDivide(op_Dynamic(tupledArg[0], "getData"), ofArray([str(Transform.toUrl(reverse$$1(tfs))), bool(isPreview)])), str("key"), str("value"), str("")])) : op_DivideAtDivide(op_Dynamic(ident("series"), "ordinal"), ofArray([op_DivideAtDivide(op_Dynamic(tupledArg[0], "getData"), ofArray([str(Transform.toUrl(reverse$$1(tfs))), bool(isPreview)])), str("key"), str("value"), str("")]));
  });
}
var Context$2 = function () {
  function Context(root, lookupNamed, inputFields, fields) {
    _classCallCheck(this, Context);

    this.Root = root;
    this.LookupNamed = lookupNamed;
    this.InputFields = inputFields;
    this.Fields = fields;
  }

  _createClass(Context, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.TypeProviders.Pivot.Context",
        interfaces: ["FSharpRecord"],
        properties: {
          Root: "string",
          LookupNamed: "function",
          InputFields: makeGeneric(List$2, {
            T: Field
          }),
          Fields: makeGeneric(List$2, {
            T: Field
          })
        }
      };
    }
  }]);

  return Context;
}();
setType("TheGamma.TypeProviders.Pivot.Context", Context$2);
function makeProperty(ctx, name, tfs) {
  var meta1 = new Metadata("http://schema.thegamma.net/pivot", "Transformations", tfs);
  var meta2 = new Metadata("http://schema.thegamma.net/pivot", "Fields", ctx.Fields);
  return new Member("Property", [name, makePivotType(ctx, tfs), ofArray([meta1, meta2]), propertyEmitter]);
}
function makeMethod(ctx, name, tfs, callid, args) {
  var meta1 = new Metadata("http://schema.thegamma.net/pivot", "Transformations", tfs);
  var meta2 = new Metadata("http://schema.thegamma.net/pivot", "Fields", ctx.Fields);
  return new Member("Method", [name, toList(delay(function () {
    return collect$1(function (matchValue) {
      return singleton$1([matchValue[0], false, new Type("Primitive", [matchValue[1]])]);
    }, args);
  })), makePivotType(ctx, tfs), ofArray([meta1, meta2]), makeMethodEmitter(callid, args)]);
}
function makeDataMember(ctx, name, isPreview, tfs) {
  var fields = Transform.transformFields(ctx.InputFields, reverse$$1(tfs));
  Log.trace("providers", "Make data member using transform %O. Got fields: %O", tfs, fields);

  var patternInput = function () {
    var _target1 = function _target1() {
      var membs = _Array$from(fields).map(function (fld) {
        var patternInput = getTypeAndEmitter(fld.Type);
        var emitter = new Emitter(function (tupledArg) {
          return patternInput[1](op_DivideQmarkDivide(tupledArg[0], str(fld.Name)));
        });
        return new Member("Property", [fld.Name, patternInput[0], ofArray([ProviderHelpers.docMeta(new Documentation("Text", [""]))]), emitter]);
      });

      var recTyp = new Type("Object", [new ObjectType(membs)]);
      return [ctx.LookupNamed("series")(ofArray([new Type("Primitive", [new PrimitiveType("Number", [])]), recTyp])), false];
    };

    if (tfs.tail != null) {
      if (tfs.head.Case === "GetSeries") {
        var _target1_1 = function _target1_1() {
          throw new Error("makeDataMember: Series should have key and value");
        };

        if (fields.tail != null) {
          if (fields.tail.tail != null) {
            if (fields.tail.tail.tail == null) {
              var kf = fields.head;
              var vf = fields.tail.head;
              return [ctx.LookupNamed("series")(ofArray([new Type("Primitive", [kf.Type]), new Type("Primitive", [vf.Type])])), true];
            } else {
              return _target1_1();
            }
          } else {
            return _target1_1();
          }
        } else {
          return _target1_1();
        }
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  }();

  var tfs_1 = patternInput[1] ? tfs : new List$2(new Transformation("GetTheData", []), tfs);
  var meta1 = new Metadata("http://schema.thegamma.net/pivot", "Transformations", tfs_1);
  var meta2 = new Metadata("http://schema.thegamma.net/pivot", "Fields", ctx.Fields);
  return new Member("Property", [name, patternInput[0], ofArray([meta1, meta2]), makeDataEmitter(isPreview, patternInput[1], tfs_1)]);
}
function handleGetSeriesRequest(ctx, rest, k, v) {
  var matchValue = [k, v];

  var _target2 = function _target2() {
    throw new Error("handleGetSeriesRequest: Should not happen");
  };

  if (matchValue[0] === "!") {
    if (matchValue[1] === "!") {
      return makeObjectType(toList(delay(function () {
        return map$5(function (field) {
          return makeProperty(ctx, "with key " + field.Name, new List$2(new Transformation("GetSeries", [field.Name, "!"]), rest));
        }, ctx.Fields);
      })));
    } else {
      return _target2();
    }
  } else {
    if (matchValue[1] === "!") {
      return makeObjectType(toList(delay(function () {
        return map$5(function (field) {
          return makeDataMember(ctx, "and value " + field.Name, false, new List$2(new Transformation("GetSeries", [matchValue[0], field.Name]), rest));
        }, ctx.Fields);
      })));
    } else {
      return _target2();
    }
  }
}
function handlePagingRequest(ctx, rest, pgid, ops) {
  var takeMemb = makeMethod(ctx, "take", ofArray([new Transformation("Empty", []), new Transformation("Paging", [reverse$$1(new List$2(new Paging("Take", [pgid + "-take"]), ops))])], rest), pgid + "-take", ofArray([["count", new PrimitiveType("Number", [])]]));
  var skipMemb = makeMethod(ctx, "skip", new List$2(new Transformation("Paging", [new List$2(new Paging("Skip", [pgid + "-skip"]), ops)]), rest), pgid + "-skip", ofArray([["count", new PrimitiveType("Number", [])]]));
  var thenMemb = makeProperty(ctx, "then", ofArray([new Transformation("Empty", []), new Transformation("Paging", [reverse$$1(ops)])], rest));
  return makeObjectType(function () {
    var _target2 = function _target2() {
      throw new Error("handlePagingRequest: Shold not happen");
    };

    if (ops.tail != null) {
      if (ops.head.Case === "Skip") {
        if (ops.tail.tail == null) {
          return ofArray([takeMemb, thenMemb]);
        } else {
          return _target2();
        }
      } else {
        return _target2();
      }
    } else {
      return ofArray([skipMemb, takeMemb, thenMemb]);
    }
  }());
}
function handleDropRequest(ctx, rest, dropped) {
  var droppedFields = create$3(dropped, new GenericComparer(function (x, y) {
    return x < y ? -1 : x > y ? 1 : 0;
  }));
  return makeObjectType(toList(delay(function () {
    return append$1(singleton$1(makeProperty(ctx, "then", ofArray([new Transformation("Empty", []), new Transformation("DropColumns", [dropped])], rest))), delay(function () {
      return collect$1(function (field) {
        return !droppedFields.has(field.Name) ? singleton$1(makeProperty(ctx, "drop " + field.Name, new List$2(new Transformation("DropColumns", [new List$2(field.Name, dropped)]), rest))) : empty();
      }, ctx.Fields);
    }));
  })));
}
function handleSortRequest(ctx, rest, keys) {
  var usedKeys = create$3(map$4(function (tuple) {
    return tuple[0];
  }, keys), new GenericComparer(function (x, y) {
    return x < y ? -1 : x > y ? 1 : 0;
  }));
  return makeObjectType(toList(delay(function () {
    return append$1(singleton$1(makeProperty(ctx, "then", ofArray([new Transformation("Empty", []), new Transformation("SortBy", [keys])], rest))), delay(function () {
      return collect$1(function (field) {
        return !usedKeys.has(field.Name) ? function () {
          var doc = fsFormat("Use the field '%s' as the next sorting keys")(function (x) {
            return x;
          })(field.Name);
          var prefix = keys.Equals(new List$2()) ? "by " : "and by ";
          return append$1(singleton$1(makeProperty(ctx, prefix + field.Name, new List$2(new Transformation("SortBy", [new List$2([field.Name, new SortDirection("Ascending", [])], keys)]), rest))), delay(function () {
            return singleton$1(makeProperty(ctx, prefix + field.Name + " descending", new List$2(new Transformation("SortBy", [new List$2([field.Name, new SortDirection("Descending", [])], keys)]), rest)));
          }));
        }() : empty();
      }, ctx.Fields);
    }));
  })));
}
function aggregationMembers(ctx, rest, keys, aggs) {
  var containsCountAll = exists$1(function () {
    var x = new Aggregation("CountAll", []);
    return function (y) {
      return x.Equals(y);
    };
  }(), aggs);

  var containsField = function containsField(fld) {
    return exists$1(function (_arg1) {
      var _target0 = function _target0(f) {
        return f === fld;
      };

      var _target1 = function _target1() {
        return false;
      };

      if (_arg1.Case === "ReturnUnique") {
        return _target0(_arg1.Fields[0]);
      } else {
        if (_arg1.Case === "ConcatValues") {
          return _target0(_arg1.Fields[0]);
        } else {
          if (_arg1.Case === "Sum") {
            return _target0(_arg1.Fields[0]);
          } else {
            if (_arg1.Case === "Mean") {
              return _target0(_arg1.Fields[0]);
            } else {
              if (_arg1.Case === "CountAll") {
                return _target1();
              } else {
                if (_arg1.Case === "GroupKey") {
                  return _target1();
                } else {
                  return _target0(_arg1.Fields[0]);
                }
              }
            }
          }
        }
      }
    }, aggs);
  };

  var makeAggMember = function makeAggMember(name) {
    return function (agg) {
      return makeProperty(ctx, name, new List$2(new Transformation("GroupBy", [keys, new List$2(agg, aggs)]), rest));
    };
  };

  return toList(delay(function () {
    return append$1(singleton$1(makeProperty(ctx, "then", ofArray([new Transformation("Empty", []), new Transformation("GroupBy", [keys, aggs])], rest))), delay(function () {
      return append$1(!containsCountAll ? singleton$1(makeAggMember("count all")(new Aggregation("CountAll", []))) : empty(), delay(function () {
        return collect$1(function (fld) {
          return !containsField(fld.Name) ? append$1(singleton$1(makeAggMember("count distinct " + fld.Name)(new Aggregation("CountDistinct", [fld.Name]))), delay(function () {
            return append$1(singleton$1(makeAggMember("return unique " + fld.Name)(new Aggregation("ReturnUnique", [fld.Name]))), delay(function () {
              return append$1(isConcatenable(fld.Type) ? singleton$1(makeAggMember("concatenate values of " + fld.Name)(new Aggregation("ConcatValues", [fld.Name]))) : empty(), delay(function () {
                return isNumeric(fld.Type) ? append$1(singleton$1(makeAggMember("average " + fld.Name)(new Aggregation("Mean", [fld.Name]))), delay(function () {
                  return singleton$1(makeAggMember("sum " + fld.Name)(new Aggregation("Sum", [fld.Name])));
                })) : empty();
              }));
            }));
          })) : empty();
        }, ctx.Fields);
      }));
    }));
  }));
}
function handleGroupAggRequest(ctx, rest, keys, aggs) {
  return makeObjectType(aggregationMembers(ctx, rest, keys, aggs));
}
function handleGroupRequest(ctx, rest, keys) {
  var prefix = keys.tail == null ? "by " : "and ";
  return makeObjectType(toList(delay(function () {
    return append$1(map$5(function (field) {
      return makeProperty(ctx, prefix + field.Name, new List$2(new Transformation("GroupBy", [new List$2(field.Name, keys), new List$2()]), rest));
    }, ctx.Fields), delay(function () {
      return !(keys.tail == null) ? aggregationMembers(ctx, rest, keys, ofArray([new Aggregation("GroupKey", [])])) : empty();
    }));
  })));
}
function handleFilterEqNeqRequest(ctx, rest, fld, eq, conds) {
  return function (builder_) {
    return builder_.Delay(function () {
      var tfs = conds.tail == null ? rest : new List$2(new Transformation("FilterBy", [conds]), rest);
      var url = ctx.Root + "?" + Transform.toUrl(reverse$$1(new List$2(new Transformation("GetRange", [fld]), tfs)));
      return builder_.Bind(Http.Request("GET", url), function (_arg2) {
        var options = JSON.parse(_arg2);
        return builder_.Return(makeObjectType(toList(delay(function () {
          return map$5(function (opt) {
            return makeProperty(ctx, opt, new List$2(new Transformation("FilterBy", [new List$2([fld, eq, opt], conds)]), rest));
          }, options);
        }))));
      });
    });
  }(singleton$2);
}
function handleFilterRequest(ctx, rest, conds) {
  var prefix = conds.tail == null ? "" : "and ";
  return makeObjectType(toList(delay(function () {
    return append$1(collect$1(function (field) {
      return append$1(singleton$1(makeProperty(ctx, prefix + field.Name + " is", new List$2(new Transformation("FilterBy", [new List$2([field.Name, true, "!"], conds)]), rest))), delay(function () {
        return singleton$1(makeProperty(ctx, prefix + field.Name + " is not", new List$2(new Transformation("FilterBy", [new List$2([field.Name, false, "!"], conds)]), rest)));
      }));
    }, ctx.Fields), delay(function () {
      return !(conds.tail == null) ? singleton$1(makeProperty(ctx, "then", ofArray([new Transformation("Empty", []), new Transformation("FilterBy", [conds])], rest))) : empty();
    }));
  })));
}
function makePivotTypeImmediate(ctx, tfs) {
  return function (builder_) {
    return builder_.Delay(function () {
      var patternInput = tfs.tail != null ? [tfs.head, tfs.tail] : [new Transformation("Empty", []), new List$2()];

      var ctx_1 = function () {
        var Fields = Transform.transformFields(ctx.InputFields, reverse$$1(patternInput[1]));
        return new Context$2(ctx.Root, ctx.LookupNamed, ctx.InputFields, Fields);
      }();

      var _target6 = function _target6(conds) {
        return builder_.Return(handleFilterRequest(ctx_1, patternInput[1], conds));
      };

      var _target9 = function _target9() {
        return builder_.Return(function () {
          throw new Error("makePivotTypeImmediate: GetTheData, GetRange and Metadata shouldn't be of pivot type");
        }());
      };

      if (patternInput[0].Case === "GetSeries") {
        var k = patternInput[0].Fields[0];
        var v = patternInput[0].Fields[1];
        return builder_.Return(handleGetSeriesRequest(ctx_1, patternInput[1], k, v));
      } else {
        if (patternInput[0].Case === "Paging") {
          var ops = patternInput[0].Fields[0];
          var pgid = fsFormat("pgid-%d")(function (x) {
            return x;
          })(sumBy(function (_arg3) {
            return _arg3.Case === "Paging" ? 1 : 0;
          }, patternInput[1]));
          return builder_.Return(handlePagingRequest(ctx_1, patternInput[1], pgid, ops));
        } else {
          if (patternInput[0].Case === "SortBy") {
            var keys = patternInput[0].Fields[0];
            return builder_.Return(handleSortRequest(ctx_1, patternInput[1], keys));
          } else {
            if (patternInput[0].Case === "DropColumns") {
              var dropped = patternInput[0].Fields[0];
              return builder_.Return(handleDropRequest(ctx_1, patternInput[1], dropped));
            } else {
              if (patternInput[0].Case === "FilterBy") {
                if (patternInput[0].Fields[0].tail != null) {
                  if (patternInput[0].Fields[0].head[2] === "!") {
                    var conds = patternInput[0].Fields[0].tail;
                    var eq = patternInput[0].Fields[0].head[1];
                    var fld = patternInput[0].Fields[0].head[0];
                    return builder_.ReturnFrom(handleFilterEqNeqRequest(ctx_1, patternInput[1], fld, eq, conds));
                  } else {
                    return _target6(patternInput[0].Fields[0]);
                  }
                } else {
                  return _target6(patternInput[0].Fields[0]);
                }
              } else {
                if (patternInput[0].Case === "GroupBy") {
                  if (patternInput[0].Fields[1].tail == null) {
                    var flds = patternInput[0].Fields[0];
                    return builder_.Return(handleGroupRequest(ctx_1, patternInput[1], flds));
                  } else {
                    var aggs = patternInput[0].Fields[1];
                    var _flds = patternInput[0].Fields[0];
                    return builder_.Return(handleGroupAggRequest(ctx_1, patternInput[1], _flds, aggs));
                  }
                } else {
                  if (patternInput[0].Case === "GetTheData") {
                    return _target9();
                  } else {
                    if (patternInput[0].Case === "GetRange") {
                      return _target9();
                    } else {
                      if (patternInput[0].Case === "Metadata") {
                        return _target9();
                      } else {
                        return builder_.Return(makeObjectType(ofArray([makeProperty(ctx_1, "group data", new List$2(new Transformation("GroupBy", [new List$2(), new List$2()]), patternInput[1])), makeProperty(ctx_1, "filter data", new List$2(new Transformation("FilterBy", [new List$2()]), patternInput[1])), makeProperty(ctx_1, "sort data", new List$2(new Transformation("SortBy", [new List$2()]), patternInput[1])), makeProperty(ctx_1, "drop columns", new List$2(new Transformation("DropColumns", [new List$2()]), patternInput[1])), makeProperty(ctx_1, "paging", new List$2(new Transformation("Paging", [new List$2()]), patternInput[1])), makeProperty(ctx_1, "get series", new List$2(new Transformation("GetSeries", ["!", "!"]), patternInput[1])), makeDataMember(ctx_1, "get the data", false, patternInput[1])])));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    });
  }(singleton$2);
}
function adjustForPreview(tfs) {
  var _target3 = function _target3() {
    return tfs;
  };

  if (tfs.tail != null) {
    if (tfs.head.Case === "GroupBy") {
      if (tfs.head.Fields[0].tail == null) {
        var tfs_1 = tfs.tail;
        return tfs_1;
      } else {
        if (tfs.head.Fields[1].tail == null) {
          var k = tfs.head.Fields[0];
          var _tfs_ = tfs.tail;
          return new List$2(new Transformation("GroupBy", [k, ofArray([new Aggregation("GroupKey", [])])]), _tfs_);
        } else {
          return _target3();
        }
      }
    } else {
      if (tfs.head.Case === "GetSeries") {
        var _tfs_2 = tfs.tail;
        return _tfs_2;
      } else {
        return _target3();
      }
    }
  } else {
    return _target3();
  }
}
function withPreview(ctx, tfs, typ) {
  return typ.Case === "Object" ? function () {
    var preview = makeDataMember(ctx, "preview", true, adjustForPreview(tfs));
    return new Type("Object", [new ObjectType([preview].concat(typ.Fields[0].Members))]);
  }() : function () {
    throw new Error("withPreview: Expected object type");
  }();
}
function makePivotType(ctx, tfs) {
  var guid = Transform.toUrl(tfs);

  var typ = function (builder_) {
    return builder_.Delay(function () {
      return builder_.TryWith(builder_.Delay(function () {
        return builder_.Bind(makePivotTypeImmediate(ctx, tfs), function (_arg4) {
          return builder_.Return(withPreview(ctx, tfs, _arg4));
        });
      }), function (_arg5) {
        Log.exn("providers", "Failed when generating type for %O with exception %O", tfs, _arg5);
        return builder_.Return(function () {
          throw _arg5;
        }());
      });
    });
  }(singleton$2);

  return new Type("Delayed", ["pivot: " + guid, function (arg00) {
    return function (arg10) {
      return Async_CreateNamedFuture_Static(arg00, arg10);
    };
  }(guid)(typ)]);
}
function providePivotType(root, name, lookupNamed, fields) {
  var fields_1 = toList(delay(function () {
    return collect$1(function (matchValue) {
      return singleton$1(new Field(matchValue[0], matchValue[1]));
    }, fields);
  }));
  var typ = makePivotType(new Context$2(root, lookupNamed, fields_1, fields_1), new List$2());
  var ctx = ident("PivotContext");
  var meta1 = new Metadata("http://schema.thegamma.net/pivot", "Transformations", new List$2());
  var meta2 = new Metadata("http://schema.thegamma.net/pivot", "Fields", fields_1);
  return new ProvidedType("GlobalValue", [name, ofArray([meta1, meta2]), new Expression("NewExpression", [ctx, ofArray([str(root), new Expression("ArrayExpression", [new List$2(), null])]), null]), typ]);
}

function pickMetaByType(ctx, typ, metas) {
  return tryPick(function (m) {
    return (m.Context === ctx ? m.Type === typ : false) ? m.Data : null;
  }, metas);
}
function pickPivotFields(expr) {
  var matchValue = expr.Entity;

  var _target0 = function _target0(m) {
    var matchValue_1 = pickMetaByType("http://schema.thegamma.net/pivot", "Fields", m);

    if (matchValue_1 != null) {
      return matchValue_1;
    }
  };

  var _target1 = function _target1() {
    return null;
  };

  if (matchValue != null) {
    if (matchValue.Kind.Case === "ChainElement") {
      return _target0(matchValue.Meta);
    } else {
      if (matchValue.Kind.Case === "GlobalValue") {
        return _target0(matchValue.Meta);
      } else {
        if (matchValue.Kind.Case === "Variable") {
          return _target0(matchValue.Kind.Fields[1].Meta);
        } else {
          return _target1();
        }
      }
    }
  } else {
    return _target1();
  }
}
function pickPivotTransformations(expr) {
  var matchValue = expr.Entity;

  var _target2 = function _target2() {
    return null;
  };

  if (matchValue != null) {
    if (matchValue.Kind.Case === "ChainElement") {
      var m = matchValue.Meta;
      var matchValue_1 = pickMetaByType("http://schema.thegamma.net/pivot", "Transformations", m);

      if (matchValue_1 != null) {
        return matchValue_1;
      }
    } else {
      if (matchValue.Kind.Case === "GlobalValue") {
        var _m = matchValue.Meta;
        return new List$2();
      } else {
        return _target2();
      }
    }
  } else {
    return _target2();
  }
}
function commandAtLocation(loc, program) {
  return tryFind(function (cmd) {
    return cmd.Range.Start <= loc ? cmd.Range.End + 1 >= loc : false;
  }, program.Body.Node);
}
function transformName(_arg1) {
  return _arg1.Case === "DropColumns" ? "drop columns" : _arg1.Case === "Empty" ? "empty" : _arg1.Case === "FilterBy" ? "filter by" : _arg1.Case === "GetSeries" ? "get series" : _arg1.Case === "GetTheData" ? "get the data" : _arg1.Case === "GroupBy" ? "group by" : _arg1.Case === "Paging" ? "paging" : _arg1.Case === "SortBy" ? "sort by" : function () {
    throw new Error("C:\\Tomas\\Public\\thegamma\\thegamma-script\\src\\thegamma\\live/pivot.fs", 57, 20);
  }();
}
var PivotSection = function () {
  function PivotSection(transformation, nodes) {
    _classCallCheck(this, PivotSection);

    this.Transformation = transformation;
    this.Nodes = nodes;
  }

  _createClass(PivotSection, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Live.Pivot.PivotSection",
        interfaces: ["FSharpRecord"],
        properties: {
          Transformation: Transformation,
          Nodes: makeGeneric(List$2, {
            T: makeGeneric(_Node, {
              T: Expr
            })
          })
        }
      };
    }
  }]);

  return PivotSection;
}();
setType("TheGamma.Live.Pivot.PivotSection", PivotSection);
function createPivotSections(tfss) {
  var loop = function loop(acc) {
    return function (tupledArg) {
      return function (_arg1) {
        var _target1 = function _target1() {
          return _arg1.tail == null ? function () {
            var current = new PivotSection(tupledArg[0], reverse$$1(tupledArg[1]));
            return reverse$$1(new List$2(current, acc));
          }() : function () {
            var tfs = _arg1.head[1];
            var e = _arg1.head[0];
            var current = new PivotSection(tupledArg[0], reverse$$1(tupledArg[1]));
            return loop(new List$2(current, acc))([tfs.head, ofArray([e]), tfs.length])(_arg1.tail);
          }();
        };

        if (_arg1.tail != null) {
          if (function () {
            var tfs = _arg1.head[1];
            var e = _arg1.head[0];

            if (transformName(tfs.head) === transformName(tupledArg[0])) {
              return tfs.length === tupledArg[2];
            } else {
              return false;
            }
          }()) {
            var e = _arg1.head[0];
            var tfs = _arg1.head[1];
            var _tfss_ = _arg1.tail;
            return loop(acc)([tfs.head, new List$2(e, tupledArg[1]), tupledArg[2]])(_tfss_);
          } else {
            return _target1();
          }
        } else {
          return _target1();
        }
      };
    };
  };

  var tfss_1 = choose$$1(function (node$$1) {
    var matchValue = pickPivotTransformations(node$$1);

    if (matchValue == null) {
      return null;
    } else {
      var tfs = filter$1(function (_arg2) {
        return _arg2.Case === "Empty" ? false : true;
      }, matchValue);

      if (tfs.tail == null) {
        return null;
      } else {
        return [node$$1, tfs];
      }
    }
  }, tfss);

  if (tfss_1.tail == null) {
    return new List$2();
  } else {
    var tfs = tfss_1.head[1];
    var e = tfss_1.head[0];
    return loop(new List$2())([tfs.head, ofArray([e]), tfs.length])(tfss_1.tail);
  }
}
function collectChain(acc, node$$1) {
  var _target0 = function _target0(e, n) {
    return collectChain(new List$2([n.Range.Start, node$$1], acc), e);
  };

  var _target2 = function _target2() {
    return null;
  };

  if (node$$1.Node.Case === "Call") {
    if (node$$1.Node.Fields[0] != null) {
      return _target0(node$$1.Node.Fields[0], node$$1.Node.Fields[1]);
    } else {
      return _target2();
    }
  } else {
    if (node$$1.Node.Case === "Property") {
      return _target0(node$$1.Node.Fields[0], node$$1.Node.Fields[1]);
    } else {
      if (node$$1.Node.Case === "Variable") {
        var n = node$$1.Node.Fields[0];
        return new List$2([n.Range.Start, node$$1], acc);
      } else {
        return _target2();
      }
    }
  }
}
function collectFirstChain(expr) {
  var matchValue = collectChain(new List$2(), expr);

  var _target1 = function _target1() {
    var activePatternResult6202 = _ExprLeaf_ExprNode_(expr.Node);

    if (activePatternResult6202.Case === "Choice2Of2") {
      var _ret = function () {
        var es = activePatternResult6202.Fields[0][0];
        var ns = activePatternResult6202.Fields[0][1];
        {
          var _ret2 = function () {
            var loop = function loop(acc) {
              return function (es_1) {
                return es_1.tail != null ? function () {
                  var matchValue_1 = collectFirstChain(es_1.head);

                  if (matchValue_1 != null) {
                    var _ret3 = function () {
                      var recreate = matchValue_1[0];
                      var chain = matchValue_1[1];

                      var recreate_1 = function recreate_1(newChain) {
                        var _Node$$1 = rebuildExprNode(es_1.head.Node, append$$1(reverse$$1(acc), append$$1(ofArray([recreate(newChain)]), es_1.tail)), ns);

                        return new _Node(expr.WhiteBefore, expr.WhiteAfter, expr.Range, _Node$$1, expr.Entity);
                      };

                      return {
                        v: [recreate_1, chain]
                      };
                    }();

                    if ((typeof _ret3 === "undefined" ? "undefined" : _typeof$2(_ret3)) === "object") return _ret3.v;
                  } else {
                    return loop(new List$2(es_1.head, acc))(es_1.tail);
                  }
                }() : null;
              };
            };

            return {
              v: {
                v: loop(new List$2())(es)
              }
            };
          }();

          if ((typeof _ret2 === "undefined" ? "undefined" : _typeof$2(_ret2)) === "object") return _ret2.v;
        }
      }();

      if ((typeof _ret === "undefined" ? "undefined" : _typeof$2(_ret)) === "object") return _ret.v;
    }
  };

  if (matchValue != null) {
    if (matchValue.tail != null) {
      var chain = matchValue;
      return [function (x) {
        return x;
      }, chain];
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
var PivotEditorMenus = function () {
  function PivotEditorMenus(caseName, fields) {
    _classCallCheck(this, PivotEditorMenus);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(PivotEditorMenus, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Live.Pivot.PivotEditorMenus",
        interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
        cases: {
          AddDropdownOpen: [],
          ContextualDropdownOpen: [],
          Hidden: []
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsUnions(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareUnions(this, other);
    }
  }]);

  return PivotEditorMenus;
}();
setType("TheGamma.Live.Pivot.PivotEditorMenus", PivotEditorMenus);
var PivotEditorAction = function () {
  function PivotEditorAction(caseName, fields) {
    _classCallCheck(this, PivotEditorAction);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(PivotEditorAction, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Live.Pivot.PivotEditorAction",
        interfaces: ["FSharpUnion"],
        cases: {
          AddElement: [Interface("TheGamma.Common.Symbol"), "string", Option(makeGeneric(List$2, {
            T: Expr
          }))],
          AddTransform: [Transformation],
          RemoveElement: [Interface("TheGamma.Common.Symbol")],
          RemoveSection: [Interface("TheGamma.Common.Symbol")],
          ReplaceElement: [Interface("TheGamma.Common.Symbol"), "string", Option(makeGeneric(List$2, {
            T: Expr
          }))],
          ReplaceRange: [_Range, "string"],
          SelectChainElement: ["number"],
          SelectRange: [_Range],
          SwitchMenu: [PivotEditorMenus],
          UpdatePreview: [DomNode]
        }
      };
    }
  }]);

  return PivotEditorAction;
}();
setType("TheGamma.Live.Pivot.PivotEditorAction", PivotEditorAction);
var PivotEditorState = function () {
  function PivotEditorState(body, firstNode, preview, sections, selectedEntity, menus, focus) {
    _classCallCheck(this, PivotEditorState);

    this.Body = body;
    this.FirstNode = firstNode;
    this.Preview = preview;
    this.Sections = sections;
    this.SelectedEntity = selectedEntity;
    this.Menus = menus;
    this.Focus = focus;
  }

  _createClass(PivotEditorState, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Live.Pivot.PivotEditorState",
        interfaces: ["FSharpRecord"],
        properties: {
          Body: makeGeneric(_Node, {
            T: Expr
          }),
          FirstNode: makeGeneric(_Node, {
            T: Expr
          }),
          Preview: DomNode,
          Sections: makeGeneric(List$2, {
            T: PivotSection
          }),
          SelectedEntity: Entity,
          Menus: PivotEditorMenus,
          Focus: Option(Tuple(["string", Option("number")]))
        }
      };
    }
  }]);

  return PivotEditorState;
}();
setType("TheGamma.Live.Pivot.PivotEditorState", PivotEditorState);
function withPivotState(pivotState, state) {
  return new LiveState(state.Globals, state.Code, state.Program, state.Mapper, state.Location, state.Selection, pivotState, state.CurrentPreview);
}
function findPreview(trigger, globals, ent) {
  var nm = new Name("preview");

  var matchValue = function () {
    var $var103 = ent.Type;

    if ($var103 != null) {
      return function (t) {
        return reduceType(t);
      }($var103);
    } else {
      return $var103;
    }
  }();

  var _target0 = function _target0() {
    var res = evaluate(globals, ent);

    var res_1 = function () {
      var $var104 = res;

      if ($var104 != null) {
        return function (p) {
          return p.Preview.value;
        }($var104);
      } else {
        return $var104;
      }
    }();

    if (res_1 != null) {
      var _ret4 = function () {
        Log.trace("live", "Found preview value: %O", res_1);

        var node$$1 = function (arg0) {
          return function (arg1) {
            return El.op_Dynamic(arg0, arg1);
          };
        }(h$$1)("div")(ofArray([op_EqualsGreater("class", "placeholder")]))(ofArray([text("Loading preview...")]));

        var returned = false;

        (function (arg00) {
          startImmediate(arg00);
        })(function (builder_) {
          return builder_.Delay(function () {
            return builder_.Bind(table.create(res_1).render(), function (_arg4) {
              return builder_.Combine(returned ? function () {
                trigger(new LiveEvent("CustomEvent", [new PivotEditorAction("UpdatePreview", [_arg4])]));
                return builder_.Zero();
              }() : function () {
                node$$1 = _arg4;
                return builder_.Zero();
              }(), builder_.Delay(function () {
                Log.trace("live", "Evaluated to a node");
                return builder_.Zero();
              }));
            });
          });
        }(singleton$2));

        returned = true;
        Log.trace("live", "After evaluation started: %O", node$$1);
        return {
          v: node$$1
        };
      }();

      if ((typeof _ret4 === "undefined" ? "undefined" : _typeof$2(_ret4)) === "object") return _ret4.v;
    } else {
      return function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("div")(ofArray([op_EqualsGreater("class", "placeholder")]))(ofArray([text("Preview could not be evaluated")]));
    }
  };

  var _target1 = function _target1() {
    return function (arg0) {
      return function (arg1) {
        return El.op_Dynamic(arg0, arg1);
      };
    }(h$$1)("div")(ofArray([op_EqualsGreater("class", "placeholder")]))(ofArray([text("This block does not have a preview")]));
  };

  if (matchValue != null) {
    if (matchValue.Case === "Object") {
      var activePatternResult6236 = _FindMethod___$1(nm, matchValue.Fields[0]);

      if (activePatternResult6236 != null) {
        return _target0();
      } else {
        var activePatternResult6237 = _FindProperty___$1(nm, matchValue.Fields[0]);

        if (activePatternResult6237 != null) {
          return _target0();
        } else {
          return _target1();
        }
      }
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
function updateBody(trigger, state) {
  var matchValue = commandAtLocation(state.Location, state.Program);

  if (matchValue != null) {
    var patternInput = state.Mapper.AbsoluteToLineCol(matchValue.Range.End + 1);

    var _target0 = function _target0(expr) {
      var matchValue_1 = collectFirstChain(expr);

      if (matchValue_1 != null) {
        var _ret5 = function () {
          var recreate = matchValue_1[0];
          var chain = matchValue_1[1];
          var sections = createPivotSections(map$4(function (tuple) {
            return tuple[1];
          }, chain));
          var patternInput_1 = chain.head;
          var matchValue_2 = tryLast(filter$1(function (tupledArg) {
            return state.Location >= tupledArg[0];
          }, chain));

          var _target1 = function _target1() {
            return null;
          };

          if (matchValue_2 != null) {
            if (function () {
              var selNode = matchValue_2[1];
              return !(sections.tail == null);
            }()) {
              var _ret6 = function () {
                var selNode = matchValue_2[1];
                var preview = findPreview(trigger, state.Globals, selNode.Entity);

                var ps = function () {
                  var Menus = new PivotEditorMenus("Hidden", []);
                  var Focus = null;
                  var SelectedEntity = selNode.Entity;
                  return new PivotEditorState(expr, patternInput_1[1], preview, sections, SelectedEntity, Menus, Focus);
                }();

                return {
                  v: {
                    v: function (state_1) {
                      return withPivotState(ps, state_1);
                    }(state)
                  }
                };
              }();

              if ((typeof _ret6 === "undefined" ? "undefined" : _typeof$2(_ret6)) === "object") return _ret6.v;
            } else {
              return {
                v: _target1()
              };
            }
          } else {
            return {
              v: _target1()
            };
          }
        }();

        if ((typeof _ret5 === "undefined" ? "undefined" : _typeof$2(_ret5)) === "object") return _ret5.v;
      }
    };

    if (matchValue.Node.Case === "Let") {
      return _target0(matchValue.Node.Fields[1]);
    } else {
      return _target0(matchValue.Node.Fields[0]);
    }
  }
}
function hideMenus(state) {
  var State = function () {
    var Menus = new PivotEditorMenus("Hidden", []);
    return new PivotEditorState(state.State.Body, state.State.FirstNode, state.State.Preview, state.State.Sections, state.State.SelectedEntity, Menus, state.State.Focus);
  }();

  return new LiveState(state.Globals, state.Code, state.Program, state.Mapper, state.Location, state.Selection, State, state.CurrentPreview);
}
function editorLocation(mapper, startIndex, endIndex) {
  var patternInput = mapper.AbsoluteToLineCol(startIndex);
  var patternInput_1 = mapper.AbsoluteToLineCol(endIndex);
  var rng = {};
  return new LineColumnRange(patternInput[0], patternInput[1], patternInput_1[0], patternInput_1[1]);
}
function selectName(nd, state) {
  var rng = function () {
    var _target0 = function _target0(n) {
      return n.Range;
    };

    if (nd.Node.Case === "Call") {
      return _target0(nd.Node.Fields[1]);
    } else {
      if (nd.Node.Case === "Property") {
        return _target0(nd.Node.Fields[1]);
      } else {
        return nd.Range;
      }
    }
  }();

  var loc = editorLocation(state.Mapper, rng.Start, rng.End + 1);
  var Selection = loc;
  return new LiveState(state.Globals, state.Code, state.Program, state.Mapper, state.Location, Selection, state.State, state.CurrentPreview);
}
function tryTransformChain(f, state) {
  var matchValue = collectFirstChain(state.State.Body);

  if (matchValue != null) {
    var recreate = matchValue[0];
    var chain = matchValue[1];
    var sections = createPivotSections(map$4(function (tuple) {
      return tuple[1];
    }, chain));
    return hideMenus(f(state.State.Body)(recreate)(map$4(function (tuple) {
      return tuple[1];
    }, chain))(sections));
  } else {
    return hideMenus(state);
  }
}
var marker = "InsertPropertyHere";
function replaceAndSelectMarker(newName, state) {
  var startIndex = state.Code.indexOf(marker);
  var newCode = replace$$1(state.Code, marker, escapeIdent(newName));
  var mapper = new LocationMapper(state.Code);
  var rng = editorLocation(mapper, startIndex, startIndex + escapeIdent(newName).length);
  var Selection = rng;
  return new LiveState(state.Globals, newCode, state.Program, state.Mapper, state.Location, Selection, state.State, state.CurrentPreview);
}
function reconstructChain(state, body, newNodes) {
  var newBody = fold$1(function (prev, part) {
    return part.Node.Case === "Property" ? function () {
      var _Node$$1 = new Expr("Property", [prev, part.Node.Fields[1]]);

      return new _Node(part.WhiteBefore, part.WhiteAfter, part.Range, _Node$$1, part.Entity);
    }() : part.Node.Case === "Call" ? function () {
      var _Node$$1 = new Expr("Call", [prev, part.Node.Fields[1], part.Node.Fields[2]]);

      return new _Node(part.WhiteBefore, part.WhiteAfter, part.Range, _Node$$1, part.Entity);
    }() : function () {
      throw new Error("Unexpected node in call chain");
    }();
  }, newNodes.head, newNodes.tail);
  var newCode = trim(formatSingleExpression(newBody), "both");
  var newCode_1 = state.Code.substr(0, body.Range.Start) + newCode + state.Code.substr(body.Range.End + 1);
  return new LiveState(state.Globals, newCode_1, state.Program, state.Mapper, state.Location, state.Selection, state.State, state.CurrentPreview);
}
function createChainNode(args, name) {
  var node$$1 = function node$$1(nd) {
    return node(new _Range(0, 0), nd);
  };

  if (args != null) {
    var args_1 = map$4(function (a) {
      return new Argument(null, node$$1(a));
    }, args);
    return node$$1(new Expr("Call", [null, node$$1(new Name(name)), node$$1(args_1)]));
  } else {
    return node$$1(new Expr("Property", [node$$1(new Expr("Empty", [])), node$$1(new Name(name))]));
  }
}
function getWhiteBeforeAndAfterSections(firstNode, sections) {
  var dominantWhite = function dominantWhite(whites) {
    var whites_1 = toList(toList(countBy(function (x) {
      return x;
    }, whites)));
    return reduce(function (f) {
      return function (x, y) {
        return f(x) > f(y) ? x : y;
      };
    }(function (tupledArg) {
      return tupledArg[0] === "" ? 0 : tupledArg[1];
    }), new List$2(["", 0], whites_1))[0];
  };

  var patternInput = [dominantWhite(function (list) {
    return map$4(function (nd) {
      return formatWhiteBeforeExpr(nd);
    }, list);
  }(map$4(function (sec) {
    return sec.Nodes.head;
  }, sections))), dominantWhite(function (list) {
    return map$4(function (nd) {
      return formatWhiteAfterExpr(nd);
    }, list);
  }(append$$1(ofArray([firstNode]), map$4(function (sec) {
    return last(sec.Nodes);
  }, sections))))];
  Log.trace("live", "Inserting whitespace before '%s' and after '%s' for sections: %O", patternInput[0], patternInput[1], sections);
  return [ofArray([new Token(new TokenKind("White", [patternInput[0]]), new _Range(0, 0))]), ofArray([new Token(new TokenKind("White", [patternInput[1]]), new _Range(0, 0))])];
}
function insertWhiteAroundSection(before, after, section) {
  var lastIdx = section.Nodes.length - 1;
  return new PivotSection(section.Transformation, mapIndexed$$1(function (i, node$$1) {
    var node_1 = function () {
      var matchValue = [before, node$$1];

      var _target1 = function _target1() {
        var _target1 = function _target1() {
          return node$$1;
        };

        if (matchValue[0] != null) {
          if (matchValue[1].Node.Case === "Call") {
            if (function () {
              var n = matchValue[1].Node.Fields[1];
              var inst = matchValue[1].Node.Fields[0];
              var before_1 = matchValue[0];
              var args = matchValue[1].Node.Fields[2];
              return i === 0;
            }()) {
              var args = matchValue[1].Node.Fields[2];
              var before_1 = matchValue[0];
              var inst = matchValue[1].Node.Fields[0];
              var n = matchValue[1].Node.Fields[1];
              {
                var _Node$$1 = new Expr("Call", [inst, new _Node(before_1, n.WhiteAfter, n.Range, n.Node, n.Entity), args]);

                return new _Node(node$$1.WhiteBefore, node$$1.WhiteAfter, node$$1.Range, _Node$$1, node$$1.Entity);
              }
            } else {
              return _target1();
            }
          } else {
            return _target1();
          }
        } else {
          return _target1();
        }
      };

      if (matchValue[0] != null) {
        if (matchValue[1].Node.Case === "Property") {
          if (function () {
            var n = matchValue[1].Node.Fields[1];
            var inst = matchValue[1].Node.Fields[0];
            var before_1 = matchValue[0];
            return i === 0;
          }()) {
            var before_1 = matchValue[0];
            var inst = matchValue[1].Node.Fields[0];
            var n = matchValue[1].Node.Fields[1];
            {
              var _Node$$1 = new Expr("Property", [inst, new _Node(before_1, n.WhiteAfter, n.Range, n.Node, n.Entity)]);

              return new _Node(node$$1.WhiteBefore, node$$1.WhiteAfter, node$$1.Range, _Node$$1, node$$1.Entity);
            }
          } else {
            return _target1();
          }
        } else {
          return _target1();
        }
      } else {
        return _target1();
      }
    }();

    var node_2 = function () {
      var matchValue = [after, node_1];

      var _target1 = function _target1() {
        return node_1;
      };

      if (matchValue[0] != null) {
        if (function () {
          var after_1 = matchValue[0];
          return i === lastIdx;
        }()) {
          var after_1 = matchValue[0];
          var _node_ = matchValue[1];
          return new _Node(_node_.WhiteBefore, after_1, _node_.Range, _node_.Node, _node_.Entity);
        } else {
          return _target1();
        }
      } else {
        return _target1();
      }
    }();

    return node_2;
  }, section.Nodes));
}
function updatePivotState(trigger, state, event) {
  var _target0 = function _target0() {
    return function (state_1) {
      return updateBody(trigger, state_1);
    }(hideMenus(state));
  };

  if (event.Case === "UpdateLocation") {
    return _target0();
  } else {
    if (event.Case === "InitializeGlobals") {
      return state;
    } else {
      if (event.Case === "CustomEvent") {
        if (event.Fields[0].Case === "SwitchMenu") {
          return withPivotState(new PivotEditorState(state.State.Body, state.State.FirstNode, state.State.Preview, state.State.Sections, state.State.SelectedEntity, event.Fields[0].Fields[0], state.State.Focus), state);
        } else {
          if (event.Fields[0].Case === "SelectChainElement") {
            return tryTransformChain(function (body) {
              return function (recreate) {
                return function (chain) {
                  return function (sections) {
                    var loop = function loop(before) {
                      return function (chain_1) {
                        var _target1 = function _target1() {
                          return chain_1.tail == null ? [before, before, before] : chain_1.tail.tail == null ? function () {
                            var c = chain_1.head;
                            return [before, c, c];
                          }() : function () {
                            var after = chain_1.tail.head;
                            var c = chain_1.head;
                            return [before, c, after];
                          }();
                        };

                        if (chain_1.tail != null) {
                          if (chain_1.head.Range.End + 1 < state.Location) {
                            var c = chain_1.head;
                            var chain_2 = chain_1.tail;
                            return loop(c)(chain_2);
                          } else {
                            return _target1();
                          }
                        } else {
                          return _target1();
                        }
                      };
                    };

                    var patternInput = loop(chain.head)(chain.tail);
                    return selectName(event.Fields[0].Fields[0] < 0 ? patternInput[0] : event.Fields[0].Fields[0] > 0 ? patternInput[2] : patternInput[1], state);
                  };
                };
              };
            }, state);
          } else {
            if (event.Fields[0].Case === "SelectRange") {
              return function () {
                var Selection = editorLocation(state.Mapper, event.Fields[0].Fields[0].Start, event.Fields[0].Fields[0].End + 1);
                return new LiveState(state.Globals, state.Code, state.Program, state.Mapper, state.Location, Selection, state.State, state.CurrentPreview);
              }();
            } else {
              if (event.Fields[0].Case === "ReplaceRange") {
                var _ret7 = function () {
                  Log.trace("live", "Replace '%s' with '%s'", state.Code.substr(event.Fields[0].Fields[0].Start, event.Fields[0].Fields[0].End - event.Fields[0].Fields[0].Start + 1), event.Fields[0].Fields[1]);
                  var newCode = state.Code.substr(0, event.Fields[0].Fields[0].Start) + event.Fields[0].Fields[1] + state.Code.substr(event.Fields[0].Fields[0].End + 1);
                  var location = editorLocation(new LocationMapper(newCode), event.Fields[0].Fields[0].Start, event.Fields[0].Fields[0].Start + event.Fields[0].Fields[1].length);
                  return {
                    v: function () {
                      var Selection = location;
                      return new LiveState(state.Globals, newCode, state.Program, state.Mapper, state.Location, Selection, state.State, state.CurrentPreview);
                    }()
                  };
                }();

                if ((typeof _ret7 === "undefined" ? "undefined" : _typeof$2(_ret7)) === "object") return _ret7.v;
              } else {
                if (event.Fields[0].Case === "AddElement") {
                  return tryTransformChain(function (body) {
                    return function (recreate) {
                      return function (chain) {
                        return function (sections) {
                          var newNodes = collect$$1(function (nd) {
                            return !equals(nd.Entity.Symbol, event.Fields[0].Fields[0]) ? ofArray([nd]) : ofArray([nd, createChainNode(event.Fields[0].Fields[2], marker)]);
                          }, chain);
                          return function (state_1) {
                            return replaceAndSelectMarker(event.Fields[0].Fields[1], state_1);
                          }(reconstructChain(state, body, newNodes));
                        };
                      };
                    };
                  }, state);
                } else {
                  if (event.Fields[0].Case === "ReplaceElement") {
                    return tryTransformChain(function (body) {
                      return function (recreate) {
                        return function (chain) {
                          return function (sections) {
                            var newNodes = map$4(function (nd) {
                              return !equals(nd.Entity.Symbol, event.Fields[0].Fields[0]) ? nd : createChainNode(event.Fields[0].Fields[2], marker);
                            }, chain);
                            return function (state_1) {
                              return replaceAndSelectMarker(event.Fields[0].Fields[1], state_1);
                            }(reconstructChain(state, body, newNodes));
                          };
                        };
                      };
                    }, state);
                  } else {
                    if (event.Fields[0].Case === "RemoveElement") {
                      return tryTransformChain(function (body) {
                        return function (recreate) {
                          return function (chain) {
                            return function (sections) {
                              var beforeDropped = tryLast(toList(takeWhile(function (nd) {
                                return !equals(nd.Entity.Symbol, event.Fields[0].Fields[0]);
                              }, chain)));
                              var beforeDropped_1 = beforeDropped != null ? beforeDropped : chain.head;
                              var newNodes = filter$1(function (nd) {
                                return !equals(nd.Entity.Symbol, event.Fields[0].Fields[0]);
                              }, chain);
                              return function (state_1) {
                                return selectName(beforeDropped_1, state_1);
                              }(reconstructChain(state, body, newNodes));
                            };
                          };
                        };
                      }, state);
                    } else {
                      if (event.Fields[0].Case === "RemoveSection") {
                        return tryTransformChain(function (body) {
                          return function (recreate) {
                            return function (chain) {
                              return function (sections) {
                                var beforeDropped = tryLast(toList(takeWhile(function (nd) {
                                  return !equals(nd.Entity.Symbol, event.Fields[0].Fields[0]);
                                }, map$4(function (sec) {
                                  return sec.Nodes.head;
                                }, sections))));
                                var beforeDropped_1 = beforeDropped != null ? beforeDropped : chain.head;
                                var newSections = filter$1(function (sec) {
                                  return !equals(sec.Nodes.head.Entity.Symbol, event.Fields[0].Fields[0]);
                                }, sections);
                                var newNodes = new List$2(chain.head, collect$$1(function (sec) {
                                  return sec.Nodes;
                                }, newSections));
                                return function (state_1) {
                                  return selectName(beforeDropped_1, state_1);
                                }(reconstructChain(state, body, newNodes));
                              };
                            };
                          };
                        }, state);
                      } else {
                        if (event.Fields[0].Case === "AddTransform") {
                          return tryTransformChain(function (body) {
                            return function (recreate) {
                              return function (chain) {
                                return function (sections) {
                                  var patternInput = getWhiteBeforeAndAfterSections(chain.head, sections);

                                  var node$$1 = function node$$1(n) {
                                    return node(new _Range(0, 0), n);
                                  };

                                  var fields = tryPick(function (expr) {
                                    return pickPivotFields(expr);
                                  }, reverse$$1(collect$$1(function (s) {
                                    return s.Nodes;
                                  }, sections)));
                                  var patternInput_1 = event.Fields[0].Fields[0].Case === "DropColumns" ? ["drop columns", ofArray([marker, "then"])] : event.Fields[0].Fields[0].Case === "SortBy" ? ["sort data", ofArray([marker, "then"])] : event.Fields[0].Fields[0].Case === "FilterBy" ? ["filter data", ofArray([marker, "then"])] : event.Fields[0].Fields[0].Case === "Paging" ? ["paging", ofArray([marker, "then"])] : event.Fields[0].Fields[0].Case === "GetSeries" ? ["get series", ofArray([marker])] : event.Fields[0].Fields[0].Case === "GetTheData" ? ["get the data", ofArray([marker])] : event.Fields[0].Fields[0].Case === "GroupBy" ? ["group data", function () {
                                    var _target1 = function _target1() {
                                      return ofArray([marker, "by Property", "then"]);
                                    };

                                    if (fields != null) {
                                      if (fields.tail != null) {
                                        var f = fields.head;
                                        return ofArray([marker, "by " + f.Name, "then"]);
                                      } else {
                                        return _target1();
                                      }
                                    } else {
                                      return _target1();
                                    }
                                  }()] : event.Fields[0].Fields[0].Case === "Empty" ? ["", new List$2()] : function () {
                                    throw new Error("C:\\Tomas\\Public\\thegamma\\thegamma-script\\src\\thegamma\\live/pivot.fs", 365, 16);
                                  }();
                                  var newSection = insertWhiteAroundSection(patternInput[0], patternInput[1], new PivotSection(event.Fields[0].Fields[0], map$4(function () {
                                    var args = null;
                                    return function (name) {
                                      return createChainNode(args, name);
                                    };
                                  }(), patternInput_1[1])));

                                  var closeFirstSection = function closeFirstSection(_arg1) {
                                    return _arg1.tail == null ? new List$2() : function () {
                                      var section = function () {
                                        var matchValue = [_arg1.head.Transformation, last(_arg1.head.Nodes)];

                                        var _target1 = function _target1() {
                                          var _target1 = function _target1() {
                                            var Nodes = append$$1(_arg1.head.Nodes, ofArray([createChainNode(null, "then")]));
                                            return new PivotSection(_arg1.head.Transformation, Nodes);
                                          };

                                          if (matchValue[1].Node.Case === "Property") {
                                            if (function () {
                                              var n = matchValue[1].Node.Fields[1];
                                              return n.Node.Name === "then";
                                            }()) {
                                              var n = matchValue[1].Node.Fields[1];
                                              return _arg1.head;
                                            } else {
                                              return _target1();
                                            }
                                          } else {
                                            return _target1();
                                          }
                                        };

                                        if (matchValue[0].Case === "Paging") {
                                          if (matchValue[1].Node.Case === "Call") {
                                            if (function () {
                                              var n = matchValue[1].Node.Fields[1];
                                              return n.Node.Name === "take";
                                            }()) {
                                              var n = matchValue[1].Node.Fields[1];
                                              return _arg1.head;
                                            } else {
                                              return _target1();
                                            }
                                          } else {
                                            return _target1();
                                          }
                                        } else {
                                          return _target1();
                                        }
                                      }();

                                      return new List$2(insertWhiteAroundSection(null, patternInput[1], section), _arg1.tail);
                                    }();
                                  };

                                  var newSections = function () {
                                    var matchValue = reverse$$1(sections);

                                    var _target0_1 = function _target0_1(last$$1, sections_1) {
                                      return reverse$$1(ofArray([last$$1, newSection], closeFirstSection(sections_1)));
                                    };

                                    var _target1 = function _target1(sections_1) {
                                      return reverse$$1(new List$2(newSection, closeFirstSection(sections_1)));
                                    };

                                    if (matchValue.tail != null) {
                                      if (matchValue.head.Transformation.Case === "GetSeries") {
                                        return _target0_1(matchValue.head, matchValue.tail);
                                      } else {
                                        if (matchValue.head.Transformation.Case === "GetTheData") {
                                          return _target0_1(matchValue.head, matchValue.tail);
                                        } else {
                                          return _target1(matchValue);
                                        }
                                      }
                                    } else {
                                      return _target1(matchValue);
                                    }
                                  }();

                                  Log.trace("live", "Inserted section: %O", _Array$from(newSections));
                                  var newNodes = new List$2(chain.head, collect$$1(function (sec) {
                                    return sec.Nodes;
                                  }, newSections));
                                  return function (state_1) {
                                    return replaceAndSelectMarker(patternInput_1[0], state_1);
                                  }(reconstructChain(state, body, newNodes));
                                };
                              };
                            };
                          }, state);
                        } else {
                          return withPivotState(new PivotEditorState(state.State.Body, state.State.FirstNode, event.Fields[0].Fields[0], state.State.Sections, state.State.SelectedEntity, state.State.Menus, state.State.Focus), state);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return _target0();
      }
    }
  }
}
function renderNodeList(trigger, nodes) {
  return toList(delay(function () {
    return collect$1(function (nd) {
      var _target1 = function _target1() {
        return empty();
      };

      if (nd.Node.Case === "Property") {
        if (nd.Node.Fields[1].Node.Name !== "then") {
          var n = nd.Node.Fields[1];
          return singleton$1(function (arg0) {
            return function (arg1) {
              return El.op_Dynamic(arg0, arg1);
            };
          }(h$$1)("span")(new List$2())(ofArray([function (arg0) {
            return function (arg1) {
              return El.op_Dynamic(arg0, arg1);
            };
          }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("SelectRange", [n.Range])))]))(ofArray([text(n.Node.Name)])), function (arg0) {
            return function (arg1) {
              return El.op_Dynamic(arg0, arg1);
            };
          }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("RemoveElement", [nd.Entity.Symbol])))]))(ofArray([function (arg0) {
            return function (arg1) {
              return El.op_Dynamic(arg0, arg1);
            };
          }(h$$1)("i")(ofArray([op_EqualsGreater("class", "fa fa-times")]))(new List$2())]))])));
        } else {
          return _target1();
        }
      } else {
        return _target1();
      }
    }, nodes);
  }));
}
function renderContextMenu(trigger) {
  return function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("a")(ofArray([op_EqualsGreater("class", "right"), op_EqualsBangGreater("click", trigger(new PivotEditorAction("SwitchMenu", [new PivotEditorMenus("ContextualDropdownOpen", [])])))]))(ofArray([function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("i")(ofArray([op_EqualsGreater("class", "fa fa-plus")]))(new List$2())]));
}
function renderAddPropertyMenu(trigger, f, nodes) {
  return toList(delay(function () {
    var lastNode = find(function (_arg1) {
      return _arg1.Node.Case === "Property" ? function () {
        var n = _arg1.Node.Fields[1];
        return n.Node.Name !== "then";
      }() : true;
    }, reverse$$1(nodes));
    var matchValue = lastNode.Entity.Type;

    var _target1 = function _target1() {
      return empty();
    };

    if (matchValue != null) {
      if (matchValue.Case === "Object") {
        var _ret8 = function () {
          var obj = matchValue.Fields[0];
          var members = sortWith(function (x, y) {
            return compare(x, y);
          }, choose$1(function (_arg2) {
            var _target1_1 = function _target1_1() {
              return null;
            };

            if (_arg2.Case === "Property") {
              if (f(_arg2.Fields[0])) {
                var n = _arg2.Fields[0];
                return n;
              } else {
                return _target1_1();
              }
            } else {
              return _target1_1();
            }
          }, obj.Members));
          return {
            v: singleton$1(function (arg0) {
              return function (arg1) {
                return El.op_Dynamic(arg0, arg1);
              };
            }(h$$1)("ul")(new List$2())(toList(delay(function () {
              return map$5(function (n) {
                return function (arg0) {
                  return function (arg1) {
                    return El.op_Dynamic(arg0, arg1);
                  };
                }(h$$1)("li")(new List$2())(ofArray([function (arg0) {
                  return function (arg1) {
                    return El.op_Dynamic(arg0, arg1);
                  };
                }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("AddElement", [lastNode.Entity.Symbol, n, null])))]))(ofArray([text(n)]))]));
              }, members);
            }))))
          };
        }();

        if ((typeof _ret8 === "undefined" ? "undefined" : _typeof$2(_ret8)) === "object") return _ret8.v;
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  }));
}
function renderSection(triggerEvent, section) {
  var trigger = function trigger(action) {
    return function (_arg1) {
      return function (e) {
        e.cancelBubble = true;
        triggerEvent(new LiveEvent("CustomEvent", [action]));
      };
    };
  };

  var triggerWith = function triggerWith(f) {
    return function (el) {
      return function (e) {
        e.cancelBubble = true;
        triggerEvent(new LiveEvent("CustomEvent", [f(el)]));
      };
    };
  };

  var getNodeNameAndSymbol = function getNodeNameAndSymbol(_arg1) {
    var _target1 = function _target1() {
      return ["", null];
    };

    if (_arg1 != null) {
      if (_arg1.Node.Case === "Property") {
        if (_arg1.Entity != null) {
          var e = _arg1.Entity;
          var n = _arg1.Node.Fields[1];
          return [n.Node.Name, e.Symbol];
        } else {
          return _target1();
        }
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  };

  return toList(delay(function () {
    var _target5 = function _target5() {
      return empty();
    };

    if (section != null) {
      if (section.Transformation.Case === "GetSeries") {
        var _ret9 = function () {
          var nodes = section.Nodes;
          var patternInput = nodes.tail != null ? nodes.tail.tail != null ? nodes.tail.tail.tail != null ? function () {
            var gs = nodes.head;
            var gsk = nodes.tail.head;
            var gsv = nodes.tail.tail.head;
            return [gs, gsk, gsv];
          }() : function () {
            var gs = nodes.head;
            var gsk = nodes.tail.head;
            return [gs, gsk, null];
          }() : function () {
            var gs = nodes.head;
            return [gs, null, null];
          }() : function () {
            throw new Error("No get series node in get series transformation");
          }();
          var patternInput_1 = getNodeNameAndSymbol(patternInput[1]);
          var patternInput_2 = getNodeNameAndSymbol(patternInput[2]);
          return {
            v: append$1(function () {
              var matchValue = patternInput[0].Entity.Type;

              var _target1 = function _target1() {
                return empty();
              };

              if (matchValue != null) {
                if (matchValue.Case === "Object") {
                  var _ret10 = function () {
                    var obj = matchValue.Fields[0];
                    return {
                      v: append$1(singleton$1(function (arg0) {
                        return function (arg1) {
                          return El.op_Dynamic(arg0, arg1);
                        };
                      }(h$$1)("span")(new List$2())(ofArray([text("with key")]))), delay(function () {
                        return singleton$1(function (arg0) {
                          return function (arg1) {
                            return El.op_Dynamic(arg0, arg1);
                          };
                        }(h$$1)("select")(ofArray([op_EqualsBangGreater("change", triggerWith(function (el) {
                          return patternInput_1[1] != null ? new PivotEditorAction("ReplaceElement", [patternInput_1[1], el.value, null]) : new PivotEditorAction("AddElement", [patternInput[0].Entity.Symbol, el.value, null]);
                        }))]))(toList(delay(function () {
                          return append$1(patternInput_1[0] === "" ? singleton$1(function (arg0) {
                            return function (arg1) {
                              return El.op_Dynamic(arg0, arg1);
                            };
                          }(h$$1)("option")(ofArray([op_EqualsGreater("value", ""), op_EqualsGreater("selected", "selected")]))(ofArray([text("")]))) : empty(), delay(function () {
                            return collect$1(function (m) {
                              var _target1_1 = function _target1_1() {
                                return empty();
                              };

                              if (m.Case === "Property") {
                                if (m.Fields[0].indexOf("with key") === 0) {
                                  var _ret11 = function () {
                                    var n = m.Fields[0];
                                    return {
                                      v: singleton$1(function (arg0) {
                                        return function (arg1) {
                                          return El.op_Dynamic(arg0, arg1);
                                        };
                                      }(h$$1)("option")(toList(delay(function () {
                                        return append$1(singleton$1(op_EqualsGreater("value", n)), delay(function () {
                                          return patternInput_1[0] === n ? singleton$1(op_EqualsGreater("selected", "selected")) : empty();
                                        }));
                                      })))(ofArray([text(replace$$1(n, "with key ", ""))])))
                                    };
                                  }();

                                  if ((typeof _ret11 === "undefined" ? "undefined" : _typeof$2(_ret11)) === "object") return _ret11.v;
                                } else {
                                  return _target1_1();
                                }
                              } else {
                                return _target1_1();
                              }
                            }, obj.Members);
                          }));
                        }))));
                      }))
                    };
                  }();

                  if ((typeof _ret10 === "undefined" ? "undefined" : _typeof$2(_ret10)) === "object") return _ret10.v;
                } else {
                  return _target1();
                }
              } else {
                return _target1();
              }
            }(), delay(function () {
              var _target1 = function _target1() {
                return empty();
              };

              if (patternInput[1] != null) {
                if (patternInput[1].Entity != null) {
                  if (patternInput[1].Entity.Type != null) {
                    if (patternInput[1].Entity.Type.Case === "Object") {
                      var _ret12 = function () {
                        var keyEnt = patternInput[1].Entity;
                        var obj = patternInput[1].Entity.Type.Fields[0];
                        return {
                          v: append$1(singleton$1(function (arg0) {
                            return function (arg1) {
                              return El.op_Dynamic(arg0, arg1);
                            };
                          }(h$$1)("span")(new List$2())(ofArray([text("and value")]))), delay(function () {
                            return singleton$1(function (arg0) {
                              return function (arg1) {
                                return El.op_Dynamic(arg0, arg1);
                              };
                            }(h$$1)("select")(ofArray([op_EqualsBangGreater("change", triggerWith(function (el) {
                              return patternInput_2[1] != null ? new PivotEditorAction("ReplaceElement", [patternInput_2[1], el.value, null]) : new PivotEditorAction("AddElement", [keyEnt.Symbol, el.value, null]);
                            }))]))(toList(delay(function () {
                              return append$1(patternInput_2[0] === "" ? singleton$1(function (arg0) {
                                return function (arg1) {
                                  return El.op_Dynamic(arg0, arg1);
                                };
                              }(h$$1)("option")(ofArray([op_EqualsGreater("value", ""), op_EqualsGreater("selected", "selected")]))(ofArray([text("")]))) : empty(), delay(function () {
                                return collect$1(function (m) {
                                  var _target1_1 = function _target1_1() {
                                    return empty();
                                  };

                                  if (m.Case === "Property") {
                                    if (m.Fields[0].indexOf("and value") === 0) {
                                      var _ret13 = function () {
                                        var n = m.Fields[0];
                                        return {
                                          v: singleton$1(function (arg0) {
                                            return function (arg1) {
                                              return El.op_Dynamic(arg0, arg1);
                                            };
                                          }(h$$1)("option")(toList(delay(function () {
                                            return append$1(singleton$1(op_EqualsGreater("value", n)), delay(function () {
                                              return patternInput_2[0] === n ? singleton$1(op_EqualsGreater("selected", "selected")) : empty();
                                            }));
                                          })))(ofArray([text(replace$$1(n, "and value ", ""))])))
                                        };
                                      }();

                                      if ((typeof _ret13 === "undefined" ? "undefined" : _typeof$2(_ret13)) === "object") return _ret13.v;
                                    } else {
                                      return _target1_1();
                                    }
                                  } else {
                                    return _target1_1();
                                  }
                                }, obj.Members);
                              }));
                            }))));
                          }))
                        };
                      }();

                      if ((typeof _ret12 === "undefined" ? "undefined" : _typeof$2(_ret12)) === "object") return _ret12.v;
                    } else {
                      return _target1();
                    }
                  } else {
                    return _target1();
                  }
                } else {
                  return _target1();
                }
              } else {
                return _target1();
              }
            }))
          };
        }();

        if ((typeof _ret9 === "undefined" ? "undefined" : _typeof$2(_ret9)) === "object") return _ret9.v;
      } else {
        if (section.Transformation.Case === "GroupBy") {
          var _ret14 = function () {
            var nodes = section.Nodes;
            var patternInput = nodes.tail != null ? nodes.tail.tail != null ? function () {
              var aggs = nodes.tail.tail;
              var gby = nodes.head;
              var sel = nodes.tail.head;
              return [gby, sel, aggs];
            }() : function () {
              var gby = nodes.head;
              return [gby, null, new List$2()];
            }() : function () {
              throw new Error("No group by node in group by transformation");
            }();
            var patternInput_1 = getNodeNameAndSymbol(patternInput[1]);
            return {
              v: append$1(function () {
                var matchValue = patternInput[0].Entity.Type;

                var _target1 = function _target1() {
                  return empty();
                };

                if (matchValue != null) {
                  if (matchValue.Case === "Object") {
                    var _ret15 = function () {
                      var obj = matchValue.Fields[0];
                      return {
                        v: singleton$1(function (arg0) {
                          return function (arg1) {
                            return El.op_Dynamic(arg0, arg1);
                          };
                        }(h$$1)("select")(ofArray([op_EqualsBangGreater("change", triggerWith(function (el) {
                          return patternInput_1[1] != null ? new PivotEditorAction("ReplaceElement", [patternInput_1[1], el.value, null]) : new PivotEditorAction("AddElement", [patternInput[0].Entity.Symbol, el.value, null]);
                        }))]))(toList(delay(function () {
                          return append$1(patternInput_1[0] === "" ? singleton$1(function (arg0) {
                            return function (arg1) {
                              return El.op_Dynamic(arg0, arg1);
                            };
                          }(h$$1)("option")(ofArray([op_EqualsGreater("value", ""), op_EqualsGreater("selected", "selected")]))(ofArray([text("")]))) : empty(), delay(function () {
                            return collect$1(function (m) {
                              var _target1_1 = function _target1_1() {
                                return empty();
                              };

                              if (m.Case === "Property") {
                                if (m.Fields[0].indexOf("by") === 0) {
                                  var _ret16 = function () {
                                    var n = m.Fields[0];
                                    return {
                                      v: singleton$1(function (arg0) {
                                        return function (arg1) {
                                          return El.op_Dynamic(arg0, arg1);
                                        };
                                      }(h$$1)("option")(toList(delay(function () {
                                        return append$1(singleton$1(op_EqualsGreater("value", n)), delay(function () {
                                          return patternInput_1[0] === n ? singleton$1(op_EqualsGreater("selected", "selected")) : empty();
                                        }));
                                      })))(ofArray([text(n)])))
                                    };
                                  }();

                                  if ((typeof _ret16 === "undefined" ? "undefined" : _typeof$2(_ret16)) === "object") return _ret16.v;
                                } else {
                                  return _target1_1();
                                }
                              } else {
                                return _target1_1();
                              }
                            }, obj.Members);
                          }));
                        }))))
                      };
                    }();

                    if ((typeof _ret15 === "undefined" ? "undefined" : _typeof$2(_ret15)) === "object") return _ret15.v;
                  } else {
                    return _target1();
                  }
                } else {
                  return _target1();
                }
              }(), delay(function () {
                return append$1(renderNodeList(trigger, patternInput[2]), delay(function () {
                  return singleton$1(renderContextMenu(trigger));
                }));
              }))
            };
          }();

          if ((typeof _ret14 === "undefined" ? "undefined" : _typeof$2(_ret14)) === "object") return _ret14.v;
        } else {
          if (section.Transformation.Case === "Paging") {
            var _ret17 = function () {
              var nodes = section.Nodes;
              var methods = create$3(map$4(function (_arg35) {
                return _arg35.Node.Case === "Call" ? function () {
                  var n = _arg35.Node.Fields[1];
                  return n.Node.Name;
                }() : "";
              }, nodes), new GenericComparer(function (x, y) {
                return x < y ? -1 : x > y ? 1 : 0;
              }));
              return {
                v: append$1(collect$1(function (nd) {
                  var _target1 = function _target1() {
                    return empty();
                  };

                  if (nd.Node.Case === "Call") {
                    if (nd.Node.Fields[2].Node.tail != null) {
                      if (nd.Node.Fields[2].Node.tail.tail == null) {
                        var _ret18 = function () {
                          var arg = nd.Node.Fields[2].Node.head;
                          var n = nd.Node.Fields[1];
                          {
                            var removeOp = n.Node.Name === "take" ? new PivotEditorAction("ReplaceElement", [nd.Entity.Symbol, "then", null]) : new PivotEditorAction("RemoveElement", [nd.Entity.Symbol]);
                            return {
                              v: singleton$1(function (arg0) {
                                return function (arg1) {
                                  return El.op_Dynamic(arg0, arg1);
                                };
                              }(h$$1)("span")(new List$2())(ofArray([function (arg0) {
                                return function (arg1) {
                                  return El.op_Dynamic(arg0, arg1);
                                };
                              }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("SelectRange", [n.Range])))]))(ofArray([text(n.Node.Name)])), function (arg0) {
                                return function (arg1) {
                                  return El.op_Dynamic(arg0, arg1);
                                };
                              }(h$$1)("input")(ofArray([op_EqualsGreater("id", "input-pg-" + n.Node.Name), op_EqualsBangGreater("input", function (el) {
                                return function (_arg2) {
                                  var input = el;
                                  var patternInput = parseProgram(input.value);

                                  if (patternInput[1].length === 0 ? patternInput[0].Body.Node.length === 1 : false) {
                                    el.setCustomValidity("");
                                    triggerEvent(new LiveEvent("CustomEvent", [new PivotEditorAction("ReplaceRange", [arg.Value.Range, input.value])]));
                                  } else {
                                    el.setCustomValidity("Cannot parse expression");
                                  }
                                };
                              }), op_EqualsGreater("value", formatSingleExpression(arg.Value))]))(new List$2()), function (arg0) {
                                return function (arg1) {
                                  return El.op_Dynamic(arg0, arg1);
                                };
                              }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(removeOp))]))(ofArray([function (arg0) {
                                return function (arg1) {
                                  return El.op_Dynamic(arg0, arg1);
                                };
                              }(h$$1)("i")(ofArray([op_EqualsGreater("class", "fa fa-times")]))(new List$2())]))])))
                            };
                          }
                        }();

                        if ((typeof _ret18 === "undefined" ? "undefined" : _typeof$2(_ret18)) === "object") return _ret18.v;
                      } else {
                        return _target1();
                      }
                    } else {
                      return _target1();
                    }
                  } else {
                    return _target1();
                  }
                }, nodes), delay(function () {
                  return !(methods.has("take") ? methods.has("skip") : false) ? singleton$1(renderContextMenu(trigger)) : empty();
                }))
              };
            }();

            if ((typeof _ret17 === "undefined" ? "undefined" : _typeof$2(_ret17)) === "object") return _ret17.v;
          } else {
            if (section.Transformation.Case === "SortBy") {
              var _ret19 = function () {
                var nodes = section.Nodes;
                var props = choose$$1(function (_arg51) {
                  var _target1 = function _target1() {
                    return null;
                  };

                  if (_arg51.Node.Case === "Property") {
                    if (_arg51.Entity != null) {
                      if (function () {
                        var sym = _arg51.Entity.Symbol;
                        var n = _arg51.Node.Fields[1];

                        if (n.Node.Name !== "then") {
                          return n.Node.Name !== "sort data";
                        } else {
                          return false;
                        }
                      }()) {
                        var n = _arg51.Node.Fields[1];
                        var sym = _arg51.Entity.Symbol;
                        return [sym, n];
                      } else {
                        return _target1();
                      }
                    } else {
                      return _target1();
                    }
                  } else {
                    return _target1();
                  }
                }, nodes);
                var last$$1 = tryLast(props);
                return {
                  v: append$1(collect$1(function (matchValue) {
                    return singleton$1(function (arg0) {
                      return function (arg1) {
                        return El.op_Dynamic(arg0, arg1);
                      };
                    }(h$$1)("span")(new List$2())(toList(delay(function () {
                      return append$1(singleton$1(function (arg0) {
                        return function (arg1) {
                          return El.op_Dynamic(arg0, arg1);
                        };
                      }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("SelectRange", [matchValue[1].Range])))]))(ofArray([text(matchValue[1].Node.Name)]))), delay(function () {
                        return matchValue[1].Node.Name === last$$1[1].Node.Name ? singleton$1(function (arg0) {
                          return function (arg1) {
                            return El.op_Dynamic(arg0, arg1);
                          };
                        }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("RemoveElement", [matchValue[0]])))]))(ofArray([function (arg0) {
                          return function (arg1) {
                            return El.op_Dynamic(arg0, arg1);
                          };
                        }(h$$1)("i")(ofArray([op_EqualsGreater("class", "fa fa-times")]))(new List$2())]))) : empty();
                      }));
                    }))));
                  }, props), delay(function () {
                    return singleton$1(renderContextMenu(trigger));
                  }))
                };
              }();

              if ((typeof _ret19 === "undefined" ? "undefined" : _typeof$2(_ret19)) === "object") return _ret19.v;
            } else {
              if (section.Transformation.Case === "DropColumns") {
                var _nodes = section.Nodes;
                return append$1(renderNodeList(trigger, _nodes.tail), delay(function () {
                  return singleton$1(renderContextMenu(trigger));
                }));
              } else {
                return _target5();
              }
            }
          }
        }
      }
    } else {
      return _target5();
    }
  }));
}
function renderPivot(triggerEvent, state) {
  var trigger = function trigger(action) {
    return function (_arg1) {
      return function (e) {
        e.cancelBubble = true;
        triggerEvent(new LiveEvent("CustomEvent", [action]));
      };
    };
  };

  var triggerWith = function triggerWith(f) {
    return function (el) {
      return function (e) {
        e.cancelBubble = true;
        triggerEvent(new LiveEvent("CustomEvent", [f(el)]));
      };
    };
  };

  var selSec = tryFind(function (sec) {
    return exists$1(function (secEnt) {
      return equals(state.State.SelectedEntity.Symbol, secEnt.Entity.Symbol);
    }, sec.Nodes);
  }, state.State.Sections);
  var firstNode = state.State.FirstNode;

  var dom = function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("div")(toList(delay(function () {
    return append$1(singleton$1(op_EqualsGreater("class", "pivot-preview")), delay(function () {
      return !state.State.Menus.Equals(new PivotEditorMenus("Hidden", [])) ? singleton$1(op_EqualsBangGreater("click", trigger(new PivotEditorAction("SwitchMenu", [new PivotEditorMenus("Hidden", [])])))) : empty();
    }));
  })))(ofArray([function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("ul")(ofArray([op_EqualsGreater("class", "tabs")]))(toList(delay(function () {
    return append$1(singleton$1(function (arg0) {
      return function (arg1) {
        return El.op_Dynamic(arg0, arg1);
      };
    }(h$$1)("li")(ofArray([op_EqualsGreater("class", equals(state.State.SelectedEntity.Symbol, firstNode.Entity.Symbol) ? "selected" : "")]))(ofArray([function (arg0) {
      return function (arg1) {
        return El.op_Dynamic(arg0, arg1);
      };
    }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("SelectRange", [firstNode.Range])))]))(toList(delay(function () {
      return firstNode.Node.Case === "Variable" ? singleton$1(text(firstNode.Node.Fields[0].Node.Name)) : singleton$1(text("data"));
    })))]))), delay(function () {
      return append$1(map$5(function (sec) {
        var selected = exists$1(function (secEnt) {
          return equals(state.State.SelectedEntity.Symbol, secEnt.Entity.Symbol);
        }, sec.Nodes);
        var secSymbol = sec.Nodes.head.Entity.Symbol;

        var identRange = function () {
          var _target0 = function _target0(n) {
            return n.Range;
          };

          var _target1 = function _target1() {
            throw new Error("Unexpected node in pivot call chain");
          };

          if (sec.Nodes.tail != null) {
            if (sec.Nodes.head.Node.Case === "Variable") {
              return _target0(sec.Nodes.head.Node.Fields[0]);
            } else {
              if (sec.Nodes.head.Node.Case === "Call") {
                return _target0(sec.Nodes.head.Node.Fields[1]);
              } else {
                if (sec.Nodes.head.Node.Case === "Property") {
                  return _target0(sec.Nodes.head.Node.Fields[1]);
                } else {
                  return _target1();
                }
              }
            }
          } else {
            return _target1();
          }
        }();

        return function (arg0) {
          return function (arg1) {
            return El.op_Dynamic(arg0, arg1);
          };
        }(h$$1)("li")(ofArray([op_EqualsGreater("class", selected ? "selected" : "")]))(ofArray([function (arg0) {
          return function (arg1) {
            return El.op_Dynamic(arg0, arg1);
          };
        }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("SelectRange", [identRange])))]))(ofArray([text(transformName(sec.Transformation))])), function (arg0) {
          return function (arg1) {
            return El.op_Dynamic(arg0, arg1);
          };
        }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("RemoveSection", [secSymbol])))]))(ofArray([function (arg0) {
          return function (arg1) {
            return El.op_Dynamic(arg0, arg1);
          };
        }(h$$1)("i")(ofArray([op_EqualsGreater("class", "fa fa-times")]))(new List$2())]))]));
      }, state.State.Sections), delay(function () {
        return singleton$1(function (arg0) {
          return function (arg1) {
            return El.op_Dynamic(arg0, arg1);
          };
        }(h$$1)("li")(ofArray([op_EqualsGreater("class", state.State.Menus.Equals(new PivotEditorMenus("AddDropdownOpen", [])) ? "add selected" : "add")]))(ofArray([function (arg0) {
          return function (arg1) {
            return El.op_Dynamic(arg0, arg1);
          };
        }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("SwitchMenu", [new PivotEditorMenus("AddDropdownOpen", [])])))]))(ofArray([function (arg0) {
          return function (arg1) {
            return El.op_Dynamic(arg0, arg1);
          };
        }(h$$1)("i")(ofArray([op_EqualsGreater("class", "fa fa-plus")]))(new List$2())]))])));
      }));
    }));
  }))), function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("div")(ofArray([op_EqualsGreater("class", "add-menu")]))(toList(delay(function () {
    var clickHandler = function clickHandler(tfs) {
      return op_EqualsBangGreater("click", trigger(new PivotEditorAction("AddTransform", [tfs])));
    };

    if (state.State.Menus.Equals(new PivotEditorMenus("AddDropdownOpen", []))) {
      return singleton$1(function (arg0) {
        return function (arg1) {
          return El.op_Dynamic(arg0, arg1);
        };
      }(h$$1)("ul")(new List$2())(toList(delay(function () {
        return append$1(singleton$1(function (arg0) {
          return function (arg1) {
            return El.op_Dynamic(arg0, arg1);
          };
        }(h$$1)("li")(new List$2())(ofArray([function (arg0) {
          return function (arg1) {
            return El.op_Dynamic(arg0, arg1);
          };
        }(h$$1)("a")(ofArray([clickHandler(new Transformation("DropColumns", [new List$2()]))]))(ofArray([text("drop columns")]))]))), delay(function () {
          return append$1(singleton$1(function (arg0) {
            return function (arg1) {
              return El.op_Dynamic(arg0, arg1);
            };
          }(h$$1)("li")(new List$2())(ofArray([function (arg0) {
            return function (arg1) {
              return El.op_Dynamic(arg0, arg1);
            };
          }(h$$1)("a")(ofArray([clickHandler(new Transformation("FilterBy", [new List$2()]))]))(ofArray([text("filter by")]))]))), delay(function () {
            return append$1(singleton$1(function (arg0) {
              return function (arg1) {
                return El.op_Dynamic(arg0, arg1);
              };
            }(h$$1)("li")(new List$2())(ofArray([function (arg0) {
              return function (arg1) {
                return El.op_Dynamic(arg0, arg1);
              };
            }(h$$1)("a")(ofArray([clickHandler(new Transformation("GroupBy", [new List$2(), new List$2()]))]))(ofArray([text("group by")]))]))), delay(function () {
              return append$1(singleton$1(function (arg0) {
                return function (arg1) {
                  return El.op_Dynamic(arg0, arg1);
                };
              }(h$$1)("li")(new List$2())(ofArray([function (arg0) {
                return function (arg1) {
                  return El.op_Dynamic(arg0, arg1);
                };
              }(h$$1)("a")(ofArray([clickHandler(new Transformation("Paging", [new List$2()]))]))(ofArray([text("paging")]))]))), delay(function () {
                return append$1(singleton$1(function (arg0) {
                  return function (arg1) {
                    return El.op_Dynamic(arg0, arg1);
                  };
                }(h$$1)("li")(new List$2())(ofArray([function (arg0) {
                  return function (arg1) {
                    return El.op_Dynamic(arg0, arg1);
                  };
                }(h$$1)("a")(ofArray([clickHandler(new Transformation("SortBy", [new List$2()]))]))(ofArray([text("sort by")]))]))), delay(function () {
                  var getDataCalled = exists$1(function (_arg70) {
                    var _target0 = function _target0() {
                      return true;
                    };

                    if (_arg70.Transformation.Case === "GetTheData") {
                      return _target0();
                    } else {
                      if (_arg70.Transformation.Case === "GetSeries") {
                        return _target0();
                      } else {
                        return false;
                      }
                    }
                  }, state.State.Sections);

                  if (!getDataCalled) {
                    return append$1(singleton$1(function (arg0) {
                      return function (arg1) {
                        return El.op_Dynamic(arg0, arg1);
                      };
                    }(h$$1)("li")(new List$2())(ofArray([function (arg0) {
                      return function (arg1) {
                        return El.op_Dynamic(arg0, arg1);
                      };
                    }(h$$1)("a")(ofArray([clickHandler(new Transformation("GetTheData", []))]))(ofArray([text("get the data")]))]))), delay(function () {
                      return singleton$1(function (arg0) {
                        return function (arg1) {
                          return El.op_Dynamic(arg0, arg1);
                        };
                      }(h$$1)("li")(new List$2())(ofArray([function (arg0) {
                        return function (arg1) {
                          return El.op_Dynamic(arg0, arg1);
                        };
                      }(h$$1)("a")(ofArray([clickHandler(new Transformation("GetSeries", ["!", "!"]))]))(ofArray([text("get series")]))])));
                    }));
                  } else {
                    return empty();
                  }
                }));
              }));
            }));
          }));
        }));
      }))));
    } else {
      return empty();
    }
  }))), function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("div")(ofArray([op_EqualsGreater("class", "toolbar")]))(toList(delay(function () {
    return append$1(singleton$1(function (arg0) {
      return function (arg1) {
        return El.op_Dynamic(arg0, arg1);
      };
    }(h$$1)("span")(ofArray([op_EqualsGreater("class", "navig")]))(ofArray([function (arg0) {
      return function (arg1) {
        return El.op_Dynamic(arg0, arg1);
      };
    }(h$$1)("a")(new List$2())(ofArray([function (arg0) {
      return function (arg1) {
        return El.op_Dynamic(arg0, arg1);
      };
    }(h$$1)("i")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("SelectChainElement", [-1]))), op_EqualsGreater("class", "fa fa-chevron-left")]))(new List$2())])), function (arg0) {
      return function (arg1) {
        return El.op_Dynamic(arg0, arg1);
      };
    }(h$$1)("a")(new List$2())(ofArray([function (arg0) {
      return function (arg1) {
        return El.op_Dynamic(arg0, arg1);
      };
    }(h$$1)("i")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("SelectChainElement", [0]))), op_EqualsGreater("class", "fa fa-circle")]))(new List$2())])), function (arg0) {
      return function (arg1) {
        return El.op_Dynamic(arg0, arg1);
      };
    }(h$$1)("a")(new List$2())(ofArray([function (arg0) {
      return function (arg1) {
        return El.op_Dynamic(arg0, arg1);
      };
    }(h$$1)("i")(ofArray([op_EqualsBangGreater("click", trigger(new PivotEditorAction("SelectChainElement", [1]))), op_EqualsGreater("class", "fa fa-chevron-right")]))(new List$2())]))]))), delay(function () {
      return renderSection(triggerEvent, selSec);
    }));
  }))), function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("div")(ofArray([op_EqualsGreater("class", "add-menu")]))(toList(delay(function () {
    var matchValue = [state.State.Menus, selSec];

    var _target4 = function _target4() {
      return empty();
    };

    if (matchValue[0].Case === "ContextualDropdownOpen") {
      if (matchValue[1] != null) {
        if (matchValue[1].Transformation.Case === "Paging") {
          var _ret20 = function () {
            var nodes = matchValue[1].Nodes;
            var methods = new _Map(choose$$1(function (_arg110) {
              var _target0 = function _target0(e, n) {
                return [n.Node.Name, e.Symbol];
              };

              if (_arg110.Node.Case === "Property") {
                return _target0(_arg110.Entity, _arg110.Node.Fields[1]);
              } else {
                if (_arg110.Node.Case === "Call") {
                  return _target0(_arg110.Entity, _arg110.Node.Fields[1]);
                }
              }
            }, nodes));
            var lastSym = last(nodes).Entity.Symbol;
            var firstSym = nodes.head.Entity.Symbol;
            return {
              v: singleton$1(function (arg0) {
                return function (arg1) {
                  return El.op_Dynamic(arg0, arg1);
                };
              }(h$$1)("ul")(new List$2())(toList(delay(function () {
                return append$1(!methods.has("take") ? function () {
                  var op = methods.has("then") ? new PivotEditorAction("ReplaceElement", [methods.get("then"), "take", ofArray([new Expr("Number", [10])])]) : new PivotEditorAction("AddElement", [lastSym, "take", ofArray([new Expr("Number", [10])])]);
                  return singleton$1(function (arg0) {
                    return function (arg1) {
                      return El.op_Dynamic(arg0, arg1);
                    };
                  }(h$$1)("li")(new List$2())(ofArray([function (arg0) {
                    return function (arg1) {
                      return El.op_Dynamic(arg0, arg1);
                    };
                  }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(op))]))(ofArray([text("take")]))])));
                }() : empty(), delay(function () {
                  return !methods.has("skip") ? function () {
                    var op = new PivotEditorAction("AddElement", [firstSym, "skip", ofArray([new Expr("Number", [10])])]);
                    return singleton$1(function (arg0) {
                      return function (arg1) {
                        return El.op_Dynamic(arg0, arg1);
                      };
                    }(h$$1)("li")(new List$2())(ofArray([function (arg0) {
                      return function (arg1) {
                        return El.op_Dynamic(arg0, arg1);
                      };
                    }(h$$1)("a")(ofArray([op_EqualsBangGreater("click", trigger(op))]))(ofArray([text("skip")]))])));
                  }() : empty();
                }));
              }))))
            };
          }();

          if ((typeof _ret20 === "undefined" ? "undefined" : _typeof$2(_ret20)) === "object") return _ret20.v;
        } else {
          if (matchValue[1].Transformation.Case === "GroupBy") {
            var _nodes2 = matchValue[1].Nodes;
            return renderAddPropertyMenu(trigger, function (n) {
              return (n !== "then" ? n !== "preview" : false) ? !(n.indexOf("and") === 0) : false;
            }, _nodes2);
          } else {
            if (matchValue[1].Transformation.Case === "SortBy") {
              var _nodes3 = matchValue[1].Nodes;
              return renderAddPropertyMenu(trigger, function (n) {
                return n !== "then" ? n !== "preview" : false;
              }, _nodes3);
            } else {
              if (matchValue[1].Transformation.Case === "DropColumns") {
                var _nodes4 = matchValue[1].Nodes;
                return renderAddPropertyMenu(trigger, function (n) {
                  return n !== "then" ? n !== "preview" : false;
                }, _nodes4);
              } else {
                return _target4();
              }
            }
          }
        }
      } else {
        return _target4();
      }
    } else {
      return _target4();
    }
  }))), function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("div")(ofArray([op_EqualsGreater("class", "preview-body")]))(toList(delay(function () {
    return singleton$1(state.State.Preview);
  })))]));

  var patternInput = state.Mapper.AbsoluteToLineCol(state.State.Body.Range.End);
  return new LiveEditorZone(patternInput[0], dom);
}
var preview = new LivePreview(function (trigger) {
  return function (state) {
    return function (event) {
      return updatePivotState(trigger, state, event);
    };
  };
}, function (triggerEvent) {
  return function (state) {
    return renderPivot(triggerEvent, state);
  };
}, function () {
  var Body = node(new _Range(0, 0), new Expr("Empty", []));
  var FirstNode = node(new _Range(0, 0), new Expr("Empty", []));
  var SelectedEntity = null;
  return new PivotEditorState(Body, FirstNode, text("not created"), new List$2(), SelectedEntity, new PivotEditorMenus("Hidden", []));
}());

function commandAtLocation$1(loc, program) {
  return tryFind(function (cmd) {
    return cmd.Range.Start <= loc ? cmd.Range.End + 1 >= loc : false;
  }, program.Body.Node);
}
var ShowableEditorState = function () {
  function ShowableEditorState(endLocation, preview, previewSymbol, previewID) {
    _classCallCheck(this, ShowableEditorState);

    this.EndLocation = endLocation;
    this.Preview = preview;
    this.PreviewSymbol = previewSymbol;
    this.PreviewID = previewID;
  }

  _createClass(ShowableEditorState, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "TheGamma.Live.Showable.ShowableEditorState",
        interfaces: ["FSharpRecord"],
        properties: {
          EndLocation: "number",
          Preview: DomNode,
          PreviewSymbol: Interface("TheGamma.Common.Symbol"),
          PreviewID: "number"
        }
      };
    }
  }]);

  return ShowableEditorState;
}();
setType("TheGamma.Live.Showable.ShowableEditorState", ShowableEditorState);
function updateBody$1(trigger, state) {
  Log.trace("live", "Showable - updating body");
  var matchValue = commandAtLocation$1(state.Location, state.Program);

  var _target1 = function _target1() {
    return null;
  };

  if (matchValue != null) {
    if (matchValue.Node.Case === "Expr") {
      if (matchValue.Entity != null) {
        if (matchValue.Entity.Kind.Case === "RunCommand") {
          var _ret = function () {
            var cmd = matchValue;
            var e = matchValue.Node.Fields[0];
            var ent = matchValue.Entity.Kind.Fields[0];
            {
              var matchValue_1 = reduceType(ent.Type);

              if (matchValue_1.Case === "Object") {
                var members = matchValue_1.Fields[0].Members;
                var hasShow = members.some(function (_arg1) {
                  var _target1_1 = function _target1_1() {
                    return false;
                  };

                  if (_arg1.Case === "Method") {
                    if (_arg1.Fields[0] === "show") {
                      if (_arg1.Fields[1].tail != null) {
                        if (_arg1.Fields[1].head[2].Case === "Primitive") {
                          if (_arg1.Fields[1].head[2].Fields[0].Case === "String") {
                            if (_arg1.Fields[1].tail.tail == null) {
                              return true;
                            } else {
                              return _target1_1();
                            }
                          } else {
                            return _target1_1();
                          }
                        } else {
                          return _target1_1();
                        }
                      } else {
                        return _target1_1();
                      }
                    } else {
                      return _target1_1();
                    }
                  } else {
                    return _target1_1();
                  }
                });

                if (hasShow) {
                  var _ret2 = function () {
                    var res = evaluate(state.Globals, ent);

                    if (res != null) {
                      var _ret3 = function () {
                        var id = !equals(ent.Symbol, state.State.PreviewSymbol) ? state.State.PreviewID + 1 : state.State.PreviewID;

                        var placeholder = function (arg0) {
                          return function (arg1) {
                            return El.op_Dynamic(arg0, arg1);
                          };
                        }(h$$1)("div")(ofArray([op_EqualsGreater("class", "placeholder")]))(ofArray([text("Loading preview...")]));

                        var dom = function (arg0) {
                          return function (arg1) {
                            return El.op_Dynamic(arg0, arg1);
                          };
                        }(h$$1)("div")(new List$2())(ofArray([function (arg00) {
                          return function (arg10) {
                            return function (arg20) {
                              return h$$1.delayed(arg00, arg10, arg20);
                            };
                          };
                        }(String(id))(placeholder)(function (id_1) {
                          Log.trace("live", "Show: %O", res.Value);
                          res.Value.show(id_1);
                        })]));

                        return {
                          v: {
                            v: {
                              v: function () {
                                var State = new ShowableEditorState(cmd.Range.End, dom, ent.Symbol, id);
                                return new LiveState(state.Globals, state.Code, state.Program, state.Mapper, state.Location, state.Selection, State, state.CurrentPreview);
                              }()
                            }
                          }
                        };
                      }();

                      if ((typeof _ret3 === "undefined" ? "undefined" : _typeof$2(_ret3)) === "object") return _ret3.v;
                    }
                  }();

                  if ((typeof _ret2 === "undefined" ? "undefined" : _typeof$2(_ret2)) === "object") return _ret2.v;
                }
              }
            }
          }();

          if ((typeof _ret === "undefined" ? "undefined" : _typeof$2(_ret)) === "object") return _ret.v;
        } else {
          return _target1();
        }
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}
function updateShowableState(trigger, state, event) {
  var _target0 = function _target0() {
    return function (state_1) {
      return updateBody$1(trigger, state_1);
    }(state);
  };

  var _target1 = function _target1() {
    return state;
  };

  if (event.Case === "UpdateLocation") {
    return _target0();
  } else {
    if (event.Case === "InitializeGlobals") {
      return _target1();
    } else {
      if (event.Case === "CustomEvent") {
        return _target1();
      } else {
        return _target0();
      }
    }
  }
}
function renderShowable(trigger, state) {
  var patternInput = state.Mapper.AbsoluteToLineCol(state.State.EndLocation);

  var dom = function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("div")(ofArray([op_EqualsGreater("class", "pivot-preview")]))(ofArray([function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("ul")(ofArray([op_EqualsGreater("class", "tabs")]))(ofArray([function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("li")(ofArray([op_EqualsGreater("class", "selected")]))(ofArray([function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("a")(new List$2())(ofArray([text("preview")]))]))])), function (arg0) {
    return function (arg1) {
      return El.op_Dynamic(arg0, arg1);
    };
  }(h$$1)("div")(ofArray([op_EqualsGreater("class", "preview-body")]))(toList(delay(function () {
    return singleton$1(state.State.Preview);
  })))]));

  return new LiveEditorZone(patternInput[0], dom);
}
var preview$1 = new LivePreview(function (trigger) {
  return function (state) {
    return function (event) {
      return updateShowableState(trigger, state, event);
    };
  };
}, function (trigger) {
  return function (state) {
    return renderShowable(trigger, state);
  };
}, function () {
  var PreviewID = 0;

  var PreviewSymbol = _Symbol2();

  return new ShowableEditorState(0, text("not created"), PreviewSymbol, PreviewID);
}());

var defineEnumerableProperties = createCommonjsModule(function (module, exports) {
"use strict";

exports.__esModule = true;

var _defineProperty = defineProperty$1;

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, descs) {
  for (var key in descs) {
    var desc = descs[key];
    desc.configurable = desc.enumerable = true;
    if ("value" in desc) desc.writable = true;
    (0, _defineProperty2.default)(obj, key, desc);
  }

  return obj;
};
});

var _defineEnumerableProperties = unwrapExports(defineEnumerableProperties);

var _noState;
var _tokensProvider;

var i$2 = 1;
eval('monaco$' + i$2 + ' = monaco');
monaco = monaco;
var noState = (_noState = {}, _defineProperty(_noState, _Symbol.reflection, {
  "interfaces": ["Fable.Import.monaco.languages.IState"]
}), _defineProperty(_noState, "clone", function () {
  return this;
}), _defineProperty(_noState, "equals", function (other) {
  return true;
}), _noState);
function getColorClass(_arg1) {
  var _target1 = function _target1() {
    return "ident";
  };

  var _target3 = function _target3() {
    return "keyword";
  };

  if (_arg1.Case === "String") {
    return "string";
  } else {
    if (_arg1.Case === "QIdent") {
      return _target1();
    } else {
      if (_arg1.Case === "Ident") {
        return _target1();
      } else {
        if (_arg1.Case === "Dot") {
          return "operator";
        } else {
          if (_arg1.Case === "By") {
            return _target3();
          } else {
            if (_arg1.Case === "To") {
              return _target3();
            } else {
              if (_arg1.Case === "Let") {
                return _target3();
              } else {
                if (_arg1.Case === "Boolean") {
                  return _target3();
                } else {
                  if (_arg1.Case === "Fun") {
                    return _target3();
                  } else {
                    if (_arg1.Case === "Arrow") {
                      return _target3();
                    } else {
                      if (_arg1.Case === "Number") {
                        return "number";
                      } else {
                        return "";
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
var tokensProvider = (_tokensProvider = {}, _defineProperty(_tokensProvider, _Symbol.reflection, {
  "interfaces": ["Fable.Import.monaco.languages.TokensProvider"]
}), _defineProperty(_tokensProvider, "tokenize", function (line, state) {
  var tokens = {};
  tokens.endState = noState;
  tokens.tokens = [];

  var patternInput = tokenize(line);

  for (var idx = 0; idx <= patternInput[0].length - 1; idx++) {
    var t = patternInput[0][idx];
    var tok = {};
    tok.startIndex = t.Range.Start;
    tok.scopes = getColorClass(t.Token);
    tokens.tokens.push(tok);
  }

  return tokens;
}), _defineProperty(_tokensProvider, "getInitialState", function () {
  return noState;
}), _tokensProvider);
function createCompletionProvider(getService) {
  var _triggerCharacters, _ref, _mutatorMap;

  return _ref = {}, _defineProperty(_ref, _Symbol.reflection, {
    "interfaces": ["Fable.Import.monaco.languages.CompletionItemProvider"]
  }), _triggerCharacters = "triggerCharacters", _mutatorMap = {}, _mutatorMap[_triggerCharacters] = _mutatorMap[_triggerCharacters] || {}, _mutatorMap[_triggerCharacters].get = function () {
    return _Array$from(ofArray(["."]));
  }, _defineProperty(_ref, "provideCompletionItems", function (model, position, token) {
    return function (arg00) {
      return startAsPromise(arg00);
    }(function (builder_) {
      return builder_.Delay(function () {
        return builder_.TryWith(builder_.Delay(function () {
          var svc = getService(model.uri.toString());
          var input = model.getValue(1, false);
          Log.event("editor", "completions", "", {
            source: input,
            position: position
          });
          var conv = new LocationMapper(input);
          var loc = conv.LineColToAbsolute(~~position.lineNumber, ~~position.column);
          return builder_.Bind(svc.TypeCheck(input), function (_arg1) {
            var optMembers = tryPick(function (tupledArg) {
              var _target1 = function _target1() {
                var _target1 = function _target1() {
                  return null;
                };

                if (tupledArg[1].Kind.Case === "NamedMember") {
                  if (tupledArg[1].Kind.Fields[1].Type != null) {
                    var n = tupledArg[1].Kind.Fields[0];
                    var t = tupledArg[1].Kind.Fields[1].Type;
                    {
                      Log.trace("completions", "Ignoring '%s' at location %s-%s (current=%s)", n.Name, tupledArg[0].Start, tupledArg[0].End, loc);
                      return null;
                    }
                  } else {
                    return _target1();
                  }
                } else {
                  return _target1();
                }
              };

              if (tupledArg[1].Kind.Case === "NamedMember") {
                if (tupledArg[1].Kind.Fields[1].Type != null) {
                  if (function () {
                    var t = tupledArg[1].Kind.Fields[1].Type;

                    if (loc >= tupledArg[0].Start) {
                      return loc <= tupledArg[0].End + 1;
                    } else {
                      return false;
                    }
                  }()) {
                    var t = tupledArg[1].Kind.Fields[1].Type;
                    Log.trace("completions", "Antecedant at current location: %O", t);
                    var matchValue = reduceType(t);

                    if (matchValue.Case === "Object") {
                      var mems = matchValue.Fields[0].Members;
                      return [tupledArg[0], mems];
                    }
                  } else {
                    return _target1();
                  }
                } else {
                  return _target1();
                }
              } else {
                return _target1();
              }
            }, _arg1[1].Entities);

            var convertRange = function convertRange(rng) {
              var patternInput = conv.AbsoluteToLineCol(rng.Start);
              var patternInput_1 = conv.AbsoluteToLineCol(rng.End);
              var res = {};
              res.startColumn = patternInput[1];
              res.startLineNumber = patternInput[0];
              res.endColumn = patternInput_1[1] + 1;
              res.endLineNumber = patternInput_1[0];
              return res;
            };

            if (optMembers != null) {
              var _ret = function () {
                var nameRange = optMembers[0];
                var members = optMembers[1];
                var nameRange_1 = convertRange(nameRange);
                Log.trace("completions", "providing %s members at %O", members.length, nameRange_1);
                var completion = toList(delay(function () {
                  return map$5(function (m) {
                    var ci = {};
                    var patternInput = m.Case === "Property" ? [m.Fields[0], 9] : [m.Fields[0], 1];
                    ci.kind = patternInput[1];
                    ci.label = patternInput[0];
                    ci.insertText = escapeIdent(patternInput[0]);
                    ci.filterText = patternInput[0];

                    if (m.Case === "Method") {
                      var patternInput_1 = function () {
                        var folder = function folder(tupledArg) {
                          return function (s) {
                            return tupledArg[1].length > 100 ? [new List$2(tupledArg[1], tupledArg[0]), s] : [tupledArg[0], tupledArg[1] === "" ? s : tupledArg[1] + "," + s];
                          };
                        };

                        var arg = [new List$2(), ""];
                        return function (source) {
                          return fold$1(function ($var112, $var113) {
                            return folder($var112)($var113);
                          }, [arg[0], arg[1]], source);
                        };
                      }()(toList(delay(function () {
                        return collect$1(function (matchValue) {
                          return singleton$1((matchValue[1] ? "?" : "") + matchValue[0]);
                        }, m.Fields[1]);
                      })));

                      var args = join(",\n", reverse$$1(new List$2(patternInput_1[1], patternInput_1[0])));
                      ci.documentation = "(" + args + ")";
                    }

                    var eo = {};
                    eo.text = escapeIdent(patternInput[0]);
                    eo.range = nameRange_1;
                    ci.textEdit = eo;
                    return ci;
                  }, members);
                }));
                Log.trace("completions", "returning %O", _Array$from(completion));
                return {
                  v: builder_.Return(_Array$from(completion))
                };
              }();

              if ((typeof _ret === "undefined" ? "undefined" : _typeof$2(_ret)) === "object") return _ret.v;
            } else {
              Log.trace("completions", "no members at %s", loc);
              return builder_.Return(_Array$from(new List$2()));
            }
          });
        }), function (_arg2) {
          Log.exn("completions", "completions failed %O", _arg2);
          return builder_.Return([]);
        });
      });
    }(singleton$2));
  }), _defineProperty(_ref, "resolveCompletionItem", function (item$$1, token) {
    return item$$1;
  }), _defineEnumerableProperties(_ref, _mutatorMap), _ref;
}
var createdEditors = new _Map();
function getService(uri) {
  return createdEditors.get(uri);
}
function setupMonacoServices() {
  var lang = {};
  lang.id = "thegamma";
  monaco$1.languages.register(lang);
  monaco$1.languages.setTokensProvider("thegamma", tokensProvider);
  monaco$1.languages.registerCompletionItemProvider("thegamma", createCompletionProvider(function (uri) {
    return getService(uri);
  }));
}
function createMonacoEditor(id, code, svc, customize) {
  if (createdEditors.size === 0) {
    setupMonacoServices();
  }

  var services = {};
  var options = {};
  var scroll = {};
  scroll.vertical = "none";
  scroll.horizontal = "auto";
  options.scrollbar = scroll;
  options.value = code;
  options.language = "thegamma";
  options.lineNumbersMinChars = 3;
  options.contextmenu = false;
  options.scrollBeyondLastLine = false;
  options.overviewRulerLanes = 0;
  customize(options);
  var ed = monaco$1.editor.create(document.getElementById(id), options, services);
  createdEditors.set(ed.getModel().uri.toString(), svc);
  return ed;
}

function buildGlobalsTable(provideTypes) {
  return function (arg00) {
    return function (arg10) {
      return Async_StartAsNamedFuture_Static(arg00, arg10);
    };
  }("buildGlobalsTable")(function (builder_) {
    return builder_.Delay(function () {
      var named = create$4(null, new GenericComparer(function (x, y) {
        return x < y ? -1 : x > y ? 1 : 0;
      }));

      var lookupNamed = function lookupNamed(n) {
        return function (tyargs) {
          var matchValue = tryFind$1(n, named);

          if (matchValue == null) {
            Log.error("Could not find named type '%s'", n);
            throw new Error(fsFormat("Could not find named type '%s'")(function (x) {
              return x;
            })(n));
          } else {
            var tya = matchValue[1];
            var r = matchValue[0];

            if (tya.length !== tyargs.length) {
              Log.error("Named type '%s' has mismatching length of type arguments", n);
              throw new Error(fsFormat("Named type '%s' has mismatching length of type arguments")(function (x) {
                return x;
              })(n));
            }

            if (tya.length > 0) {
              return new Type("App", [r, tyargs]);
            } else {
              return r;
            }
          }
        };
      };

      return builder_.Bind(provideTypes(lookupNamed), function (_arg1) {
        var allTypes = toList(delay(function () {
          return append$1(singleton$1(new ProvidedType("NamedType", ["value", ofArray(["a"]), new Type("Any", [])])), delay(function () {
            return append$1(singleton$1(new ProvidedType("NamedType", ["object", new List$2(), new Type("Any", [])])), delay(function () {
              return append$1(singleton$1(new ProvidedType("NamedType", ["seq", ofArray(["a"]), new Type("Any", [])])), delay(function () {
                return append$1(singleton$1(new ProvidedType("NamedType", ["async", ofArray(["a"]), new Type("Any", [])])), delay(function () {
                  return _arg1;
                }));
              }));
            }));
          }));
        }));
        named = create$4(choose$1(function (_arg2) {
          return _arg2.Case === "NamedType" ? [_arg2.Fields[0], [_arg2.Fields[2], _arg2.Fields[1]]] : null;
        }, allTypes), new GenericComparer(function (x, y) {
          return x < y ? -1 : x > y ? 1 : 0;
        }));
        var globalEntities = choose$$1(function (_arg3) {
          return _arg3.Case === "GlobalValue" ? globalEntity(_arg3.Fields[0], _arg3.Fields[1], _arg3.Fields[3], _arg3.Fields[2]) : null;
        }, allTypes);
        return builder_.Return(globalEntities);
      });
    });
  }(singleton$2));
}
var TheGammaProviders = function () {
  function TheGammaProviders(globals) {
    _classCallCheck(this, TheGammaProviders);

    this.globals = globals;
  }

  _createClass(TheGammaProviders, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "Main.TheGammaProviders",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          globals: Interface("TheGamma.Common.Future")
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }]);

  return TheGammaProviders;
}();
setType("Main.TheGammaProviders", TheGammaProviders);
var TheGammaContext = function () {
  function TheGammaContext(checkingService, providers) {
    _classCallCheck(this, TheGammaContext);

    this.checkingService = checkingService;
    this.providers = providers;
  }

  _createClass(TheGammaContext, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "Main.TheGammaContext",
        interfaces: ["FSharpRecord", "System.IEquatable"],
        properties: {
          checkingService: CheckingService,
          providers: TheGammaProviders
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }]);

  return TheGammaContext;
}();
setType("Main.TheGammaContext", TheGammaContext);
function callShowMethod(outputId, cmd) {
  var _target1 = function _target1() {
    return cmd;
  };

  if (cmd.Node.Case === "Expr") {
    if (cmd.Node.Fields[0].Entity != null) {
      if (cmd.Node.Fields[0].Entity.Type != null) {
        var inst = cmd.Node.Fields[0];
        var typ = cmd.Node.Fields[0].Entity.Type;
        {
          var matchValue = reduceType(typ);

          if (matchValue.Case === "Object") {
            var members = matchValue.Fields[0].Members;
            var hasShow = members.some(function (_arg1) {
              var _target1_1 = function _target1_1() {
                return false;
              };

              if (_arg1.Case === "Method") {
                if (_arg1.Fields[0] === "show") {
                  if (_arg1.Fields[1].tail != null) {
                    if (_arg1.Fields[1].head[2].Case === "Primitive") {
                      if (_arg1.Fields[1].head[2].Fields[0].Case === "String") {
                        if (_arg1.Fields[1].tail.tail == null) {
                          return true;
                        } else {
                          return _target1_1();
                        }
                      } else {
                        return _target1_1();
                      }
                    } else {
                      return _target1_1();
                    }
                  } else {
                    return _target1_1();
                  }
                } else {
                  return _target1_1();
                }
              } else {
                return _target1_1();
              }
            });

            if (hasShow) {
              var rng = new _Range(cmd.Range.End, cmd.Range.End);
              var outExpr = node(rng, new Expr("String", [outputId]));
              var args = ofArray([new Argument(null, outExpr)]);
              var expr = node(rng, new Expr("Call", [inst, node(rng, new Name("show")), node(rng, args)]));
              return node(cmd.Range, new Command("Expr", [expr]));
            } else {
              return cmd;
            }
          } else {
            return cmd;
          }
        }
      } else {
        return _target1();
      }
    } else {
      return _target1();
    }
  } else {
    return _target1();
  }
}

function _evaluate(ctx, code, outputId) {
  return function (builder_) {
    return builder_.Delay(function () {
      return builder_.Bind(ctx.checkingService.TypeCheck(code), function (_arg1) {
        var newBody = outputId != null ? map$4(function (cmd) {
          return callShowMethod(outputId, cmd);
        }, _arg1[2].Body.Node) : _arg1[2].Body.Node;
        var prog = new Program$$1(new _Node(_arg1[2].Body.WhiteBefore, _arg1[2].Body.WhiteAfter, _arg1[2].Body.Range, newBody, _arg1[2].Body.Entity));
        return builder_.Bind(compile(ctx.providers.globals, code, prog), function (_arg2) {
          var s = series.create(function (builder__1) {
            return builder__1.Delay(function () {
              return builder__1.Return([]);
            });
          }(singleton$2), "", "", "");
          new RuntimeContext("lol", "", "troll");

          (function (c) {
            return function (s_1) {
              return trimLeft(c, s_1);
            };
          });

          (function (arg00) {
            return chart.bar(arg00);
          });

          table.create(s);
          timeline.create(s);
          series.values(new Int32Array([1]));
          return builder_.Return(eval(_arg2));
        });
      });
    });
  }(singleton$2);
}

var previews = ofArray([preview, preview$1]);
var editorOptions = function () {
  function editorOptions(width, height, maxHeight, autoHeight, monacoOptions) {
    _classCallCheck(this, editorOptions);

    this.width = width;
    this.height = height;
    this.maxHeight = maxHeight;
    this.autoHeight = autoHeight;
    this.monacoOptions = monacoOptions;
  }

  _createClass(editorOptions, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "Main.editorOptions",
        interfaces: ["FSharpRecord"],
        properties: {
          width: Option("number"),
          height: Option("number"),
          maxHeight: Option("number"),
          autoHeight: Option("boolean"),
          monacoOptions: Option("function")
        }
      };
    }
  }]);

  return editorOptions;
}();
setType("Main.editorOptions", editorOptions);
var error = function () {
  function error(number, message, startLine, startColumn, endLine, endColumn) {
    _classCallCheck(this, error);

    this.number = number;
    this.message = message;
    this.startLine = startLine;
    this.startColumn = startColumn;
    this.endLine = endLine;
    this.endColumn = endColumn;
  }

  _createClass(error, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "Main.error",
        interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
        properties: {
          number: "number",
          message: "string",
          startLine: "number",
          startColumn: "number",
          endLine: "number",
          endColumn: "number"
        }
      };
    }
  }, {
    key: "Equals",
    value: function (other) {
      return equalsRecords(this, other);
    }
  }, {
    key: "CompareTo",
    value: function (other) {
      return compareRecords(this, other);
    }
  }]);

  return error;
}();
setType("Main.error", error);
var defaultEditorOptions = new editorOptions();
var editor$1 = function () {
  _createClass(editor$$1, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "Main.editor",
        properties: {}
      };
    }
  }]);

  function editor$$1(ed) {
    _classCallCheck(this, editor$$1);

    this.ed = ed;
  }

  _createClass(editor$$1, [{
    key: "getValue",
    value: function () {
      return this.ed.getModel().getValue(1, false);
    }
  }, {
    key: "setValue",
    value: function (text) {
      this.ed.getModel().setValue(text);
    }
  }]);

  return editor$$1;
}();
setType("Main.editor", editor$1);
var gamma = function () {
  _createClass(gamma, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "Main.gamma",
        properties: {}
      };
    }
  }]);

  function gamma(ctx) {
    _classCallCheck(this, gamma);

    this.ctx = ctx;
  }

  _createClass(gamma, [{
    key: "evaluate",
    value: function (code, outputId) {
      var _this = this;

      (function (arg00) {
        startImmediate(arg00);
      })(function (builder_) {
        return builder_.Delay(function () {
          return builder_.TryWith(builder_.Delay(function () {
            return builder_.Bind(_evaluate(_this.ctx, code, outputId), function () {
              return builder_.Return();
            });
          }), function (_arg2) {
            Log.exn("api", "Evaluating code '%O' failed with error '%O'.", code, _arg2);
            return builder_.Zero();
          });
        });
      }(singleton$2));
    }
  }, {
    key: "errorsReported",
    value: function (f) {
      add$6(function (tupledArg) {
        f(_Array$from(sortWith(function (x, y) {
          return compare(function (e) {
            return e.Range.Start;
          }(x), function (e) {
            return e.Range.Start;
          }(y));
        }, tupledArg[1])).map(function (e) {
          return new error(e.Number, e.Message, e.Range.Start.Line, e.Range.Start.Column, e.Range.End.Line, e.Range.End.Column);
        }));
      }, this.ctx.checkingService.ErrorsReported);
    }
  }, {
    key: "createEditor",
    value: function (id, source, options) {
      var lineHeight = 20;
      var options_1 = options != null ? options : defaultEditorOptions;
      var el = document.getElementById(id);
      var width = options_1.width != null ? options_1.width : el.clientWidth;
      var height = options_1.height != null ? options_1.height : el.clientHeight;
      var maxHeight = options_1.maxHeight != null ? options_1.maxHeight : 2147483647;
      var ed = createMonacoEditor(id, source, this.ctx.checkingService, function (opts) {
        opts.fontSize = 15;
        opts.lineHeight = 20;
        (options_1.monacoOptions != null ? options_1.monacoOptions : function (value) {
          value;
        })(opts);
        var matchValue = opts.lineHeight;

        if (matchValue != null) {
          lineHeight = matchValue;
        }
      });
      var dim = {};
      dim.width = width;
      dim.height = height;
      ed.layout(dim);
      var previewService = new PreviewService(this.ctx.checkingService, this.ctx.providers.globals, ed, previews);
      var lastHeight = -1;

      var autosizeEditor = function autosizeEditor() {
        var text = ed.getModel().getValue(1, false);
        var lines = 1 + text.split("\n").length;
        var height_1 = compare(maxHeight, 200 > lines * 20 + previewService.ZoneHeight ? 200 : lines * 20 + previewService.ZoneHeight) < 0 ? maxHeight : 200 > lines * 20 + previewService.ZoneHeight ? 200 : lines * 20 + previewService.ZoneHeight;

        if (!equals(height_1, lastHeight)) {
          lastHeight = height_1;
          var dim_1 = {};
          dim_1.width = width;
          dim_1.height = height_1;
          ed.layout(dim_1);
          el.style.height = String(dim_1.height) + "px";
          el.style.width = String(dim_1.width) + "px";
        }
      };

      if (equals(options_1.autoHeight, true)) {
        ed.getModel().onDidChangeContent(function (_arg1) {
          autosizeEditor();
        });
        add$6(function () {
          autosizeEditor();
        }, previewService.ZoneSizeChanged);
        autosizeEditor();
      }

      return new editor$1(ed);
    }
  }], [{
    key: "createContext",
    value: function (providers) {
      var checkingSvc = new CheckingService("", providers.globals);
      return new gamma(new TheGammaContext(checkingSvc, providers));
    }
  }]);

  return gamma;
}();
setType("Main.gamma", gamma);
var providers = function () {
  function providers() {
    _classCallCheck(this, providers);
  }

  _createClass(providers, [{
    key: _Symbol.reflection,
    value: function () {
      return {
        type: "Main.providers",
        properties: {}
      };
    }
  }], [{
    key: "createProviders",
    value: function (providers_1) {
      var globals = buildGlobalsTable(function (lookup) {
        return function (builder_) {
          return builder_.Delay(function () {
            var providers_2 = function (o) {
              return _Object$keys(o).map(function (k) {
                return {
                  "key": k,
                  "value": o[k]
                };
              });
            }(providers_1).map(function (kv) {
              return kv.value(kv.key)(lookup);
            });

            return builder_.Bind(parallel(providers_2), function (_arg1) {
              return builder_.Return(concat$1(_arg1));
            });
          });
        }(singleton$2);
      });
      return new TheGammaProviders(globals);
    }
  }, {
    key: "rest",
    value: function (url, cookies) {
      return function (name) {
        return function (lookup) {
          return function (builder_) {
            return builder_.Delay(function () {
              return builder_.Return(ofArray([RestProvider.provideRestType(lookup, name, url, cookies != null ? cookies : "")]));
            });
          }(singleton$2);
        };
      };
    }
  }, {
    key: "library",
    value: function (url) {
      return function (_arg3) {
        return function (lookup) {
          return FSharpProvider.provideFSharpTypes(lookup, url);
        };
      };
    }
  }, {
    key: "pivot",
    value: function (url) {
      return function (name) {
        return function (lookup) {
          return function (builder_) {
            return builder_.Delay(function () {
              return builder_.Bind(Http.Request("GET", url + "?metadata"), function (_arg2) {
                var members = function (o) {
                  return _Object$keys(o).map(function (k) {
                    return {
                      "key": k,
                      "value": o[k]
                    };
                  });
                }(JSON.parse(_arg2)).map(function (kv) {
                  var typ = function () {
                    var matchValue = kv.value;
                    var $var114 = null;

                    switch (matchValue) {
                      case "string":
                        {
                          $var114 = new PrimitiveType("String", []);
                          break;
                        }

                      case "bool":
                        {
                          $var114 = new PrimitiveType("Bool", []);
                          break;
                        }

                      case "number":
                        {
                          $var114 = new PrimitiveType("Number", []);
                          break;
                        }

                      default:
                        {
                          throw new Error(fsFormat("The property '%s' has invalid type '%s'. Only 'string', 'number' and 'bool' are supported.")(function (x) {
                            return x;
                          })(kv.key)(matchValue));
                        }
                    }

                    return $var114;
                  }();

                  return [kv.key, typ];
                });

                return builder_.Return(ofArray([providePivotType(url, name, lookup, members)]));
              });
            });
          }(singleton$2);
        };
      };
    }
  }]);

  return providers;
}();
setType("Main.providers", providers);

exports.evaluate = _evaluate;
exports.buildGlobalsTable = buildGlobalsTable;
exports.TheGammaProviders = TheGammaProviders;
exports.TheGammaContext = TheGammaContext;
exports.callShowMethod = callShowMethod;
exports.previews = previews;
exports.editorOptions = editorOptions;
exports.error = error;
exports.defaultEditorOptions = defaultEditorOptions;
exports.editor = editor$1;
exports.gamma = gamma;
exports.providers = providers;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=thegamma.js.map